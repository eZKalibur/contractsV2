{
	"id": "8e75809decdf26e9a118f97a0635e857",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"farming/eZKaliburProxy.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.12;\r\n\r\nimport \"./utils/SafeBEP20.sol\";\r\nimport \"./access/OwnableUpgradeable.sol\";\r\nimport \"./library/WhitelistUpgradeable.sol\";\r\n\r\ncontract eZKaliburProxy is OwnableUpgradeable, WhitelistUpgradeable {\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    IBEP20 private token;\r\n\r\n    function initialize(IBEP20 _token) external initializer {\r\n        __Ownable_init();\r\n        token = _token;\r\n    }\r\n\r\n    function safeMeerkatTransfer(address to, uint256 amount) external onlyWhitelisted returns (uint256) {\r\n        uint256 meerkatBal = token.balanceOf(address(this));\r\n        if (amount > meerkatBal) {\r\n            token.transfer(to, meerkatBal);\r\n            return meerkatBal;\r\n        } else {\r\n            token.transfer(to, amount);\r\n            return amount;\r\n        }\r\n    }\r\n\r\n    function recoverToken(IBEP20 _token, uint256 _amount, address _to) external onlyOwner {\r\n        require(address(_token) != address(token));\r\n        _token.safeTransfer(_to, _amount);\r\n    }\r\n}"
			},
			"farming/library/WhitelistUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.12;\r\n\r\nimport \"../access/OwnableUpgradeable.sol\";\r\n\r\ncontract WhitelistUpgradeable is OwnableUpgradeable {\r\n    mapping (address => bool) private _whitelist;\r\n    bool private _disable;                      // default - false means whitelist feature is working on. if true no more use of whitelist\r\n\r\n    event Whitelisted(address indexed _address, bool whitelist);\r\n    event EnableWhitelist();\r\n    event DisableWhitelist();\r\n\r\n    modifier onlyWhitelisted {\r\n        require(_disable || _whitelist[msg.sender], \"Whitelist: caller is not on the whitelist\");\r\n        _;\r\n    }\r\n\r\n    function __WhitelistUpgradeable_init() internal initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    function isWhitelist(address _address) public view returns(bool) {\r\n        return _whitelist[_address];\r\n    }\r\n\r\n    function setWhitelist(address _address, bool _on) external onlyOwner {\r\n        _whitelist[_address] = _on;\r\n\r\n        emit Whitelisted(_address, _on);\r\n    }\r\n\r\n    function disableWhitelist(bool disable) external onlyOwner {\r\n        _disable = disable;\r\n        if (disable) {\r\n            emit DisableWhitelist();\r\n        } else {\r\n            emit EnableWhitelist();\r\n        }\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}"
			},
			"farming/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.12;\r\n\r\nimport \"../utils/ContextUpgradeable.sol\";\r\nimport \"../proxy/Initializable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}"
			},
			"farming/utils/SafeBEP20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport '../interfaces/IBEP20.sol';\r\nimport '../library/SafeMath.sol';\r\nimport './Address.sol';\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            'SafeBEP20: approve from non-zero to non-zero allowance'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            'SafeBEP20: decreased allowance below zero'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\r\n        }\r\n    }\r\n}"
			},
			"farming/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), 'Address: call to non-contract');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
			},
			"farming/library/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}"
			},
			"farming/interfaces/IBEP20.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
			},
			"farming/proxy/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\nimport \"../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}"
			},
			"farming/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nimport \"../proxy/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}"
			},
			"farming/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.12;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"farming/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x35db8908994222c1532d8f6f5728a4c554d5a18a86b88c20326b15c71f15b344\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce847036ca35fdaa38ac8db4b977e5d6055a7a0e4a89c1303eafa0917c4cdcd8\",\"dweb:/ipfs/QmbgbGxJQPS9EVCJBimSAqrx7HRnVyHJDNbBUDtDLc794E\"]},\"farming/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"farming/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]},\"farming/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xebcd7eb909fdb72755f408a0490c3ecc4c3511967eaeda9126a48c8d22882a28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99224e5315f91eeac958d966274d2f6cd516ffe7f01717e9bff21c83163142b9\",\"dweb:/ipfs/Qmc8bDabLMznf4YnbCvGxgf7hrQ1aEeNMAf7e78P6AC5gX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 718,
								"contract": "farming/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 721,
								"contract": "farming/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1269,
								"contract": "farming/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "farming/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 129,
								"contract": "farming/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/eZKaliburProxy.sol": {
				"eZKaliburProxy": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "DisableWhitelist",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EnableWhitelist",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "whitelist",
									"type": "bool"
								}
							],
							"name": "Whitelisted",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "disable",
									"type": "bool"
								}
							],
							"name": "disableWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IBEP20",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isWhitelist",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IBEP20",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "recoverToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "safeMeerkatTransfer",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_on",
									"type": "bool"
								}
							],
							"name": "setWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"farming/eZKaliburProxy.sol\":186:1032  contract eZKaliburProxy is OwnableUpgradeable, WhitelistUpgradeable {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"farming/eZKaliburProxy.sol\":186:1032  contract eZKaliburProxy is OwnableUpgradeable, WhitelistUpgradeable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_12\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xc4d66de8\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xc683630d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd04323c5\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_12:\n      dup1\n      0x3158079c\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x49ba1b49\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x53d6fd59\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"farming/eZKaliburProxy.sol\":449:830  function safeMeerkatTransfer(address to, uint256 amount) external onlyWhitelisted returns (uint256) {\r... */\n    tag_3:\n      tag_13\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_15\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"farming/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n    tag_4:\n      tag_16\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      iszero\n      iszero\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_18\n      jump\t// in\n    tag_16:\n      stop\n        /* \"farming/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n    tag_5:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      iszero\n      iszero\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_21\n      jump\t// in\n    tag_19:\n      stop\n        /* \"farming/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_6:\n      tag_22\n      tag_23\n      jump\t// in\n    tag_22:\n      stop\n        /* \"farming/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n    tag_7:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"farming/eZKaliburProxy.sol\":325:441  function initialize(IBEP20 _token) external initializer {\r... */\n    tag_8:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_28\n      jump\t// in\n    tag_26:\n      stop\n        /* \"farming/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n    tag_9:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_30\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_30:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_31\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"farming/eZKaliburProxy.sol\":838:1029  function recoverToken(IBEP20 _token, uint256 _amount, address _to) external onlyOwner {\r... */\n    tag_10:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x60\n      dup2\n      lt\n      iszero\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_34\n      jump\t// in\n    tag_32:\n      stop\n        /* \"farming/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_11:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_37\n      jump\t// in\n    tag_35:\n      stop\n        /* \"farming/eZKaliburProxy.sol\":449:830  function safeMeerkatTransfer(address to, uint256 amount) external onlyWhitelisted returns (uint256) {\r... */\n    tag_15:\n        /* \"farming/eZKaliburProxy.sol\":540:547  uint256 */\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":533:541  _disable */\n      0x66\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/library/WhitelistUpgradeable.sol\":533:567  _disable || _whitelist[msg.sender] */\n      dup1\n      tag_39\n      jumpi\n      pop\n        /* \"farming/library/WhitelistUpgradeable.sol\":545:555  _whitelist */\n      0x65\n        /* \"farming/library/WhitelistUpgradeable.sol\":545:567  _whitelist[msg.sender] */\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":556:566  msg.sender */\n      caller\n        /* \"farming/library/WhitelistUpgradeable.sol\":545:567  _whitelist[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/library/WhitelistUpgradeable.sol\":533:567  _disable || _whitelist[msg.sender] */\n    tag_39:\n        /* \"farming/library/WhitelistUpgradeable.sol\":525:613  require(_disable || _whitelist[msg.sender], \"Whitelist: caller is not on the whitelist\") */\n      tag_40\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x29\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_8193a60c6207ee93eb48bebd42af33b356dd6e6ca52ad6aab6a8892e28cd7323\n      0x29\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_40:\n        /* \"farming/eZKaliburProxy.sol\":560:578  uint256 meerkatBal */\n      0x00\n        /* \"farming/eZKaliburProxy.sol\":581:586  token */\n      0x98\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/eZKaliburProxy.sol\":581:596  token.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"farming/eZKaliburProxy.sol\":605:609  this */\n      address\n        /* \"farming/eZKaliburProxy.sol\":581:611  token.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_44\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_44:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"farming/eZKaliburProxy.sol\":560:611  uint256 meerkatBal = token.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"farming/eZKaliburProxy.sol\":635:645  meerkatBal */\n      dup1\n        /* \"farming/eZKaliburProxy.sol\":626:632  amount */\n      dup4\n        /* \"farming/eZKaliburProxy.sol\":626:645  amount > meerkatBal */\n      gt\n        /* \"farming/eZKaliburProxy.sol\":622:823  if (amount > meerkatBal) {\r... */\n      iszero\n      tag_46\n      jumpi\n        /* \"farming/eZKaliburProxy.sol\":662:667  token */\n      0x98\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/eZKaliburProxy.sol\":662:676  token.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"farming/eZKaliburProxy.sol\":677:679  to */\n      dup6\n        /* \"farming/eZKaliburProxy.sol\":681:691  meerkatBal */\n      dup4\n        /* \"farming/eZKaliburProxy.sol\":662:692  token.transfer(to, meerkatBal) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_49\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_49:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      pop\n        /* \"farming/eZKaliburProxy.sol\":714:724  meerkatBal */\n      dup1\n        /* \"farming/eZKaliburProxy.sol\":707:724  return meerkatBal */\n      swap2\n      pop\n      pop\n      jump(tag_41)\n        /* \"farming/eZKaliburProxy.sol\":622:823  if (amount > meerkatBal) {\r... */\n    tag_46:\n        /* \"farming/eZKaliburProxy.sol\":757:762  token */\n      0x98\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/eZKaliburProxy.sol\":757:771  token.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"farming/eZKaliburProxy.sol\":772:774  to */\n      dup6\n        /* \"farming/eZKaliburProxy.sol\":776:782  amount */\n      dup6\n        /* \"farming/eZKaliburProxy.sol\":757:783  token.transfer(to, amount) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_52\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_52:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_54\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_54:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      pop\n        /* \"farming/eZKaliburProxy.sol\":805:811  amount */\n      dup3\n        /* \"farming/eZKaliburProxy.sol\":798:811  return amount */\n      swap2\n      pop\n      pop\n        /* \"farming/library/WhitelistUpgradeable.sol\":624:625  _ */\n    tag_41:\n        /* \"farming/eZKaliburProxy.sol\":449:830  function safeMeerkatTransfer(address to, uint256 amount) external onlyWhitelisted returns (uint256) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"farming/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n    tag_18:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_57\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_58\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_57:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_59\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_25\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_59:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_60\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_60:\n        /* \"farming/library/WhitelistUpgradeable.sol\":1110:1117  disable */\n      dup1\n        /* \"farming/library/WhitelistUpgradeable.sol\":1099:1107  _disable */\n      0x66\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":1099:1117  _disable = disable */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/library/WhitelistUpgradeable.sol\":1132:1139  disable */\n      dup1\n        /* \"farming/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n      iszero\n      tag_62\n      jumpi\n        /* \"farming/library/WhitelistUpgradeable.sol\":1161:1179  DisableWhitelist() */\n      0x508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc53\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"farming/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n      jump(tag_63)\n    tag_62:\n        /* \"farming/library/WhitelistUpgradeable.sol\":1217:1234  EnableWhitelist() */\n      0xa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"farming/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n    tag_63:\n        /* \"farming/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"farming/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n    tag_21:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_65\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_58\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_65:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_66\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_25\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_66:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_67\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_67:\n        /* \"farming/library/WhitelistUpgradeable.sol\":966:969  _on */\n      dup1\n        /* \"farming/library/WhitelistUpgradeable.sol\":943:953  _whitelist */\n      0x65\n        /* \"farming/library/WhitelistUpgradeable.sol\":943:963  _whitelist[_address] */\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":954:962  _address */\n      dup5\n        /* \"farming/library/WhitelistUpgradeable.sol\":943:963  _whitelist[_address] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":943:969  _whitelist[_address] = _on */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/library/WhitelistUpgradeable.sol\":999:1007  _address */\n      dup2\n        /* \"farming/library/WhitelistUpgradeable.sol\":987:1013  Whitelisted(_address, _on) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f26440\n        /* \"farming/library/WhitelistUpgradeable.sol\":1009:1012  _on */\n      dup3\n        /* \"farming/library/WhitelistUpgradeable.sol\":987:1013  Whitelisted(_address, _on) */\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"farming/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"farming/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_23:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_70\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_58\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_70:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_71\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_25\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_71:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_72\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_72:\n        /* \"farming/access/OwnableUpgradeable.sol\":2127:2128  0 */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2090:2130  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2111:2117  _owner */\n      0x33\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2090:2130  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"farming/access/OwnableUpgradeable.sol\":2158:2159  0 */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2141:2147  _owner */\n      0x33\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2141:2160  _owner = address(0) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n      jump\t// out\n        /* \"farming/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n    tag_25:\n        /* \"farming/access/OwnableUpgradeable.sol\":1415:1422  address */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":1442:1448  _owner */\n      0x33\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1435:1448  return _owner */\n      swap1\n      pop\n        /* \"farming/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"farming/eZKaliburProxy.sol\":325:441  function initialize(IBEP20 _token) external initializer {\r... */\n    tag_28:\n        /* \"farming/proxy/Initializable.sol\":1547:1560  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1547:1580  _initializing || _isConstructor() */\n      dup1\n      tag_76\n      jumpi\n      pop\n        /* \"farming/proxy/Initializable.sol\":1564:1580  _isConstructor() */\n      tag_77\n        /* \"farming/proxy/Initializable.sol\":1564:1578  _isConstructor */\n      tag_78\n        /* \"farming/proxy/Initializable.sol\":1564:1580  _isConstructor() */\n      jump\t// in\n    tag_77:\n        /* \"farming/proxy/Initializable.sol\":1547:1580  _initializing || _isConstructor() */\n    tag_76:\n        /* \"farming/proxy/Initializable.sol\":1547:1597  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_79\n      jumpi\n      pop\n        /* \"farming/proxy/Initializable.sol\":1585:1597  _initialized */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1584:1597  !_initialized */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":1547:1597  _initializing || _isConstructor() || !_initialized */\n    tag_79:\n        /* \"farming/proxy/Initializable.sol\":1539:1648  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_80\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759\n      0x2e\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_80:\n        /* \"farming/proxy/Initializable.sol\":1661:1680  bool isTopLevelCall */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":1684:1697  _initializing */\n      dup1\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1683:1697  !_initializing */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":1661:1697  bool isTopLevelCall = !_initializing */\n      swap1\n      pop\n        /* \"farming/proxy/Initializable.sol\":1712:1726  isTopLevelCall */\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1708:1809  if (isTopLevelCall) {\r... */\n      iszero\n      tag_81\n      jumpi\n        /* \"farming/proxy/Initializable.sol\":1759:1763  true */\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1743:1756  _initializing */\n      0x00\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1743:1763  _initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1793:1797  true */\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1778:1790  _initialized */\n      0x00\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1778:1797  _initialized = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1708:1809  if (isTopLevelCall) {\r... */\n    tag_81:\n        /* \"farming/eZKaliburProxy.sol\":392:408  __Ownable_init() */\n      tag_83\n        /* \"farming/eZKaliburProxy.sol\":392:406  __Ownable_init */\n      tag_84\n        /* \"farming/eZKaliburProxy.sol\":392:408  __Ownable_init() */\n      jump\t// in\n    tag_83:\n        /* \"farming/eZKaliburProxy.sol\":427:433  _token */\n      dup2\n        /* \"farming/eZKaliburProxy.sol\":419:424  token */\n      0x98\n      0x00\n        /* \"farming/eZKaliburProxy.sol\":419:433  token = _token */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1839:1853  isTopLevelCall */\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1835:1903  if (isTopLevelCall) {\r... */\n      iszero\n      tag_85\n      jumpi\n        /* \"farming/proxy/Initializable.sol\":1886:1891  false */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":1870:1883  _initializing */\n      dup1\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1870:1891  _initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1835:1903  if (isTopLevelCall) {\r... */\n    tag_85:\n        /* \"farming/eZKaliburProxy.sol\":325:441  function initialize(IBEP20 _token) external initializer {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"farming/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n    tag_31:\n        /* \"farming/library/WhitelistUpgradeable.sol\":803:807  bool */\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":827:837  _whitelist */\n      0x65\n        /* \"farming/library/WhitelistUpgradeable.sol\":827:847  _whitelist[_address] */\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":838:846  _address */\n      dup4\n        /* \"farming/library/WhitelistUpgradeable.sol\":827:847  _whitelist[_address] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/library/WhitelistUpgradeable.sol\":820:847  return _whitelist[_address] */\n      swap1\n      pop\n        /* \"farming/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"farming/eZKaliburProxy.sol\":838:1029  function recoverToken(IBEP20 _token, uint256 _amount, address _to) external onlyOwner {\r... */\n    tag_34:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_88\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_58\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_88:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_89\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_25\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_89:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_90\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_90:\n        /* \"farming/eZKaliburProxy.sol\":970:975  token */\n      0x98\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/eZKaliburProxy.sol\":943:976  address(_token) != address(token) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/eZKaliburProxy.sol\":951:957  _token */\n      dup4\n        /* \"farming/eZKaliburProxy.sol\":943:976  address(_token) != address(token) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"farming/eZKaliburProxy.sol\":935:977  require(address(_token) != address(token)) */\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n        /* \"farming/eZKaliburProxy.sol\":988:1021  _token.safeTransfer(_to, _amount) */\n      tag_93\n        /* \"farming/eZKaliburProxy.sol\":1008:1011  _to */\n      dup2\n        /* \"farming/eZKaliburProxy.sol\":1013:1020  _amount */\n      dup4\n        /* \"farming/eZKaliburProxy.sol\":988:994  _token */\n      dup6\n        /* \"farming/eZKaliburProxy.sol\":988:1007  _token.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_94\n      swap1\n        /* \"farming/eZKaliburProxy.sol\":988:1021  _token.safeTransfer(_to, _amount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_93:\n        /* \"farming/eZKaliburProxy.sol\":838:1029  function recoverToken(IBEP20 _token, uint256 _amount, address _to) external onlyOwner {\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"farming/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_37:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_96\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_58\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_96:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_97\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_25\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_97:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_98\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_98:\n        /* \"farming/access/OwnableUpgradeable.sol\":2432:2433  0 */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2412:2434  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2412:2420  newOwner */\n      dup2\n        /* \"farming/access/OwnableUpgradeable.sol\":2412:2434  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"farming/access/OwnableUpgradeable.sol\":2404:2477  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_100\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_100:\n        /* \"farming/access/OwnableUpgradeable.sol\":2522:2530  newOwner */\n      dup1\n        /* \"farming/access/OwnableUpgradeable.sol\":2493:2531  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2514:2520  _owner */\n      0x33\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2493:2531  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"farming/access/OwnableUpgradeable.sol\":2551:2559  newOwner */\n      dup1\n        /* \"farming/access/OwnableUpgradeable.sol\":2542:2548  _owner */\n      0x33\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2542:2559  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"farming/utils/ContextUpgradeable.sol\":850:956  function _msgSender() internal view virtual returns (address payable) {\r... */\n    tag_58:\n        /* \"farming/utils/ContextUpgradeable.sol\":903:918  address payable */\n      0x00\n        /* \"farming/utils/ContextUpgradeable.sol\":938:948  msg.sender */\n      caller\n        /* \"farming/utils/ContextUpgradeable.sol\":931:948  return msg.sender */\n      swap1\n      pop\n        /* \"farming/utils/ContextUpgradeable.sol\":850:956  function _msgSender() internal view virtual returns (address payable) {\r... */\n      swap1\n      jump\t// out\n        /* \"farming/proxy/Initializable.sol\":2003:2128  function _isConstructor() private view returns (bool) {\r... */\n    tag_78:\n        /* \"farming/proxy/Initializable.sol\":2051:2055  bool */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":2076:2120  AddressUpgradeable.isContract(address(this)) */\n      tag_103\n        /* \"farming/proxy/Initializable.sol\":2114:2118  this */\n      address\n        /* \"farming/proxy/Initializable.sol\":2076:2105  AddressUpgradeable.isContract */\n      tag_104\n        /* \"farming/proxy/Initializable.sol\":2076:2120  AddressUpgradeable.isContract(address(this)) */\n      jump\t// in\n    tag_103:\n        /* \"farming/proxy/Initializable.sol\":2075:2120  !AddressUpgradeable.isContract(address(this)) */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":2068:2120  return !AddressUpgradeable.isContract(address(this)) */\n      swap1\n      pop\n        /* \"farming/proxy/Initializable.sol\":2003:2128  function _isConstructor() private view returns (bool) {\r... */\n      swap1\n      jump\t// out\n        /* \"farming/access/OwnableUpgradeable.sol\":955:1084  function __Ownable_init() internal initializer {\r... */\n    tag_84:\n        /* \"farming/proxy/Initializable.sol\":1547:1560  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1547:1580  _initializing || _isConstructor() */\n      dup1\n      tag_106\n      jumpi\n      pop\n        /* \"farming/proxy/Initializable.sol\":1564:1580  _isConstructor() */\n      tag_107\n        /* \"farming/proxy/Initializable.sol\":1564:1578  _isConstructor */\n      tag_78\n        /* \"farming/proxy/Initializable.sol\":1564:1580  _isConstructor() */\n      jump\t// in\n    tag_107:\n        /* \"farming/proxy/Initializable.sol\":1547:1580  _initializing || _isConstructor() */\n    tag_106:\n        /* \"farming/proxy/Initializable.sol\":1547:1597  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_108\n      jumpi\n      pop\n        /* \"farming/proxy/Initializable.sol\":1585:1597  _initialized */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1584:1597  !_initialized */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":1547:1597  _initializing || _isConstructor() || !_initialized */\n    tag_108:\n        /* \"farming/proxy/Initializable.sol\":1539:1648  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759\n      0x2e\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"farming/proxy/Initializable.sol\":1661:1680  bool isTopLevelCall */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":1684:1697  _initializing */\n      dup1\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1683:1697  !_initializing */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":1661:1697  bool isTopLevelCall = !_initializing */\n      swap1\n      pop\n        /* \"farming/proxy/Initializable.sol\":1712:1726  isTopLevelCall */\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1708:1809  if (isTopLevelCall) {\r... */\n      iszero\n      tag_110\n      jumpi\n        /* \"farming/proxy/Initializable.sol\":1759:1763  true */\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1743:1756  _initializing */\n      0x00\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1743:1763  _initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1793:1797  true */\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1778:1790  _initialized */\n      0x00\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1778:1797  _initialized = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1708:1809  if (isTopLevelCall) {\r... */\n    tag_110:\n        /* \"farming/access/OwnableUpgradeable.sol\":1013:1039  __Context_init_unchained() */\n      tag_112\n        /* \"farming/access/OwnableUpgradeable.sol\":1013:1037  __Context_init_unchained */\n      tag_113\n        /* \"farming/access/OwnableUpgradeable.sol\":1013:1039  __Context_init_unchained() */\n      jump\t// in\n    tag_112:\n        /* \"farming/access/OwnableUpgradeable.sol\":1050:1076  __Ownable_init_unchained() */\n      tag_114\n        /* \"farming/access/OwnableUpgradeable.sol\":1050:1074  __Ownable_init_unchained */\n      tag_115\n        /* \"farming/access/OwnableUpgradeable.sol\":1050:1076  __Ownable_init_unchained() */\n      jump\t// in\n    tag_114:\n        /* \"farming/proxy/Initializable.sol\":1839:1853  isTopLevelCall */\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1835:1903  if (isTopLevelCall) {\r... */\n      iszero\n      tag_116\n      jumpi\n        /* \"farming/proxy/Initializable.sol\":1886:1891  false */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":1870:1883  _initializing */\n      dup1\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1870:1891  _initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1835:1903  if (isTopLevelCall) {\r... */\n    tag_116:\n        /* \"farming/access/OwnableUpgradeable.sol\":955:1084  function __Ownable_init() internal initializer {\r... */\n      pop\n      jump\t// out\n        /* \"farming/utils/SafeBEP20.sol\":719:930  function safeTransfer(\r... */\n    tag_94:\n        /* \"farming/utils/SafeBEP20.sol\":836:922  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_118\n        /* \"farming/utils/SafeBEP20.sol\":856:861  token */\n      dup4\n        /* \"farming/utils/SafeBEP20.sol\":886:909  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"farming/utils/SafeBEP20.sol\":911:913  to */\n      dup5\n        /* \"farming/utils/SafeBEP20.sol\":915:920  value */\n      dup5\n        /* \"farming/utils/SafeBEP20.sol\":863:921  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"farming/utils/SafeBEP20.sol\":836:855  _callOptionalReturn */\n      tag_119\n        /* \"farming/utils/SafeBEP20.sol\":836:922  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_118:\n        /* \"farming/utils/SafeBEP20.sol\":719:930  function safeTransfer(\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"farming/utils/AddressUpgradeable.sol\":756:1178  function isContract(address account) internal view returns (bool) {\r... */\n    tag_104:\n        /* \"farming/utils/AddressUpgradeable.sol\":816:820  bool */\n      0x00\n        /* \"farming/utils/AddressUpgradeable.sol\":1024:1036  uint256 size */\n      dup1\n        /* \"farming/utils/AddressUpgradeable.sol\":1135:1142  account */\n      dup3\n        /* \"farming/utils/AddressUpgradeable.sol\":1123:1143  extcodesize(account) */\n      extcodesize\n        /* \"farming/utils/AddressUpgradeable.sol\":1115:1143  size := extcodesize(account) */\n      swap1\n      pop\n        /* \"farming/utils/AddressUpgradeable.sol\":1169:1170  0 */\n      0x00\n        /* \"farming/utils/AddressUpgradeable.sol\":1162:1166  size */\n      dup2\n        /* \"farming/utils/AddressUpgradeable.sol\":1162:1170  size > 0 */\n      gt\n        /* \"farming/utils/AddressUpgradeable.sol\":1155:1170  return size > 0 */\n      swap2\n      pop\n      pop\n        /* \"farming/utils/AddressUpgradeable.sol\":756:1178  function isContract(address account) internal view returns (bool) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"farming/utils/ContextUpgradeable.sol\":779:844  function __Context_init_unchained() internal initializer {\r... */\n    tag_113:\n        /* \"farming/proxy/Initializable.sol\":1547:1560  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1547:1580  _initializing || _isConstructor() */\n      dup1\n      tag_122\n      jumpi\n      pop\n        /* \"farming/proxy/Initializable.sol\":1564:1580  _isConstructor() */\n      tag_123\n        /* \"farming/proxy/Initializable.sol\":1564:1578  _isConstructor */\n      tag_78\n        /* \"farming/proxy/Initializable.sol\":1564:1580  _isConstructor() */\n      jump\t// in\n    tag_123:\n        /* \"farming/proxy/Initializable.sol\":1547:1580  _initializing || _isConstructor() */\n    tag_122:\n        /* \"farming/proxy/Initializable.sol\":1547:1597  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_124\n      jumpi\n      pop\n        /* \"farming/proxy/Initializable.sol\":1585:1597  _initialized */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1584:1597  !_initialized */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":1547:1597  _initializing || _isConstructor() || !_initialized */\n    tag_124:\n        /* \"farming/proxy/Initializable.sol\":1539:1648  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759\n      0x2e\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_125:\n        /* \"farming/proxy/Initializable.sol\":1661:1680  bool isTopLevelCall */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":1684:1697  _initializing */\n      dup1\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1683:1697  !_initializing */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":1661:1697  bool isTopLevelCall = !_initializing */\n      swap1\n      pop\n        /* \"farming/proxy/Initializable.sol\":1712:1726  isTopLevelCall */\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1708:1809  if (isTopLevelCall) {\r... */\n      iszero\n      tag_126\n      jumpi\n        /* \"farming/proxy/Initializable.sol\":1759:1763  true */\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1743:1756  _initializing */\n      0x00\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1743:1763  _initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1793:1797  true */\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1778:1790  _initialized */\n      0x00\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1778:1797  _initialized = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1708:1809  if (isTopLevelCall) {\r... */\n    tag_126:\n        /* \"farming/proxy/Initializable.sol\":1839:1853  isTopLevelCall */\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1835:1903  if (isTopLevelCall) {\r... */\n      iszero\n      tag_128\n      jumpi\n        /* \"farming/proxy/Initializable.sol\":1886:1891  false */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":1870:1883  _initializing */\n      dup1\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1870:1891  _initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1835:1903  if (isTopLevelCall) {\r... */\n    tag_128:\n        /* \"farming/utils/ContextUpgradeable.sol\":779:844  function __Context_init_unchained() internal initializer {\r... */\n      pop\n      jump\t// out\n        /* \"farming/access/OwnableUpgradeable.sol\":1092:1288  function __Ownable_init_unchained() internal initializer {\r... */\n    tag_115:\n        /* \"farming/proxy/Initializable.sol\":1547:1560  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1547:1580  _initializing || _isConstructor() */\n      dup1\n      tag_130\n      jumpi\n      pop\n        /* \"farming/proxy/Initializable.sol\":1564:1580  _isConstructor() */\n      tag_131\n        /* \"farming/proxy/Initializable.sol\":1564:1578  _isConstructor */\n      tag_78\n        /* \"farming/proxy/Initializable.sol\":1564:1580  _isConstructor() */\n      jump\t// in\n    tag_131:\n        /* \"farming/proxy/Initializable.sol\":1547:1580  _initializing || _isConstructor() */\n    tag_130:\n        /* \"farming/proxy/Initializable.sol\":1547:1597  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_132\n      jumpi\n      pop\n        /* \"farming/proxy/Initializable.sol\":1585:1597  _initialized */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1584:1597  !_initialized */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":1547:1597  _initializing || _isConstructor() || !_initialized */\n    tag_132:\n        /* \"farming/proxy/Initializable.sol\":1539:1648  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_133\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759\n      0x2e\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_133:\n        /* \"farming/proxy/Initializable.sol\":1661:1680  bool isTopLevelCall */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":1684:1697  _initializing */\n      dup1\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/proxy/Initializable.sol\":1683:1697  !_initializing */\n      iszero\n        /* \"farming/proxy/Initializable.sol\":1661:1697  bool isTopLevelCall = !_initializing */\n      swap1\n      pop\n        /* \"farming/proxy/Initializable.sol\":1712:1726  isTopLevelCall */\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1708:1809  if (isTopLevelCall) {\r... */\n      iszero\n      tag_134\n      jumpi\n        /* \"farming/proxy/Initializable.sol\":1759:1763  true */\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1743:1756  _initializing */\n      0x00\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1743:1763  _initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1793:1797  true */\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1778:1790  _initialized */\n      0x00\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1778:1797  _initialized = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1708:1809  if (isTopLevelCall) {\r... */\n    tag_134:\n        /* \"farming/access/OwnableUpgradeable.sol\":1160:1177  address msgSender */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":1180:1192  _msgSender() */\n      tag_136\n        /* \"farming/access/OwnableUpgradeable.sol\":1180:1190  _msgSender */\n      tag_58\n        /* \"farming/access/OwnableUpgradeable.sol\":1180:1192  _msgSender() */\n      jump\t// in\n    tag_136:\n        /* \"farming/access/OwnableUpgradeable.sol\":1160:1192  address msgSender = _msgSender() */\n      swap1\n      pop\n        /* \"farming/access/OwnableUpgradeable.sol\":1212:1221  msgSender */\n      dup1\n        /* \"farming/access/OwnableUpgradeable.sol\":1203:1209  _owner */\n      0x33\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":1203:1221  _owner = msgSender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/access/OwnableUpgradeable.sol\":1270:1279  msgSender */\n      dup1\n        /* \"farming/access/OwnableUpgradeable.sol\":1237:1280  OwnershipTransferred(address(0), msgSender) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1266:1267  0 */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":1237:1280  OwnershipTransferred(address(0), msgSender) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"farming/proxy/Initializable.sol\":1821:1822  _ */\n      pop\n        /* \"farming/proxy/Initializable.sol\":1839:1853  isTopLevelCall */\n      dup1\n        /* \"farming/proxy/Initializable.sol\":1835:1903  if (isTopLevelCall) {\r... */\n      iszero\n      tag_137\n      jumpi\n        /* \"farming/proxy/Initializable.sol\":1886:1891  false */\n      0x00\n        /* \"farming/proxy/Initializable.sol\":1870:1883  _initializing */\n      dup1\n      0x01\n        /* \"farming/proxy/Initializable.sol\":1870:1891  _initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/proxy/Initializable.sol\":1835:1903  if (isTopLevelCall) {\r... */\n    tag_137:\n        /* \"farming/access/OwnableUpgradeable.sol\":1092:1288  function __Ownable_init_unchained() internal initializer {\r... */\n      pop\n      jump\t// out\n        /* \"farming/utils/SafeBEP20.sol\":3254:4028  function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r... */\n    tag_119:\n        /* \"farming/utils/SafeBEP20.sol\":3678:3701  bytes memory returndata */\n      0x60\n        /* \"farming/utils/SafeBEP20.sol\":3704:3773  address(token).functionCall(data, 'SafeBEP20: low-level call failed') */\n      tag_139\n        /* \"farming/utils/SafeBEP20.sol\":3732:3736  data */\n      dup3\n        /* \"farming/utils/SafeBEP20.sol\":3704:3773  address(token).functionCall(data, 'SafeBEP20: low-level call failed') */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"farming/utils/SafeBEP20.sol\":3712:3717  token */\n      dup6\n        /* \"farming/utils/SafeBEP20.sol\":3704:3731  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_140\n      swap1\n        /* \"farming/utils/SafeBEP20.sol\":3704:3773  address(token).functionCall(data, 'SafeBEP20: low-level call failed') */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_139:\n        /* \"farming/utils/SafeBEP20.sol\":3678:3773  bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed') */\n      swap1\n      pop\n        /* \"farming/utils/SafeBEP20.sol\":3808:3809  0 */\n      0x00\n        /* \"farming/utils/SafeBEP20.sol\":3788:3798  returndata */\n      dup2\n        /* \"farming/utils/SafeBEP20.sol\":3788:3805  returndata.length */\n      mload\n        /* \"farming/utils/SafeBEP20.sol\":3788:3809  returndata.length > 0 */\n      gt\n        /* \"farming/utils/SafeBEP20.sol\":3784:4021  if (returndata.length > 0) {\r... */\n      iszero\n      tag_141\n      jumpi\n        /* \"farming/utils/SafeBEP20.sol\":3943:3953  returndata */\n      dup1\n        /* \"farming/utils/SafeBEP20.sol\":3932:3962  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_142\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_142:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"farming/utils/SafeBEP20.sol\":3924:4009  require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed') */\n      tag_143\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_21c3364d55537bf20eb8f05374e9f53f47299e1883c412f1f1135f398f2c2082\n      0x2a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_143:\n        /* \"farming/utils/SafeBEP20.sol\":3784:4021  if (returndata.length > 0) {\r... */\n    tag_141:\n        /* \"farming/utils/SafeBEP20.sol\":3254:4028  function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"farming/utils/Address.sol\":3880:4110  function functionCall(\r... */\n    tag_140:\n        /* \"farming/utils/Address.sol\":4017:4029  bytes memory */\n      0x60\n        /* \"farming/utils/Address.sol\":4049:4102  _functionCallWithValue(target, data, 0, errorMessage) */\n      tag_145\n        /* \"farming/utils/Address.sol\":4072:4078  target */\n      dup5\n        /* \"farming/utils/Address.sol\":4080:4084  data */\n      dup5\n        /* \"farming/utils/Address.sol\":4086:4087  0 */\n      0x00\n        /* \"farming/utils/Address.sol\":4089:4101  errorMessage */\n      dup6\n        /* \"farming/utils/Address.sol\":4049:4071  _functionCallWithValue */\n      tag_146\n        /* \"farming/utils/Address.sol\":4049:4102  _functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_145:\n        /* \"farming/utils/Address.sol\":4042:4102  return _functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"farming/utils/Address.sol\":3880:4110  function functionCall(\r... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"farming/utils/Address.sol\":5368:6388  function _functionCallWithValue(\r... */\n    tag_146:\n        /* \"farming/utils/Address.sol\":5541:5553  bytes memory */\n      0x60\n        /* \"farming/utils/Address.sol\":5574:5592  isContract(target) */\n      tag_148\n        /* \"farming/utils/Address.sol\":5585:5591  target */\n      dup6\n        /* \"farming/utils/Address.sol\":5574:5584  isContract */\n      tag_149\n        /* \"farming/utils/Address.sol\":5574:5592  isContract(target) */\n      jump\t// in\n    tag_148:\n        /* \"farming/utils/Address.sol\":5566:5626  require(isContract(target), 'Address: call to non-contract') */\n      tag_150\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1d\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_150:\n        /* \"farming/utils/Address.sol\":5700:5712  bool success */\n      0x00\n        /* \"farming/utils/Address.sol\":5714:5737  bytes memory returndata */\n      0x60\n        /* \"farming/utils/Address.sol\":5741:5747  target */\n      dup7\n        /* \"farming/utils/Address.sol\":5741:5752  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/utils/Address.sol\":5760:5768  weiValue */\n      dup6\n        /* \"farming/utils/Address.sol\":5770:5774  data */\n      dup8\n        /* \"farming/utils/Address.sol\":5741:5775  target.call{value: weiValue}(data) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_151:\n      0x20\n      dup4\n      lt\n      tag_153\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      0x20\n      dup4\n      sub\n      swap3\n      pop\n      jump(tag_151)\n    tag_153:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_156\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_155)\n    tag_156:\n      0x60\n      swap2\n      pop\n    tag_155:\n      pop\n        /* \"farming/utils/Address.sol\":5699:5775  (bool success, bytes memory returndata) = target.call{value: weiValue}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"farming/utils/Address.sol\":5790:5797  success */\n      dup2\n        /* \"farming/utils/Address.sol\":5786:6381  if (success) {\r... */\n      iszero\n      tag_157\n      jumpi\n        /* \"farming/utils/Address.sol\":5821:5831  returndata */\n      dup1\n        /* \"farming/utils/Address.sol\":5814:5831  return returndata */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_147)\n        /* \"farming/utils/Address.sol\":5786:6381  if (success) {\r... */\n    tag_157:\n        /* \"farming/utils/Address.sol\":5955:5956  0 */\n      0x00\n        /* \"farming/utils/Address.sol\":5935:5945  returndata */\n      dup2\n        /* \"farming/utils/Address.sol\":5935:5952  returndata.length */\n      mload\n        /* \"farming/utils/Address.sol\":5935:5956  returndata.length > 0 */\n      gt\n        /* \"farming/utils/Address.sol\":5931:6370  if (returndata.length > 0) {\r... */\n      iszero\n      tag_159\n      jumpi\n        /* \"farming/utils/Address.sol\":6198:6208  returndata */\n      dup1\n        /* \"farming/utils/Address.sol\":6192:6209  mload(returndata) */\n      mload\n        /* \"farming/utils/Address.sol\":6259:6274  returndata_size */\n      dup1\n        /* \"farming/utils/Address.sol\":6246:6256  returndata */\n      dup3\n        /* \"farming/utils/Address.sol\":6242:6244  32 */\n      0x20\n        /* \"farming/utils/Address.sol\":6238:6257  add(32, returndata) */\n      add\n        /* \"farming/utils/Address.sol\":6231:6275  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"farming/utils/Address.sol\":6146:6294  {\r... */\n    tag_159:\n        /* \"farming/utils/Address.sol\":6341:6353  errorMessage */\n      dup4\n        /* \"farming/utils/Address.sol\":6334:6354  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_161:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_163\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_161)\n    tag_163:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_164\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_164:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"farming/utils/Address.sol\":5368:6388  function _functionCallWithValue(\r... */\n    tag_147:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"farming/utils/Address.sol\":743:1384  function isContract(address account) internal view returns (bool) {\r... */\n    tag_149:\n        /* \"farming/utils/Address.sol\":803:807  bool */\n      0x00\n        /* \"farming/utils/Address.sol\":1065:1081  bytes32 codehash */\n      dup1\n        /* \"farming/utils/Address.sol\":1092:1111  bytes32 accountHash */\n      0x00\n        /* \"farming/utils/Address.sol\":1114:1180  0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 */\n      0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n        /* \"farming/utils/Address.sol\":1092:1180  bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 */\n      0x00\n      shl\n      swap1\n      pop\n        /* \"farming/utils/Address.sol\":1296:1303  account */\n      dup4\n        /* \"farming/utils/Address.sol\":1284:1304  extcodehash(account) */\n      extcodehash\n        /* \"farming/utils/Address.sol\":1272:1304  codehash := extcodehash(account) */\n      swap2\n      pop\n        /* \"farming/utils/Address.sol\":1345:1356  accountHash */\n      dup1\n        /* \"farming/utils/Address.sol\":1333:1341  codehash */\n      dup3\n        /* \"farming/utils/Address.sol\":1333:1356  codehash != accountHash */\n      eq\n      iszero\n        /* \"farming/utils/Address.sol\":1333:1375  codehash != accountHash && codehash != 0x0 */\n      dup1\n      iszero\n      tag_166\n      jumpi\n      pop\n        /* \"farming/utils/Address.sol\":1372:1375  0x0 */\n      0x00\n        /* \"farming/utils/Address.sol\":1360:1375  codehash != 0x0 */\n      dup1\n      shl\n        /* \"farming/utils/Address.sol\":1360:1368  codehash */\n      dup3\n        /* \"farming/utils/Address.sol\":1360:1375  codehash != 0x0 */\n      eq\n      iszero\n        /* \"farming/utils/Address.sol\":1333:1375  codehash != accountHash && codehash != 0x0 */\n    tag_166:\n        /* \"farming/utils/Address.sol\":1325:1376  return (codehash != accountHash && codehash != 0x0) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"farming/utils/Address.sol\":743:1384  function isContract(address account) internal view returns (bool) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n    stop\n    data_21c3364d55537bf20eb8f05374e9f53f47299e1883c412f1f1135f398f2c2082 5361666542455032303a204245503230206f7065726174696f6e20646964206e6f742073756363656564\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759 496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564\n    data_8193a60c6207ee93eb48bebd42af33b356dd6e6ca52ad6aab6a8892e28cd7323 57686974656c6973743a2063616c6c6572206973206e6f74206f6e207468652077686974656c697374\n\n    auxdata: 0xa26469706673582212202a4c6e00a369c3b5bea584f4238bbd2fcd29946e2dac9f1da54dc8908e1d348a64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506117ec806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610184578063c4d66de8146101b8578063c683630d146101fc578063d04323c514610256578063f2fde38b146102c457610093565b80633158079c1461009857806349ba1b49146100fa57806353d6fd591461012a578063715018a61461017a575b600080fd5b6100e4600480360360408110156100ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610308565b6040518082815260200191505060405180910390f35b6101286004803603602081101561011057600080fd5b81019080803515159060200190929190505050610645565b005b6101786004803603604081101561014057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610775565b005b6101826108cf565b005b61018c610a3f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101fa600480360360208110156101ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a69565b005b61023e6004803603602081101561021257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb1565b60405180821515815260200191505060405180910390f35b6102c26004803603606081101561026c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c07565b005b610306600480360360208110156102da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d41565b005b6000606660009054906101000a900460ff168061036e5750606560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6103c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061178e6029913960400191505060405180910390fd5b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561044e57600080fd5b505afa158015610462573d6000803e3d6000fd5b505050506040513d602081101561047857600080fd5b810190808051906020019092919050505090508083111561056b57609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b505050506040513d602081101561055057600080fd5b8101908080519060200190929190505050508091505061063f565b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156105fe57600080fd5b505af1158015610612573d6000803e3d6000fd5b505050506040513d602081101561062857600080fd5b810190808051906020019092919050505050829150505b92915050565b61064d610f36565b73ffffffffffffffffffffffffffffffffffffffff1661066b610a3f565b73ffffffffffffffffffffffffffffffffffffffff16146106f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606660006101000a81548160ff0219169083151502179055508015610745577f508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc5360405160405180910390a1610772565b7fa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae060405160405180910390a15b50565b61077d610f36565b73ffffffffffffffffffffffffffffffffffffffff1661079b610a3f565b73ffffffffffffffffffffffffffffffffffffffff1614610824576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264408260405180821515815260200191505060405180910390a25050565b6108d7610f36565b73ffffffffffffffffffffffffffffffffffffffff166108f5610a3f565b73ffffffffffffffffffffffffffffffffffffffff161461097e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff1680610a885750610a87610f3e565b5b80610a9e575060008054906101000a900460ff16155b610af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611760602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610b43576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b4b610f4f565b81609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610bad5760008060016101000a81548160ff0219169083151502179055505b5050565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610c0f610f36565b73ffffffffffffffffffffffffffffffffffffffff16610c2d610a3f565b73ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d1157600080fd5b610d3c81838573ffffffffffffffffffffffffffffffffffffffff1661105d9092919063ffffffff16565b505050565b610d49610f36565b73ffffffffffffffffffffffffffffffffffffffff16610d67610a3f565b73ffffffffffffffffffffffffffffffffffffffff1614610df0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061173a6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000610f49306110ff565b15905090565b600060019054906101000a900460ff1680610f6e5750610f6d610f3e565b5b80610f84575060008054906101000a900460ff16155b610fd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611760602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611029576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611031611112565b611039611210565b801561105a5760008060016101000a81548160ff0219169083151502179055505b50565b6110fa8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506113b7565b505050565b600080823b905060008111915050919050565b600060019054906101000a900460ff16806111315750611130610f3e565b5b80611147575060008054906101000a900460ff16155b61119c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611760602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156111ec576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561120d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061122f575061122e610f3e565b5b80611245575060008054906101000a900460ff16155b61129a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611760602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156112ea576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006112f4610f36565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156113b45760008060016101000a81548160ff0219169083151502179055505b50565b6060611419826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114a69092919063ffffffff16565b90506000815111156114a15780806020019051602081101561143a57600080fd5b81019080805190602001909291905050506114a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611710602a913960400191505060405180910390fd5b5b505050565b60606114b584846000856114be565b90509392505050565b60606114c9856116c4565b61153b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061158b5780518252602082019150602081019050602083039250611568565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146115ed576040519150601f19603f3d011682016040523d82523d6000602084013e6115f2565b606091505b509150915081156116075780925050506116bc565b60008151111561161a5780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611681578082015181840152602081019050611666565b50505050905090810190601f1680156116ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b949350505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561170657506000801b8214155b9250505091905056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656457686974656c6973743a2063616c6c6572206973206e6f74206f6e207468652077686974656c697374a26469706673582212202a4c6e00a369c3b5bea584f4238bbd2fcd29946e2dac9f1da54dc8908e1d348a64736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17EC DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xC683630D EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xD04323C5 EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C4 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x3158079C EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x49BA1B49 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x53D6FD59 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x17A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x645 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x775 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x182 PUSH2 0x8CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18C PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA69 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC07 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x306 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD41 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x36E JUMPI POP PUSH1 0x65 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND JUMPDEST PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x178E PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x98 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x462 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x56B JUMPI PUSH1 0x98 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x53A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP DUP1 SWAP2 POP POP PUSH2 0x63F JUMP JUMPDEST PUSH1 0x98 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x612 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP DUP3 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x64D PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x66B PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x745 JUMPI PUSH32 0x508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x772 JUMP JUMPDEST PUSH32 0xA2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x77D PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x79B PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x824 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x65 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x8D7 PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8F5 PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x97E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xA88 JUMPI POP PUSH2 0xA87 PUSH2 0xF3E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xA9E JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xAF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1760 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0xB43 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xB4B PUSH2 0xF4F JUMP JUMPDEST DUP2 PUSH1 0x98 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xBAD JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC0F PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC2D PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCB6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x98 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3C DUP2 DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x105D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xD49 PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD67 PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDF0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xE76 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x173A PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF49 ADDRESS PUSH2 0x10FF JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xF6E JUMPI POP PUSH2 0xF6D PUSH2 0xF3E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xF84 JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xFD9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1760 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x1029 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1031 PUSH2 0x1112 JUMP JUMPDEST PUSH2 0x1039 PUSH2 0x1210 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x105A JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x10FA DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x13B7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1131 JUMPI POP PUSH2 0x1130 PUSH2 0xF3E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1147 JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x119C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1760 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x11EC JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP1 ISZERO PUSH2 0x120D JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x122F JUMPI POP PUSH2 0x122E PUSH2 0xF3E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1245 JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x129A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1760 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x12EA JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH2 0x12F4 PUSH2 0xF36 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP DUP1 ISZERO PUSH2 0x13B4 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1419 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666542455032303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14A6 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x14A1 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x143A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x14A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1710 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x14B5 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x14BE JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x14C9 DUP6 PUSH2 0x16C4 JUMP JUMPDEST PUSH2 0x153B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x158B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x1568 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15ED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x1607 JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x16BC JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x161A JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1681 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1666 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x16AE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 PUSH1 0x0 SHL SWAP1 POP DUP4 EXTCODEHASH SWAP2 POP DUP1 DUP3 EQ ISZERO DUP1 ISZERO PUSH2 0x1706 JUMPI POP PUSH1 0x0 DUP1 SHL DUP3 EQ ISZERO JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP INVALID MSTORE8 PUSH2 0x6665 TIMESTAMP GASLIMIT POP ORIGIN ADDRESS GASPRICE KECCAK256 TIMESTAMP GASLIMIT POP ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565644F776E61626C653A206E6577206F PUSH24 0x6E657220697320746865207A65726F206164647265737349 PUSH15 0x697469616C697A61626C653A20636F PUSH15 0x747261637420697320616C72656164 PUSH26 0x20696E697469616C697A656457686974656C6973743A2063616C PUSH13 0x6572206973206E6F74206F6E20 PUSH21 0x68652077686974656C697374A26469706673582212 KECCAK256 0x2A 0x4C PUSH15 0xA369C3B5BEA584F4238BBD2FCD29 SWAP5 PUSH15 0x2DAC9F1DA54DC8908E1D348A64736F PUSH13 0x634300060C0033000000000000 ",
							"sourceMap": "186:846:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610184578063c4d66de8146101b8578063c683630d146101fc578063d04323c514610256578063f2fde38b146102c457610093565b80633158079c1461009857806349ba1b49146100fa57806353d6fd591461012a578063715018a61461017a575b600080fd5b6100e4600480360360408110156100ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610308565b6040518082815260200191505060405180910390f35b6101286004803603602081101561011057600080fd5b81019080803515159060200190929190505050610645565b005b6101786004803603604081101561014057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610775565b005b6101826108cf565b005b61018c610a3f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101fa600480360360208110156101ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a69565b005b61023e6004803603602081101561021257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb1565b60405180821515815260200191505060405180910390f35b6102c26004803603606081101561026c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c07565b005b610306600480360360208110156102da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d41565b005b6000606660009054906101000a900460ff168061036e5750606560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6103c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061178e6029913960400191505060405180910390fd5b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561044e57600080fd5b505afa158015610462573d6000803e3d6000fd5b505050506040513d602081101561047857600080fd5b810190808051906020019092919050505090508083111561056b57609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b505050506040513d602081101561055057600080fd5b8101908080519060200190929190505050508091505061063f565b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156105fe57600080fd5b505af1158015610612573d6000803e3d6000fd5b505050506040513d602081101561062857600080fd5b810190808051906020019092919050505050829150505b92915050565b61064d610f36565b73ffffffffffffffffffffffffffffffffffffffff1661066b610a3f565b73ffffffffffffffffffffffffffffffffffffffff16146106f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606660006101000a81548160ff0219169083151502179055508015610745577f508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc5360405160405180910390a1610772565b7fa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae060405160405180910390a15b50565b61077d610f36565b73ffffffffffffffffffffffffffffffffffffffff1661079b610a3f565b73ffffffffffffffffffffffffffffffffffffffff1614610824576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264408260405180821515815260200191505060405180910390a25050565b6108d7610f36565b73ffffffffffffffffffffffffffffffffffffffff166108f5610a3f565b73ffffffffffffffffffffffffffffffffffffffff161461097e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff1680610a885750610a87610f3e565b5b80610a9e575060008054906101000a900460ff16155b610af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611760602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610b43576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b4b610f4f565b81609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610bad5760008060016101000a81548160ff0219169083151502179055505b5050565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610c0f610f36565b73ffffffffffffffffffffffffffffffffffffffff16610c2d610a3f565b73ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d1157600080fd5b610d3c81838573ffffffffffffffffffffffffffffffffffffffff1661105d9092919063ffffffff16565b505050565b610d49610f36565b73ffffffffffffffffffffffffffffffffffffffff16610d67610a3f565b73ffffffffffffffffffffffffffffffffffffffff1614610df0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061173a6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000610f49306110ff565b15905090565b600060019054906101000a900460ff1680610f6e5750610f6d610f3e565b5b80610f84575060008054906101000a900460ff16155b610fd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611760602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611029576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611031611112565b611039611210565b801561105a5760008060016101000a81548160ff0219169083151502179055505b50565b6110fa8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506113b7565b505050565b600080823b905060008111915050919050565b600060019054906101000a900460ff16806111315750611130610f3e565b5b80611147575060008054906101000a900460ff16155b61119c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611760602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156111ec576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561120d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061122f575061122e610f3e565b5b80611245575060008054906101000a900460ff16155b61129a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611760602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156112ea576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006112f4610f36565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156113b45760008060016101000a81548160ff0219169083151502179055505b50565b6060611419826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114a69092919063ffffffff16565b90506000815111156114a15780806020019051602081101561143a57600080fd5b81019080805190602001909291905050506114a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611710602a913960400191505060405180910390fd5b5b505050565b60606114b584846000856114be565b90509392505050565b60606114c9856116c4565b61153b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061158b5780518252602082019150602081019050602083039250611568565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146115ed576040519150601f19603f3d011682016040523d82523d6000602084013e6115f2565b606091505b509150915081156116075780925050506116bc565b60008151111561161a5780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611681578082015181840152602081019050611666565b50505050905090810190601f1680156116ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b949350505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561170657506000801b8214155b9250505091905056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656457686974656c6973743a2063616c6c6572206973206e6f74206f6e207468652077686974656c697374a26469706673582212202a4c6e00a369c3b5bea584f4238bbd2fcd29946e2dac9f1da54dc8908e1d348a64736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xC683630D EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xD04323C5 EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C4 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x3158079C EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x49BA1B49 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x53D6FD59 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x17A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x645 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x775 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x182 PUSH2 0x8CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18C PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA69 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC07 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x306 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD41 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x36E JUMPI POP PUSH1 0x65 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND JUMPDEST PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x178E PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x98 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x462 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x56B JUMPI PUSH1 0x98 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x53A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP DUP1 SWAP2 POP POP PUSH2 0x63F JUMP JUMPDEST PUSH1 0x98 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x612 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP DUP3 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x64D PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x66B PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x745 JUMPI PUSH32 0x508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x772 JUMP JUMPDEST PUSH32 0xA2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x77D PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x79B PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x824 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x65 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x8D7 PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8F5 PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x97E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xA88 JUMPI POP PUSH2 0xA87 PUSH2 0xF3E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xA9E JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xAF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1760 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0xB43 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xB4B PUSH2 0xF4F JUMP JUMPDEST DUP2 PUSH1 0x98 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xBAD JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC0F PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC2D PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCB6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x98 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3C DUP2 DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x105D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xD49 PUSH2 0xF36 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD67 PUSH2 0xA3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDF0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xE76 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x173A PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF49 ADDRESS PUSH2 0x10FF JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xF6E JUMPI POP PUSH2 0xF6D PUSH2 0xF3E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xF84 JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xFD9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1760 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x1029 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1031 PUSH2 0x1112 JUMP JUMPDEST PUSH2 0x1039 PUSH2 0x1210 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x105A JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x10FA DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x13B7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1131 JUMPI POP PUSH2 0x1130 PUSH2 0xF3E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1147 JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x119C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1760 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x11EC JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP1 ISZERO PUSH2 0x120D JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x122F JUMPI POP PUSH2 0x122E PUSH2 0xF3E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1245 JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x129A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1760 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x12EA JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH2 0x12F4 PUSH2 0xF36 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP DUP1 ISZERO PUSH2 0x13B4 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1419 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666542455032303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14A6 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x14A1 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x143A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x14A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1710 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x14B5 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x14BE JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x14C9 DUP6 PUSH2 0x16C4 JUMP JUMPDEST PUSH2 0x153B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x158B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x1568 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15ED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x1607 JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x16BC JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x161A JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1681 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1666 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x16AE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 PUSH1 0x0 SHL SWAP1 POP DUP4 EXTCODEHASH SWAP2 POP DUP1 DUP3 EQ ISZERO DUP1 ISZERO PUSH2 0x1706 JUMPI POP PUSH1 0x0 DUP1 SHL DUP3 EQ ISZERO JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP INVALID MSTORE8 PUSH2 0x6665 TIMESTAMP GASLIMIT POP ORIGIN ADDRESS GASPRICE KECCAK256 TIMESTAMP GASLIMIT POP ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565644F776E61626C653A206E6577206F PUSH24 0x6E657220697320746865207A65726F206164647265737349 PUSH15 0x697469616C697A61626C653A20636F PUSH15 0x747261637420697320616C72656164 PUSH26 0x20696E697469616C697A656457686974656C6973743A2063616C PUSH13 0x6572206973206E6F74206F6E20 PUSH21 0x68652077686974656C697374A26469706673582212 KECCAK256 0x2A 0x4C PUSH15 0xA369C3B5BEA584F4238BBD2FCD29 SWAP5 PUSH15 0x2DAC9F1DA54DC8908E1D348A64736F PUSH13 0x634300060C0033000000000000 ",
							"sourceMap": "186:846:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;449:381;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1029:224:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;863:158;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2020:148:0;;;:::i;:::-;;1369:87;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;325:116:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;744:111:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;838:191:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2323:244:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;449:381:1;540:7;533:8:4;;;;;;;;;;;:34;;;;545:10;:22;556:10;545:22;;;;;;;;;;;;;;;;;;;;;;;;;533:34;525:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;560:18:1::1;581:5;;;;;;;;;;;:15;;;605:4;581:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;560:51;;635:10;626:6;:19;622:201;;;662:5;;;;;;;;;;;:14;;;677:2;681:10;662:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;714:10;707:17;;;;;622:201;757:5;;;;;;;;;;;:14;;;772:2;776:6;757:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;805:6;798:13;;;624:1:4;449:381:1::0;;;;:::o;1029:224:4:-;1600:12:0;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1110:7:4::1;1099:8;;:18;;;;;;;;;;;;;;;;;;1132:7;1128:118;;;1161:18;;;;;;;;;;1128:118;;;1217:17;;;;;;;;;;1128:118;1029:224:::0;:::o;863:158::-;1600:12:0;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;966:3:4::1;943:10;:20;954:8;943:20;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;999:8;987:26;;;1009:3;987:26;;;;;;;;;;;;;;;;;;;;863:158:::0;;:::o;2020:148:0:-;1600:12;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2127:1:::1;2090:40;;2111:6;;;;;;;;;;;2090:40;;;;;;;;;;;;2158:1;2141:6;;:19;;;;;;;;;;;;;;;;;;2020:148::o:0;1369:87::-;1415:7;1442:6;;;;;;;;;;;1435:13;;1369:87;:::o;325:116:1:-;1547:13:5;;;;;;;;;;;:33;;;;1564:16;:14;:16::i;:::-;1547:33;:50;;;;1585:12;;;;;;;;;;1584:13;1547:50;1539:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1661:19;1684:13;;;;;;;;;;;1683:14;1661:36;;1712:14;1708:101;;;1759:4;1743:13;;:20;;;;;;;;;;;;;;;;;;1793:4;1778:12;;:19;;;;;;;;;;;;;;;;;;1708:101;392:16:1::1;:14;:16::i;:::-;427:6;419:5;;:14;;;;;;;;;;;;;;;;;;1839::5::0;1835:68;;;1886:5;1870:13;;:21;;;;;;;;;;;;;;;;;;1835:68;325:116:1;;:::o;744:111:4:-;803:4;827:10;:20;838:8;827:20;;;;;;;;;;;;;;;;;;;;;;;;;820:27;;744:111;;;:::o;838:191:1:-;1600:12:0;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;970:5:1::1;;;;;;;;;;;943:33;;951:6;943:33;;;;935:42;;;::::0;::::1;;988:33;1008:3;1013:7;988:6;:19;;;;:33;;;;;:::i;:::-;838:191:::0;;;:::o;2323:244:0:-;1600:12;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2432:1:::1;2412:22;;:8;:22;;;;2404:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2522:8;2493:38;;2514:6;;;;;;;;;;;2493:38;;;;;;;;;;;;2551:8;2542:6;;:17;;;;;;;;;;;;;;;;;;2323:244:::0;:::o;850:106:8:-;903:15;938:10;931:17;;850:106;:::o;2003:125:5:-;2051:4;2076:44;2114:4;2076:29;:44::i;:::-;2075:45;2068:52;;2003:125;:::o;955:129:0:-;1547:13:5;;;;;;;;;;;:33;;;;1564:16;:14;:16::i;:::-;1547:33;:50;;;;1585:12;;;;;;;;;;1584:13;1547:50;1539:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1661:19;1684:13;;;;;;;;;;;1683:14;1661:36;;1712:14;1708:101;;;1759:4;1743:13;;:20;;;;;;;;;;;;;;;;;;1793:4;1778:12;;:19;;;;;;;;;;;;;;;;;;1708:101;1013:26:0::1;:24;:26::i;:::-;1050;:24;:26::i;:::-;1839:14:5::0;1835:68;;;1886:5;1870:13;;:21;;;;;;;;;;;;;;;;;;1835:68;955:129:0;:::o;719:211:9:-;836:86;856:5;886:23;;;911:2;915:5;863:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;836:19;:86::i;:::-;719:211;;;:::o;756:422:7:-;816:4;1024:12;1135:7;1123:20;1115:28;;1169:1;1162:4;:8;1155:15;;;756:422;;;:::o;779:65:8:-;1547:13:5;;;;;;;;;;;:33;;;;1564:16;:14;:16::i;:::-;1547:33;:50;;;;1585:12;;;;;;;;;;1584:13;1547:50;1539:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1661:19;1684:13;;;;;;;;;;;1683:14;1661:36;;1712:14;1708:101;;;1759:4;1743:13;;:20;;;;;;;;;;;;;;;;;;1793:4;1778:12;;:19;;;;;;;;;;;;;;;;;;1708:101;1839:14;1835:68;;;1886:5;1870:13;;:21;;;;;;;;;;;;;;;;;;1835:68;779:65:8;:::o;1092:196:0:-;1547:13:5;;;;;;;;;;;:33;;;;1564:16;:14;:16::i;:::-;1547:33;:50;;;;1585:12;;;;;;;;;;1584:13;1547:50;1539:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1661:19;1684:13;;;;;;;;;;;1683:14;1661:36;;1712:14;1708:101;;;1759:4;1743:13;;:20;;;;;;;;;;;;;;;;;;1793:4;1778:12;;:19;;;;;;;;;;;;;;;;;;1708:101;1160:17:0::1;1180:12;:10;:12::i;:::-;1160:32;;1212:9;1203:6;;:18;;;;;;;;;;;;;;;;;;1270:9;1237:43;;1266:1;1237:43;;;;;;;;;;;;1821:1:5;1839:14:::0;1835:68;;;1886:5;1870:13;;:21;;;;;;;;;;;;;;;;;;1835:68;1092:196:0;:::o;3254:774:9:-;3678:23;3704:69;3732:4;3704:69;;;;;;;;;;;;;;;;;3712:5;3704:27;;;;:69;;;;;:::i;:::-;3678:95;;3808:1;3788:10;:17;:21;3784:237;;;3943:10;3932:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3924:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3784:237;3254:774;;;:::o;3880:230:6:-;4017:12;4049:53;4072:6;4080:4;4086:1;4089:12;4049:22;:53::i;:::-;4042:60;;3880:230;;;;;:::o;5368:1020::-;5541:12;5574:18;5585:6;5574:10;:18::i;:::-;5566:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5700:12;5714:23;5741:6;:11;;5760:8;5770:4;5741:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5699:76;;;;5790:7;5786:595;;;5821:10;5814:17;;;;;;5786:595;5955:1;5935:10;:17;:21;5931:439;;;6198:10;6192:17;6259:15;6246:10;6242:2;6238:19;6231:44;6146:148;6341:12;6334:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5368:1020;;;;;;;:::o;743:641::-;803:4;1065:16;1092:19;1114:66;1092:88;;;;1296:7;1284:20;1272:32;;1345:11;1333:8;:23;;:42;;;;;1372:3;1360:15;;:8;:15;;1333:42;1325:51;;;;743:641;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1224800",
								"executionCost": "1275",
								"totalCost": "1226075"
							},
							"external": {
								"disableWhitelist(bool)": "22872",
								"initialize(address)": "infinite",
								"isWhitelist(address)": "1282",
								"owner()": "1055",
								"recoverToken(address,uint256,address)": "infinite",
								"renounceOwnership()": "24399",
								"safeMeerkatTransfer(address,uint256)": "infinite",
								"setWhitelist(address,bool)": "23668",
								"transferOwnership(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 186,
									"end": 1032,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 186,
									"end": 1032,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202a4c6e00a369c3b5bea584f4238bbd2fcd29946e2dac9f1da54dc8908e1d348a64736f6c634300060c0033",
									".code": [
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "8DA5CB5B"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "8DA5CB5B"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "C4D66DE8"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "C683630D"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "D04323C5"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "F2FDE38B"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "3158079C"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "49BA1B49"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "53D6FD59"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "715018A6"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 186,
											"end": 1032,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 325,
											"end": 441,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "tag",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 449,
											"end": 830,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 449,
											"end": 830,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 540,
											"end": 547,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 533,
											"end": 541,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 533,
											"end": 541,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 533,
											"end": 541,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 533,
											"end": 541,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 533,
											"end": 541,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 533,
											"end": 541,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 533,
											"end": 541,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 533,
											"end": 541,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 533,
											"end": 541,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 533,
											"end": 541,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 533,
											"end": 541,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 533,
											"end": 567,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 533,
											"end": 567,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 533,
											"end": 567,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 533,
											"end": 567,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 545,
											"end": 555,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 556,
											"end": 566,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 545,
											"end": 567,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 545,
											"end": 567,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 533,
											"end": 567,
											"name": "tag",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 533,
											"end": 567,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH data",
											"source": 4,
											"value": "8193A60C6207EE93EB48BEBD42AF33B356DD6E6CA52AD6AAB6A8892E28CD7323"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "CODECOPY",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 525,
											"end": 613,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 525,
											"end": 613,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 560,
											"end": 578,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 581,
											"end": 586,
											"name": "PUSH",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 581,
											"end": 586,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 581,
											"end": 586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 586,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 586,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 581,
											"end": 586,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 586,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 581,
											"end": 586,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 581,
											"end": 586,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 581,
											"end": 596,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 581,
											"end": 596,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 581,
											"end": 596,
											"name": "PUSH",
											"source": 1,
											"value": "70A08231"
										},
										{
											"begin": 605,
											"end": 609,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "GAS",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "STATICCALL",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 581,
											"end": 611,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 581,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 560,
											"end": 611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 560,
											"end": 611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 635,
											"end": 645,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 626,
											"end": 632,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 626,
											"end": 645,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 622,
											"end": 823,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 622,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 622,
											"end": 823,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 662,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 662,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 662,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 662,
											"end": 667,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 662,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 662,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 662,
											"end": 676,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 662,
											"end": 676,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 662,
											"end": 676,
											"name": "PUSH",
											"source": 1,
											"value": "A9059CBB"
										},
										{
											"begin": 677,
											"end": 679,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 681,
											"end": 691,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "GAS",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 662,
											"end": 692,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 662,
											"end": 692,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 714,
											"end": 724,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 707,
											"end": 724,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 707,
											"end": 724,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 707,
											"end": 724,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 707,
											"end": 724,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 707,
											"end": 724,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 622,
											"end": 823,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 622,
											"end": 823,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 757,
											"end": 762,
											"name": "PUSH",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 757,
											"end": 762,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 762,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 762,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 762,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 762,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 757,
											"end": 762,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 762,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 762,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 757,
											"end": 762,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 757,
											"end": 762,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 757,
											"end": 771,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 757,
											"end": 771,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 757,
											"end": 771,
											"name": "PUSH",
											"source": 1,
											"value": "A9059CBB"
										},
										{
											"begin": 772,
											"end": 774,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 776,
											"end": 782,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "GAS",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 757,
											"end": 783,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 757,
											"end": 783,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 805,
											"end": 811,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 798,
											"end": 811,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 798,
											"end": 811,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 798,
											"end": 811,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 624,
											"end": 625,
											"name": "tag",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 624,
											"end": 625,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 449,
											"end": 830,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1110,
											"end": 1117,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1107,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 1099,
											"end": 1107,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1132,
											"end": 1139,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 4,
											"value": "508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "tag",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 4,
											"value": "A2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "tag",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 966,
											"end": 969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 943,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 954,
											"end": 962,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 943,
											"end": 969,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 943,
											"end": 969,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 943,
											"end": 969,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 999,
											"end": 1007,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "A54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440"
										},
										{
											"begin": 1009,
											"end": 1012,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "LOG2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2127,
											"end": 2128,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2159,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2141,
											"end": 2147,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2141,
											"end": 2147,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1415,
											"end": 1422,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1435,
											"end": 1448,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1435,
											"end": 1448,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "tag",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 325,
											"end": 441,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 1564,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "tag",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1584,
											"end": 1597,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "tag",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH data",
											"source": 5,
											"value": "7A2A4E26842155EA933FE6EB6E3137EB5A296DCDF55721C552BE7B4C3CC23759"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "CODECOPY",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "tag",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1680,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1683,
											"end": 1697,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1697,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1712,
											"end": 1726,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1759,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1743,
											"end": 1756,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1743,
											"end": 1756,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1793,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1778,
											"end": 1790,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1778,
											"end": 1790,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "tag",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 392,
											"end": 408,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 392,
											"end": 406,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 392,
											"end": 408,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 392,
											"end": 408,
											"name": "tag",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 392,
											"end": 408,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 427,
											"end": 433,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 419,
											"end": 424,
											"name": "PUSH",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 419,
											"end": 424,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 419,
											"end": 433,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 419,
											"end": 433,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 419,
											"end": 433,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 419,
											"end": 433,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 419,
											"end": 433,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1839,
											"end": 1853,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1886,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1870,
											"end": 1883,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1883,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "tag",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 325,
											"end": 441,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 325,
											"end": 441,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 803,
											"end": 807,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 837,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 838,
											"end": 846,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 820,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 820,
											"end": 847,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 943,
											"end": 976,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 943,
											"end": 976,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 951,
											"end": 957,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 943,
											"end": 976,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 943,
											"end": 976,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 943,
											"end": 976,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 943,
											"end": 976,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 935,
											"end": 977,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 935,
											"end": 977,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 935,
											"end": 977,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 935,
											"end": 977,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 935,
											"end": 977,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 935,
											"end": 977,
											"name": "tag",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 935,
											"end": 977,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 1008,
											"end": 1011,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1013,
											"end": 1020,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 988,
											"end": 994,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1007,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 988,
											"end": 1007,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1007,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 988,
											"end": 1007,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "tag",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 988,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 838,
											"end": 1029,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2432,
											"end": 2433,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2420,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH data",
											"source": 0,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2522,
											"end": 2530,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2551,
											"end": 2559,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2548,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2542,
											"end": 2548,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 850,
											"end": 956,
											"name": "tag",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 850,
											"end": 956,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 903,
											"end": 918,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 938,
											"end": 948,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 931,
											"end": 948,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 931,
											"end": 948,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 850,
											"end": 956,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 850,
											"end": 956,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2003,
											"end": 2128,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 2003,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2055,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2076,
											"end": 2120,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 2114,
											"end": 2118,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 2076,
											"end": 2105,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 2076,
											"end": 2120,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2076,
											"end": 2120,
											"name": "tag",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 2076,
											"end": 2120,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2075,
											"end": 2120,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2068,
											"end": 2120,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2068,
											"end": 2120,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2003,
											"end": 2128,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2003,
											"end": 2128,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 955,
											"end": 1084,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 955,
											"end": 1084,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 1564,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "tag",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "tag",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1584,
											"end": 1597,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "tag",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH data",
											"source": 5,
											"value": "7A2A4E26842155EA933FE6EB6E3137EB5A296DCDF55721C552BE7B4C3CC23759"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "CODECOPY",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "tag",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1680,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1683,
											"end": 1697,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1697,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1712,
											"end": 1726,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1759,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1743,
											"end": 1756,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1743,
											"end": 1756,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1793,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1778,
											"end": 1790,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1778,
											"end": 1790,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "tag",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1013,
											"end": 1039,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1013,
											"end": 1037,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1013,
											"end": 1039,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1013,
											"end": 1039,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1013,
											"end": 1039,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1050,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1050,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1050,
											"end": 1076,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1050,
											"end": 1076,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1050,
											"end": 1076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1839,
											"end": 1853,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1886,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1870,
											"end": 1883,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1883,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "tag",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 955,
											"end": 1084,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 955,
											"end": 1084,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 719,
											"end": 930,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 719,
											"end": 930,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 836,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 856,
											"end": 861,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 886,
											"end": 909,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 886,
											"end": 909,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 886,
											"end": 909,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 911,
											"end": 913,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 915,
											"end": 920,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 863,
											"end": 921,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 836,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 836,
											"end": 922,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 836,
											"end": 922,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 836,
											"end": 922,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 719,
											"end": 930,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 719,
											"end": 930,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 719,
											"end": 930,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 719,
											"end": 930,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 756,
											"end": 1178,
											"name": "tag",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 756,
											"end": 1178,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 816,
											"end": 820,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1024,
											"end": 1036,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1135,
											"end": 1142,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1123,
											"end": 1143,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1169,
											"end": 1170,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1162,
											"end": 1166,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1162,
											"end": 1170,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1155,
											"end": 1170,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1155,
											"end": 1170,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1155,
											"end": 1170,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 756,
											"end": 1178,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 756,
											"end": 1178,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 756,
											"end": 1178,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 756,
											"end": 1178,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 779,
											"end": 844,
											"name": "tag",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 779,
											"end": 844,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 1564,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "tag",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "tag",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1584,
											"end": 1597,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "tag",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH data",
											"source": 5,
											"value": "7A2A4E26842155EA933FE6EB6E3137EB5A296DCDF55721C552BE7B4C3CC23759"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "CODECOPY",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1680,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1683,
											"end": 1697,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1697,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1712,
											"end": 1726,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1759,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1743,
											"end": 1756,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1743,
											"end": 1756,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1793,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1778,
											"end": 1790,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1778,
											"end": 1790,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "tag",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1839,
											"end": 1853,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1886,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1870,
											"end": 1883,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1883,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "tag",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 779,
											"end": 844,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 779,
											"end": 844,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1092,
											"end": 1288,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1092,
											"end": 1288,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1547,
											"end": 1560,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 1564,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "tag",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 1564,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "tag",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 1547,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1585,
											"end": 1597,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1584,
											"end": 1597,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "tag",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 1547,
											"end": 1597,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH data",
											"source": 5,
											"value": "7A2A4E26842155EA933FE6EB6E3137EB5A296DCDF55721C552BE7B4C3CC23759"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "CODECOPY",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1539,
											"end": 1648,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1680,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1684,
											"end": 1697,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1683,
											"end": 1697,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1697,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1661,
											"end": 1697,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1712,
											"end": 1726,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1759,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1743,
											"end": 1756,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1743,
											"end": 1756,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1743,
											"end": 1763,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1793,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1778,
											"end": 1790,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1778,
											"end": 1790,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1778,
											"end": 1797,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "tag",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 1708,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1160,
											"end": 1177,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1180,
											"end": 1192,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1180,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1180,
											"end": 1192,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1180,
											"end": 1192,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1180,
											"end": 1192,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1160,
											"end": 1192,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1160,
											"end": 1192,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1212,
											"end": 1221,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1209,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1203,
											"end": 1209,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1270,
											"end": 1279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1267,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 1821,
											"end": 1822,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1839,
											"end": 1853,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "137"
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1886,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1870,
											"end": 1883,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1883,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1870,
											"end": 1891,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "tag",
											"source": 5,
											"value": "137"
										},
										{
											"begin": 1835,
											"end": 1903,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1092,
											"end": 1288,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1092,
											"end": 1288,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3254,
											"end": 4028,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 3254,
											"end": 4028,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3678,
											"end": 3701,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 3732,
											"end": 3736,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "5361666542455032303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3712,
											"end": 3717,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3731,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3704,
											"end": 3731,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3731,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 3704,
											"end": 3731,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 3704,
											"end": 3773,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3678,
											"end": 3773,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3678,
											"end": 3773,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3808,
											"end": 3809,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3788,
											"end": 3798,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3788,
											"end": 3805,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3788,
											"end": 3809,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3784,
											"end": 4021,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3784,
											"end": 4021,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 3784,
											"end": 4021,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3943,
											"end": 3953,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3962,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "2A"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH data",
											"source": 9,
											"value": "21C3364D55537BF20EB8F05374E9F53F47299E1883C412F1F1135F398F2C2082"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "2A"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "CODECOPY",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 3924,
											"end": 4009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3784,
											"end": 4021,
											"name": "tag",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 3784,
											"end": 4021,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 4028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 4028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 4028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 4028,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3880,
											"end": 4110,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 3880,
											"end": 4110,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4017,
											"end": 4029,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 4049,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 4072,
											"end": 4078,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4080,
											"end": 4084,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4086,
											"end": 4087,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4089,
											"end": 4101,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4049,
											"end": 4071,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 4049,
											"end": 4102,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4049,
											"end": 4102,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 4049,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4042,
											"end": 4102,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4042,
											"end": 4102,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3880,
											"end": 4110,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3880,
											"end": 4110,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3880,
											"end": 4110,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3880,
											"end": 4110,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3880,
											"end": 4110,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3880,
											"end": 4110,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5541,
											"end": 5553,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5574,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 5585,
											"end": 5591,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5574,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 5574,
											"end": 5592,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5574,
											"end": 5592,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 5574,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "1D"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 5566,
											"end": 5626,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5700,
											"end": 5712,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5714,
											"end": 5737,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5741,
											"end": 5747,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5752,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5741,
											"end": 5752,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5760,
											"end": 5768,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5770,
											"end": 5774,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "3F"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5699,
											"end": 5775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5699,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5699,
											"end": 5775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5699,
											"end": 5775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5790,
											"end": 5797,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5786,
											"end": 6381,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5786,
											"end": 6381,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 5786,
											"end": 6381,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5831,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5814,
											"end": 5831,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5814,
											"end": 5831,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5814,
											"end": 5831,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5814,
											"end": 5831,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5814,
											"end": 5831,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 5814,
											"end": 5831,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5786,
											"end": 6381,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 5786,
											"end": 6381,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5955,
											"end": 5956,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5935,
											"end": 5945,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5952,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5956,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 5931,
											"end": 6370,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5931,
											"end": 6370,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 5931,
											"end": 6370,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6198,
											"end": 6208,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6192,
											"end": 6209,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6259,
											"end": 6274,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6246,
											"end": 6256,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6242,
											"end": 6244,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6238,
											"end": 6257,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6231,
											"end": 6275,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 6146,
											"end": 6294,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 6146,
											"end": 6294,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6341,
											"end": 6353,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "tag",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "tag",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6334,
											"end": 6354,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "tag",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5368,
											"end": 6388,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 743,
											"end": 1384,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 743,
											"end": 1384,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 803,
											"end": 807,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1065,
											"end": 1081,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1092,
											"end": 1111,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1180,
											"name": "PUSH",
											"source": 6,
											"value": "C5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470"
										},
										{
											"begin": 1092,
											"end": 1180,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1092,
											"end": 1180,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1092,
											"end": 1180,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1092,
											"end": 1180,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1296,
											"end": 1303,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1284,
											"end": 1304,
											"name": "EXTCODEHASH",
											"source": 6
										},
										{
											"begin": 1272,
											"end": 1304,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1272,
											"end": 1304,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1345,
											"end": 1356,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1333,
											"end": 1341,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1333,
											"end": 1356,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1333,
											"end": 1356,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1333,
											"end": 1375,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1333,
											"end": 1375,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1333,
											"end": 1375,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1333,
											"end": 1375,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1333,
											"end": 1375,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1372,
											"end": 1375,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1360,
											"end": 1375,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1360,
											"end": 1375,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1360,
											"end": 1368,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1360,
											"end": 1375,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1360,
											"end": 1375,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1333,
											"end": 1375,
											"name": "tag",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1333,
											"end": 1375,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1325,
											"end": 1376,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1325,
											"end": 1376,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1325,
											"end": 1376,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1325,
											"end": 1376,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 743,
											"end": 1384,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 743,
											"end": 1384,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 743,
											"end": 1384,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 743,
											"end": 1384,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										}
									],
									".data": {
										"21C3364D55537BF20EB8F05374E9F53F47299E1883C412F1F1135F398F2C2082": "5361666542455032303a204245503230206f7065726174696f6e20646964206e6f742073756363656564",
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"7A2A4E26842155EA933FE6EB6E3137EB5A296DCDF55721C552BE7B4C3CC23759": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
										"8193A60C6207EE93EB48BEBD42AF33B356DD6E6CA52AD6AAB6A8892E28CD7323": "57686974656c6973743a2063616c6c6572206973206e6f74206f6e207468652077686974656c697374"
									}
								}
							}
						},
						"methodIdentifiers": {
							"disableWhitelist(bool)": "49ba1b49",
							"initialize(address)": "c4d66de8",
							"isWhitelist(address)": "c683630d",
							"owner()": "8da5cb5b",
							"recoverToken(address,uint256,address)": "d04323c5",
							"renounceOwnership()": "715018a6",
							"safeMeerkatTransfer(address,uint256)": "3158079c",
							"setWhitelist(address,bool)": "53d6fd59",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeMeerkatTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/eZKaliburProxy.sol\":\"eZKaliburProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x35db8908994222c1532d8f6f5728a4c554d5a18a86b88c20326b15c71f15b344\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce847036ca35fdaa38ac8db4b977e5d6055a7a0e4a89c1303eafa0917c4cdcd8\",\"dweb:/ipfs/QmbgbGxJQPS9EVCJBimSAqrx7HRnVyHJDNbBUDtDLc794E\"]},\"farming/eZKaliburProxy.sol\":{\"keccak256\":\"0x24f0f04a4f7c41bcb98f1e46d0ddddc889fbd45c73a0d65085af31e357f41ece\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7407ea61858119ef7cd57f2c58dbafd6bc2d3f367893b87c7a4f53acad94672\",\"dweb:/ipfs/QmT73MniLL8ePnNKeEWrFaQPTqUvEuWXttjqKZe5NtvQfe\"]},\"farming/interfaces/IBEP20.sol\":{\"keccak256\":\"0xe6555dcb6ec5cb9dcaf2322cf003a1e3d2257471768b32cdc433025a0bc3ac3d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a1f47d4071cfc9f31174526b1a63d0be2169a199f0a5b9819267d9d070adad6d\",\"dweb:/ipfs/QmcmHiuPjMSXZLNubeScGkXvWAz6dM1cciv5zGPNJaK9Po\"]},\"farming/library/SafeMath.sol\":{\"keccak256\":\"0x61f7309b48f11de8884e26542b911fdff2534e899f212e34eb4e399e57a9c867\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7eb4cf168b5b3422ee4aafc518537e6341b26ae38d8e3b8d8c96f17e71fe6301\",\"dweb:/ipfs/Qmes9Noj9pTL8zQ4hkZEFHYBdVgNjsn166fY4VqXQsMbDv\"]},\"farming/library/WhitelistUpgradeable.sol\":{\"keccak256\":\"0xe76cd48d6f9299378aab69c6550df2e83b014bfb26552e1480e7eec577da995e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79d6b23fc270819f333aa2135eb4399a88ebcd951cb744e0fb55226c31846f01\",\"dweb:/ipfs/Qma1GDgtiCLeegNQ2oYXfM9ErJpVw59CiA1J32nmHB4o9G\"]},\"farming/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"farming/utils/Address.sol\":{\"keccak256\":\"0xbe2939e35a126bed12382b07d3729489c3536aa84188af5682427877595b83ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b77767cd892d4718296d8e8a52b6bd0167643d9c1e8e62099d33a650cfd040d\",\"dweb:/ipfs/QmepRNrdk5r4FXffRf6nraTQPLqZidMYpZ6XTUBo8oVNrg\"]},\"farming/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]},\"farming/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xebcd7eb909fdb72755f408a0490c3ecc4c3511967eaeda9126a48c8d22882a28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99224e5315f91eeac958d966274d2f6cd516ffe7f01717e9bff21c83163142b9\",\"dweb:/ipfs/Qmc8bDabLMznf4YnbCvGxgf7hrQ1aEeNMAf7e78P6AC5gX\"]},\"farming/utils/SafeBEP20.sol\":{\"keccak256\":\"0x736b7df5455c6cffdc1d6dd17b9e3271441e326bff6052ae5afd32a0ba4848c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a8ca4ddea200dba45afec0a108c7bc4f9cd9c74901ffadcdae9d245b6169eac\",\"dweb:/ipfs/QmSxuBuoXE4zD3ESeWYZCd7Xrp3NhRyC95MBr4SqRD8UUE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 718,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 721,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1269,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 129,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 616,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "_whitelist",
								"offset": 0,
								"slot": "101",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 618,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "_disable",
								"offset": 0,
								"slot": "102",
								"type": "t_bool"
							},
							{
								"astId": 710,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "__gap",
								"offset": 0,
								"slot": "103",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 144,
								"contract": "farming/eZKaliburProxy.sol:eZKaliburProxy",
								"label": "token",
								"offset": 0,
								"slot": "152",
								"type": "t_contract(IBEP20)338"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IBEP20)338": {
								"encoding": "inplace",
								"label": "contract IBEP20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/interfaces/IBEP20.sol": {
				"IBEP20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getOwner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the token decimals."
							},
							"getOwner()": {
								"details": "Returns the bep token owner."
							},
							"name()": {
								"details": "Returns the token name."
							},
							"symbol()": {
								"details": "Returns the token symbol."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"getOwner()": "893d20e8",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the token decimals.\"},\"getOwner()\":{\"details\":\"Returns the bep token owner.\"},\"name()\":{\"details\":\"Returns the token name.\"},\"symbol()\":{\"details\":\"Returns the token symbol.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/interfaces/IBEP20.sol\":\"IBEP20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/interfaces/IBEP20.sol\":{\"keccak256\":\"0xe6555dcb6ec5cb9dcaf2322cf003a1e3d2257471768b32cdc433025a0bc3ac3d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a1f47d4071cfc9f31174526b1a63d0be2169a199f0a5b9819267d9d070adad6d\",\"dweb:/ipfs/QmcmHiuPjMSXZLNubeScGkXvWAz6dM1cciv5zGPNJaK9Po\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/library/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"farming/library/SafeMath.sol\":640:6004  library SafeMath {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"farming/library/SafeMath.sol\":640:6004  library SafeMath {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205cc93b015eb5f77815068c1073c8bc911d6d66b66f94eae5e806a52ce5e59c2264736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205cc93b015eb5f77815068c1073c8bc911d6d66b66f94eae5e806a52ce5e59c2264736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xC9 EXTCODESIZE ADD 0x5E 0xB5 0xF7 PUSH25 0x15068C1073C8BC911D6D66B66F94EAE5E806A52CE5E59C2264 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
							"sourceMap": "640:5364:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205cc93b015eb5f77815068c1073c8bc911d6d66b66f94eae5e806a52ce5e59c2264736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xC9 EXTCODESIZE ADD 0x5E 0xB5 0xF7 PUSH25 0x15068C1073C8BC911D6D66B66F94EAE5E806A52CE5E59C2264 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
							"sourceMap": "640:5364:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sqrt(uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 640,
									"end": 6004,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "INVALID",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 640,
									"end": 6004,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205cc93b015eb5f77815068c1073c8bc911d6d66b66f94eae5e806a52ce5e59c2264736f6c634300060c0033",
									".code": [
										{
											"begin": 640,
											"end": 6004,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 640,
											"end": 6004,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 640,
											"end": 6004,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 640,
											"end": 6004,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 640,
											"end": 6004,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 640,
											"end": 6004,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 640,
											"end": 6004,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 640,
											"end": 6004,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 640,
											"end": 6004,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/library/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/library/SafeMath.sol\":{\"keccak256\":\"0x61f7309b48f11de8884e26542b911fdff2534e899f212e34eb4e399e57a9c867\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7eb4cf168b5b3422ee4aafc518537e6341b26ae38d8e3b8d8c96f17e71fe6301\",\"dweb:/ipfs/Qmes9Noj9pTL8zQ4hkZEFHYBdVgNjsn166fY4VqXQsMbDv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/library/WhitelistUpgradeable.sol": {
				"WhitelistUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "DisableWhitelist",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EnableWhitelist",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "whitelist",
									"type": "bool"
								}
							],
							"name": "Whitelisted",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "disable",
									"type": "bool"
								}
							],
							"name": "disableWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isWhitelist",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_on",
									"type": "bool"
								}
							],
							"name": "setWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"farming/library/WhitelistUpgradeable.sol\":108:1290  contract WhitelistUpgradeable is OwnableUpgradeable {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"farming/library/WhitelistUpgradeable.sol\":108:1290  contract WhitelistUpgradeable is OwnableUpgradeable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x49ba1b49\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x53d6fd59\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xc683630d\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"farming/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n    tag_3:\n      tag_9\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      iszero\n      iszero\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_11\n      jump\t// in\n    tag_9:\n      stop\n        /* \"farming/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n    tag_4:\n      tag_12\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_13:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      iszero\n      iszero\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_14\n      jump\t// in\n    tag_12:\n      stop\n        /* \"farming/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_5:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      stop\n        /* \"farming/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n    tag_6:\n      tag_17\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"farming/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n    tag_7:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_21\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"farming/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_8:\n      tag_22\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_24\n      jump\t// in\n    tag_22:\n      stop\n        /* \"farming/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n    tag_11:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_26\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_27\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_26:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_28\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_18\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_28:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_29\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_29:\n        /* \"farming/library/WhitelistUpgradeable.sol\":1110:1117  disable */\n      dup1\n        /* \"farming/library/WhitelistUpgradeable.sol\":1099:1107  _disable */\n      0x66\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":1099:1117  _disable = disable */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/library/WhitelistUpgradeable.sol\":1132:1139  disable */\n      dup1\n        /* \"farming/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n      iszero\n      tag_31\n      jumpi\n        /* \"farming/library/WhitelistUpgradeable.sol\":1161:1179  DisableWhitelist() */\n      0x508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc53\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"farming/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n      jump(tag_32)\n    tag_31:\n        /* \"farming/library/WhitelistUpgradeable.sol\":1217:1234  EnableWhitelist() */\n      0xa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"farming/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n    tag_32:\n        /* \"farming/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"farming/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n    tag_14:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_34\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_27\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_34:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_35\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_18\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_35:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_36\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_36:\n        /* \"farming/library/WhitelistUpgradeable.sol\":966:969  _on */\n      dup1\n        /* \"farming/library/WhitelistUpgradeable.sol\":943:953  _whitelist */\n      0x65\n        /* \"farming/library/WhitelistUpgradeable.sol\":943:963  _whitelist[_address] */\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":954:962  _address */\n      dup5\n        /* \"farming/library/WhitelistUpgradeable.sol\":943:963  _whitelist[_address] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":943:969  _whitelist[_address] = _on */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/library/WhitelistUpgradeable.sol\":999:1007  _address */\n      dup2\n        /* \"farming/library/WhitelistUpgradeable.sol\":987:1013  Whitelisted(_address, _on) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f26440\n        /* \"farming/library/WhitelistUpgradeable.sol\":1009:1012  _on */\n      dup3\n        /* \"farming/library/WhitelistUpgradeable.sol\":987:1013  Whitelisted(_address, _on) */\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"farming/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"farming/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_16:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_39\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_27\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_39:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_40\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_18\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_40:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_41\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_41:\n        /* \"farming/access/OwnableUpgradeable.sol\":2127:2128  0 */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2090:2130  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2111:2117  _owner */\n      0x33\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2090:2130  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"farming/access/OwnableUpgradeable.sol\":2158:2159  0 */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2141:2147  _owner */\n      0x33\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2141:2160  _owner = address(0) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n      jump\t// out\n        /* \"farming/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n    tag_18:\n        /* \"farming/access/OwnableUpgradeable.sol\":1415:1422  address */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":1442:1448  _owner */\n      0x33\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1435:1448  return _owner */\n      swap1\n      pop\n        /* \"farming/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"farming/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n    tag_21:\n        /* \"farming/library/WhitelistUpgradeable.sol\":803:807  bool */\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":827:837  _whitelist */\n      0x65\n        /* \"farming/library/WhitelistUpgradeable.sol\":827:847  _whitelist[_address] */\n      0x00\n        /* \"farming/library/WhitelistUpgradeable.sol\":838:846  _address */\n      dup4\n        /* \"farming/library/WhitelistUpgradeable.sol\":827:847  _whitelist[_address] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"farming/library/WhitelistUpgradeable.sol\":820:847  return _whitelist[_address] */\n      swap1\n      pop\n        /* \"farming/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"farming/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_24:\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_46\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_27\n        /* \"farming/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_46:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_47\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_18\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_47:\n        /* \"farming/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"farming/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_48\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_48:\n        /* \"farming/access/OwnableUpgradeable.sol\":2432:2433  0 */\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2412:2434  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2412:2420  newOwner */\n      dup2\n        /* \"farming/access/OwnableUpgradeable.sol\":2412:2434  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"farming/access/OwnableUpgradeable.sol\":2404:2477  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_50\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_50:\n        /* \"farming/access/OwnableUpgradeable.sol\":2522:2530  newOwner */\n      dup1\n        /* \"farming/access/OwnableUpgradeable.sol\":2493:2531  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2514:2520  _owner */\n      0x33\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"farming/access/OwnableUpgradeable.sol\":2493:2531  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"farming/access/OwnableUpgradeable.sol\":2551:2559  newOwner */\n      dup1\n        /* \"farming/access/OwnableUpgradeable.sol\":2542:2548  _owner */\n      0x33\n      0x00\n        /* \"farming/access/OwnableUpgradeable.sol\":2542:2559  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"farming/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"farming/utils/ContextUpgradeable.sol\":850:956  function _msgSender() internal view virtual returns (address payable) {\r... */\n    tag_27:\n        /* \"farming/utils/ContextUpgradeable.sol\":903:918  address payable */\n      0x00\n        /* \"farming/utils/ContextUpgradeable.sol\":938:948  msg.sender */\n      caller\n        /* \"farming/utils/ContextUpgradeable.sol\":931:948  return msg.sender */\n      swap1\n      pop\n        /* \"farming/utils/ContextUpgradeable.sol\":850:956  function _msgSender() internal view virtual returns (address payable) {\r... */\n      swap1\n      jump\t// out\n    stop\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n\n    auxdata: 0xa2646970667358221220537e388dcdfa0e43e4d823b413abe004f857d75d0f7d694b68756130a283099064736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610896806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806349ba1b491461006757806353d6fd5914610097578063715018a6146100e75780638da5cb5b146100f1578063c683630d14610125578063f2fde38b1461017f575b600080fd5b6100956004803603602081101561007d57600080fd5b810190808035151590602001909291905050506101c3565b005b6100e5600480360360408110156100ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506102f3565b005b6100ef61044d565b005b6100f96105bd565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101676004803603602081101561013b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105e7565b60405180821515815260200191505060405180910390f35b6101c16004803603602081101561019557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061063d565b005b6101cb610832565b73ffffffffffffffffffffffffffffffffffffffff166101e96105bd565b73ffffffffffffffffffffffffffffffffffffffff1614610272576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606660006101000a81548160ff02191690831515021790555080156102c3577f508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc5360405160405180910390a16102f0565b7fa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae060405160405180910390a15b50565b6102fb610832565b73ffffffffffffffffffffffffffffffffffffffff166103196105bd565b73ffffffffffffffffffffffffffffffffffffffff16146103a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264408260405180821515815260200191505060405180910390a25050565b610455610832565b73ffffffffffffffffffffffffffffffffffffffff166104736105bd565b73ffffffffffffffffffffffffffffffffffffffff16146104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610645610832565b73ffffffffffffffffffffffffffffffffffffffff166106636105bd565b73ffffffffffffffffffffffffffffffffffffffff16146106ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061083b6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60003390509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220537e388dcdfa0e43e4d823b413abe004f857d75d0f7d694b68756130a283099064736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x896 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x49BA1B49 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x53D6FD59 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xC683630D EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x17F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2F3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEF PUSH2 0x44D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF9 PUSH2 0x5BD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x167 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x63D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CB PUSH2 0x832 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E9 PUSH2 0x5BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x272 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x2C3 JUMPI PUSH32 0x508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x2F0 JUMP JUMPDEST PUSH32 0xA2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x832 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x319 PUSH2 0x5BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x65 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x455 PUSH2 0x832 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x473 PUSH2 0x5BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x645 PUSH2 0x832 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x663 PUSH2 0x5BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x83B PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373A2646970667358221220537E388DCDFA 0xE NUMBER 0xE4 0xD8 0x23 0xB4 SGT 0xAB 0xE0 DIV 0xF8 JUMPI 0xD7 0x5D 0xF PUSH30 0x694B68756130A283099064736F6C634300060C0033000000000000000000 ",
							"sourceMap": "108:1182:4:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100625760003560e01c806349ba1b491461006757806353d6fd5914610097578063715018a6146100e75780638da5cb5b146100f1578063c683630d14610125578063f2fde38b1461017f575b600080fd5b6100956004803603602081101561007d57600080fd5b810190808035151590602001909291905050506101c3565b005b6100e5600480360360408110156100ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506102f3565b005b6100ef61044d565b005b6100f96105bd565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101676004803603602081101561013b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105e7565b60405180821515815260200191505060405180910390f35b6101c16004803603602081101561019557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061063d565b005b6101cb610832565b73ffffffffffffffffffffffffffffffffffffffff166101e96105bd565b73ffffffffffffffffffffffffffffffffffffffff1614610272576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606660006101000a81548160ff02191690831515021790555080156102c3577f508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc5360405160405180910390a16102f0565b7fa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae060405160405180910390a15b50565b6102fb610832565b73ffffffffffffffffffffffffffffffffffffffff166103196105bd565b73ffffffffffffffffffffffffffffffffffffffff16146103a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264408260405180821515815260200191505060405180910390a25050565b610455610832565b73ffffffffffffffffffffffffffffffffffffffff166104736105bd565b73ffffffffffffffffffffffffffffffffffffffff16146104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610645610832565b73ffffffffffffffffffffffffffffffffffffffff166106636105bd565b73ffffffffffffffffffffffffffffffffffffffff16146106ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061083b6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60003390509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220537e388dcdfa0e43e4d823b413abe004f857d75d0f7d694b68756130a283099064736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x49BA1B49 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x53D6FD59 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xC683630D EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x17F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2F3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEF PUSH2 0x44D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF9 PUSH2 0x5BD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x167 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x63D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CB PUSH2 0x832 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E9 PUSH2 0x5BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x272 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x2C3 JUMPI PUSH32 0x508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x2F0 JUMP JUMPDEST PUSH32 0xA2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x832 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x319 PUSH2 0x5BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x65 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x455 PUSH2 0x832 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x473 PUSH2 0x5BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x645 PUSH2 0x832 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x663 PUSH2 0x5BD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x83B PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373A2646970667358221220537E388DCDFA 0xE NUMBER 0xE4 0xD8 0x23 0xB4 SGT 0xAB 0xE0 DIV 0xF8 JUMPI 0xD7 0x5D 0xF PUSH30 0x694B68756130A283099064736F6C634300060C0033000000000000000000 ",
							"sourceMap": "108:1182:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1029:224;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;863:158;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2020:148:0;;;:::i;:::-;;1369:87;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;744:111:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2323:244:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1029:224:4;1600:12:0;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1110:7:4::1;1099:8;;:18;;;;;;;;;;;;;;;;;;1132:7;1128:118;;;1161:18;;;;;;;;;;1128:118;;;1217:17;;;;;;;;;;1128:118;1029:224:::0;:::o;863:158::-;1600:12:0;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;966:3:4::1;943:10;:20;954:8;943:20;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;999:8;987:26;;;1009:3;987:26;;;;;;;;;;;;;;;;;;;;863:158:::0;;:::o;2020:148:0:-;1600:12;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2127:1:::1;2090:40;;2111:6;;;;;;;;;;;2090:40;;;;;;;;;;;;2158:1;2141:6;;:19;;;;;;;;;;;;;;;;;;2020:148::o:0;1369:87::-;1415:7;1442:6;;;;;;;;;;;1435:13;;1369:87;:::o;744:111:4:-;803:4;827:10;:20;838:8;827:20;;;;;;;;;;;;;;;;;;;;;;;;;820:27;;744:111;;;:::o;2323:244:0:-;1600:12;:10;:12::i;:::-;1589:23;;:7;:5;:7::i;:::-;:23;;;1581:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2432:1:::1;2412:22;;:8;:22;;;;2404:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2522:8;2493:38;;2514:6;;;;;;;;;;;2493:38;;;;;;;;;;;;2551:8;2542:6;;:17;;;;;;;;;;;;;;;;;;2323:244:::0;:::o;850:106:8:-;903:15;938:10;931:17;;850:106;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "439600",
								"executionCost": "474",
								"totalCost": "440074"
							},
							"external": {
								"disableWhitelist(bool)": "22827",
								"isWhitelist(address)": "1304",
								"owner()": "1099",
								"renounceOwnership()": "24354",
								"setWhitelist(address,bool)": "23623",
								"transferOwnership(address)": "infinite"
							},
							"internal": {
								"__WhitelistUpgradeable_init()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220537e388dcdfa0e43e4d823b413abe004f857d75d0f7d694b68756130a283099064736f6c634300060c0033",
									".code": [
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "49BA1B49"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "53D6FD59"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "715018A6"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "8DA5CB5B"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "C683630D"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "F2FDE38B"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1110,
											"end": 1117,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1107,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 1099,
											"end": 1107,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1132,
											"end": 1139,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 4,
											"value": "508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "tag",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 4,
											"value": "A2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 966,
											"end": 969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 943,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 954,
											"end": 962,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 943,
											"end": 969,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 943,
											"end": 969,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 943,
											"end": 969,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 943,
											"end": 969,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 999,
											"end": 1007,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "A54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440"
										},
										{
											"begin": 1009,
											"end": 1012,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "LOG2",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2127,
											"end": 2128,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2159,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2141,
											"end": 2147,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2141,
											"end": 2147,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1415,
											"end": 1422,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1435,
											"end": 1448,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1435,
											"end": 1448,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 803,
											"end": 807,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 837,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 838,
											"end": 846,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 820,
											"end": 847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 820,
											"end": 847,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2432,
											"end": 2433,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2420,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH data",
											"source": 0,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2522,
											"end": 2530,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2551,
											"end": 2559,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2548,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2542,
											"end": 2548,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 850,
											"end": 956,
											"name": "tag",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 850,
											"end": 956,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 903,
											"end": 918,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 938,
											"end": 948,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 931,
											"end": 948,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 931,
											"end": 948,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 850,
											"end": 956,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 850,
											"end": 956,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373"
									}
								}
							}
						},
						"methodIdentifiers": {
							"disableWhitelist(bool)": "49ba1b49",
							"isWhitelist(address)": "c683630d",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"setWhitelist(address,bool)": "53d6fd59",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/library/WhitelistUpgradeable.sol\":\"WhitelistUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x35db8908994222c1532d8f6f5728a4c554d5a18a86b88c20326b15c71f15b344\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce847036ca35fdaa38ac8db4b977e5d6055a7a0e4a89c1303eafa0917c4cdcd8\",\"dweb:/ipfs/QmbgbGxJQPS9EVCJBimSAqrx7HRnVyHJDNbBUDtDLc794E\"]},\"farming/library/WhitelistUpgradeable.sol\":{\"keccak256\":\"0xe76cd48d6f9299378aab69c6550df2e83b014bfb26552e1480e7eec577da995e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79d6b23fc270819f333aa2135eb4399a88ebcd951cb744e0fb55226c31846f01\",\"dweb:/ipfs/Qma1GDgtiCLeegNQ2oYXfM9ErJpVw59CiA1J32nmHB4o9G\"]},\"farming/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"farming/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]},\"farming/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xebcd7eb909fdb72755f408a0490c3ecc4c3511967eaeda9126a48c8d22882a28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99224e5315f91eeac958d966274d2f6cd516ffe7f01717e9bff21c83163142b9\",\"dweb:/ipfs/Qmc8bDabLMznf4YnbCvGxgf7hrQ1aEeNMAf7e78P6AC5gX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 718,
								"contract": "farming/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 721,
								"contract": "farming/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1269,
								"contract": "farming/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "farming/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 129,
								"contract": "farming/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 616,
								"contract": "farming/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_whitelist",
								"offset": 0,
								"slot": "101",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 618,
								"contract": "farming/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_disable",
								"offset": 0,
								"slot": "102",
								"type": "t_bool"
							},
							{
								"astId": 710,
								"contract": "farming/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "103",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/proxy/Initializable.sol": {
				"Initializable": {
					"abi": [],
					"devdoc": {
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/proxy/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"farming/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 718,
								"contract": "farming/proxy/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 721,
								"contract": "farming/proxy/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"farming/utils/Address.sol\":133:6391  library Address {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"farming/utils/Address.sol\":133:6391  library Address {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122082fd5fbc067921a0c84d00738c57fb351bebe627faf47254c59ab4e8608a957f64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122082fd5fbc067921a0c84d00738c57fb351bebe627faf47254c59ab4e8608a957f64736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 REVERT 0x5F 0xBC MOD PUSH26 0x21A0C84D00738C57FB351BEBE627FAF47254C59AB4E8608A957F PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "133:6258:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122082fd5fbc067921a0c84d00738c57fb351bebe627faf47254c59ab4e8608a957f64736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 REVERT 0x5F 0xBC MOD PUSH26 0x21A0C84D00738C57FB351BEBE627FAF47254C59AB4E8608A957F PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "133:6258:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 133,
									"end": 6391,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "INVALID",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 133,
									"end": 6391,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122082fd5fbc067921a0c84d00738c57fb351bebe627faf47254c59ab4e8608a957f64736f6c634300060c0033",
									".code": [
										{
											"begin": 133,
											"end": 6391,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 133,
											"end": 6391,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 133,
											"end": 6391,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 133,
											"end": 6391,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 133,
											"end": 6391,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 133,
											"end": 6391,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 133,
											"end": 6391,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 133,
											"end": 6391,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 133,
											"end": 6391,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/utils/Address.sol\":{\"keccak256\":\"0xbe2939e35a126bed12382b07d3729489c3536aa84188af5682427877595b83ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b77767cd892d4718296d8e8a52b6bd0167643d9c1e8e62099d33a650cfd040d\",\"dweb:/ipfs/QmepRNrdk5r4FXffRf6nraTQPLqZidMYpZ6XTUBo8oVNrg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"farming/utils/AddressUpgradeable.sol\":135:7007  library AddressUpgradeable {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"farming/utils/AddressUpgradeable.sol\":135:7007  library AddressUpgradeable {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122032e689da860d60fabb9a2da8d14353ea0cbff1a9f092163ae09515e45180215864736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122032e689da860d60fabb9a2da8d14353ea0cbff1a9f092163ae09515e45180215864736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0xE6 DUP10 0xDA DUP7 0xD PUSH1 0xFA 0xBB SWAP11 0x2D 0xA8 0xD1 NUMBER MSTORE8 0xEA 0xC 0xBF CALL 0xA9 CREATE SWAP3 AND GASPRICE 0xE0 SWAP6 ISZERO 0xE4 MLOAD DUP1 0x21 PC PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "135:6872:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122032e689da860d60fabb9a2da8d14353ea0cbff1a9f092163ae09515e45180215864736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0xE6 DUP10 0xDA DUP7 0xD PUSH1 0xFA 0xBB SWAP11 0x2D 0xA8 0xD1 NUMBER MSTORE8 0xEA 0xC 0xBF CALL 0xA9 CREATE SWAP3 AND GASPRICE 0xE0 SWAP6 ISZERO 0xE4 MLOAD DUP1 0x21 PC PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "135:6872:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "INVALID",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122032e689da860d60fabb9a2da8d14353ea0cbff1a9f092163ae09515e45180215864736f6c634300060c0033",
									".code": [
										{
											"begin": 135,
											"end": 7007,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"farming/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]},\"farming/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xebcd7eb909fdb72755f408a0490c3ecc4c3511967eaeda9126a48c8d22882a28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99224e5315f91eeac958d966274d2f6cd516ffe7f01717e9bff21c83163142b9\",\"dweb:/ipfs/Qmc8bDabLMznf4YnbCvGxgf7hrQ1aEeNMAf7e78P6AC5gX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 718,
								"contract": "farming/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 721,
								"contract": "farming/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1269,
								"contract": "farming/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"farming/utils/SafeBEP20.sol": {
				"SafeBEP20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around BEP20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeBEP20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"farming/utils/SafeBEP20.sol\":627:4031  library SafeBEP20 {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"farming/utils/SafeBEP20.sol\":627:4031  library SafeBEP20 {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206c9659791fd48bf61c6ae6b2e3941bc6273bbd5eb86ebe71ffb2e2dcb445689164736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206c9659791fd48bf61c6ae6b2e3941bc6273bbd5eb86ebe71ffb2e2dcb445689164736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0x9659791FD48BF61C6AE6B2E394 SHL 0xC6 0x27 EXTCODESIZE 0xBD 0x5E 0xB8 PUSH15 0xBE71FFB2E2DCB445689164736F6C63 NUMBER STOP MOD 0xC STOP CALLER ",
							"sourceMap": "627:3404:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206c9659791fd48bf61c6ae6b2e3941bc6273bbd5eb86ebe71ffb2e2dcb445689164736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0x9659791FD48BF61C6AE6B2E394 SHL 0xC6 0x27 EXTCODESIZE 0xBD 0x5E 0xB8 PUSH15 0xBE71FFB2E2DCB445689164736F6C63 NUMBER STOP MOD 0xC STOP CALLER ",
							"sourceMap": "627:3404:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IBEP20,bytes memory)": "infinite",
								"safeApprove(contract IBEP20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IBEP20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IBEP20,address,uint256)": "infinite",
								"safeTransfer(contract IBEP20,address,uint256)": "infinite",
								"safeTransferFrom(contract IBEP20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 627,
									"end": 4031,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "INVALID",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 627,
									"end": 4031,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206c9659791fd48bf61c6ae6b2e3941bc6273bbd5eb86ebe71ffb2e2dcb445689164736f6c634300060c0033",
									".code": [
										{
											"begin": 627,
											"end": 4031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 627,
											"end": 4031,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 627,
											"end": 4031,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 627,
											"end": 4031,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 627,
											"end": 4031,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 4031,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 627,
											"end": 4031,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 627,
											"end": 4031,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 627,
											"end": 4031,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around BEP20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeBEP20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"farming/utils/SafeBEP20.sol\":\"SafeBEP20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"farming/interfaces/IBEP20.sol\":{\"keccak256\":\"0xe6555dcb6ec5cb9dcaf2322cf003a1e3d2257471768b32cdc433025a0bc3ac3d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a1f47d4071cfc9f31174526b1a63d0be2169a199f0a5b9819267d9d070adad6d\",\"dweb:/ipfs/QmcmHiuPjMSXZLNubeScGkXvWAz6dM1cciv5zGPNJaK9Po\"]},\"farming/library/SafeMath.sol\":{\"keccak256\":\"0x61f7309b48f11de8884e26542b911fdff2534e899f212e34eb4e399e57a9c867\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7eb4cf168b5b3422ee4aafc518537e6341b26ae38d8e3b8d8c96f17e71fe6301\",\"dweb:/ipfs/Qmes9Noj9pTL8zQ4hkZEFHYBdVgNjsn166fY4VqXQsMbDv\"]},\"farming/utils/Address.sol\":{\"keccak256\":\"0xbe2939e35a126bed12382b07d3729489c3536aa84188af5682427877595b83ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b77767cd892d4718296d8e8a52b6bd0167643d9c1e8e62099d33a650cfd040d\",\"dweb:/ipfs/QmepRNrdk5r4FXffRf6nraTQPLqZidMYpZ6XTUBo8oVNrg\"]},\"farming/utils/SafeBEP20.sol\":{\"keccak256\":\"0x736b7df5455c6cffdc1d6dd17b9e3271441e326bff6052ae5afd32a0ba4848c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a8ca4ddea200dba45afec0a108c7bc4f9cd9c74901ffadcdae9d245b6169eac\",\"dweb:/ipfs/QmSxuBuoXE4zD3ESeWYZCd7Xrp3NhRyC95MBr4SqRD8UUE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"farming/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "farming/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"OwnableUpgradeable": [
							130
						]
					},
					"id": 131,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "35:25:0"
						},
						{
							"absolutePath": "farming/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 131,
							"sourceUnit": 1271,
							"src": "64:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "farming/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 131,
							"sourceUnit": 778,
							"src": "107:36:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 5,
										"name": "Initializable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 777,
										"src": "692:13:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Initializable_$777",
											"typeString": "contract Initializable"
										}
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:13:0"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1270,
										"src": "707:18:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ContextUpgradeable_$1270",
											"typeString": "contract ContextUpgradeable"
										}
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "707:18:0"
								}
							],
							"contractDependencies": [
								777,
								1270
							],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "145:505:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 130,
							"linearizedBaseContracts": [
								130,
								1270,
								777
							],
							"name": "OwnableUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 130,
									"src": "733:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "733:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 16,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 16,
												"src": "791:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "791:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 16,
												"src": "822:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "790:57:0"
									},
									"src": "764:84:0"
								},
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "1002:82:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "1013:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1013:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1013:26:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 25,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 52,
														"src": "1050:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "1050:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "856:93:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 20,
											"modifierName": {
												"argumentTypes": null,
												"id": 19,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 760,
												"src": "990:11:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "990:11:0"
										}
									],
									"name": "__Ownable_init",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "978:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1002:0:0"
									},
									"scope": 130,
									"src": "955:129:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 51,
										"nodeType": "Block",
										"src": "1149:139:0",
										"statements": [
											{
												"assignments": [
													35
												],
												"declarations": [
													{
														"constant": false,
														"id": 35,
														"mutability": "mutable",
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 51,
														"src": "1160:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 34,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1160:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 38,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 36,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1254,
														"src": "1180:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
															"typeString": "function () view returns (address payable)"
														}
													},
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1180:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1160:32:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 39,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "1203:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 40,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 35,
														"src": "1212:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1203:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "1203:18:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 46,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1266:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 45,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1258:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 44,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1258:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1258:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 48,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 35,
															"src": "1270:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 43,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "1237:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 49,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1237:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 50,
												"nodeType": "EmitStatement",
												"src": "1232:48:0"
											}
										]
									},
									"documentation": null,
									"id": 52,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 32,
											"modifierName": {
												"argumentTypes": null,
												"id": 31,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 760,
												"src": "1137:11:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1137:11:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1125:2:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1149:0:0"
									},
									"scope": 130,
									"src": "1092:196:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 60,
										"nodeType": "Block",
										"src": "1424:32:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 58,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1442:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 57,
												"id": 59,
												"nodeType": "Return",
												"src": "1435:13:0"
											}
										]
									},
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "1296:67:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 61,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1383:2:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 61,
												"src": "1415:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1415:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1414:9:0"
									},
									"scope": 130,
									"src": "1369:87:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 74,
										"nodeType": "Block",
										"src": "1570:99:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 65,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 61,
																	"src": "1589:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 66,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1589:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 67,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1254,
																	"src": "1600:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1600:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1589:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1614:34:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 64,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1581:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1581:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 72,
												"nodeType": "ExpressionStatement",
												"src": "1581:68:0"
											},
											{
												"id": 73,
												"nodeType": "PlaceholderStatement",
												"src": "1660:1:0"
											}
										]
									},
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "1464:79:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 75,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1567:2:0"
									},
									"src": "1549:120:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "2074:94:0",
										"statements": [
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 82,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 10,
															"src": "2111:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 85,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2127:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 84,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2119:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 83,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2119:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 86,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2119:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 81,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2090:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2090:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 88,
												"nodeType": "EmitStatement",
												"src": "2085:45:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 89,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2141:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2158:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2150:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 90,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2150:7:0",
																"typeDescriptions": {
																	"typeIdentifier": null,
																	"typeString": null
																}
															}
														},
														"id": 93,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2150:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "2141:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "2141:19:0"
											}
										]
									},
									"documentation": {
										"id": 76,
										"nodeType": "StructuredDocumentation",
										"src": "1677:337:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 79,
											"modifierName": {
												"argumentTypes": null,
												"id": 78,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "2064:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2064:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2046:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2074:0:0"
									},
									"scope": 130,
									"src": "2020:148:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2393:174:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 106,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 100,
																"src": "2412:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 109,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2432:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 108,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2424:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 107,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2424:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 110,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2424:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2412:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:40:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 105,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2404:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2404:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 114,
												"nodeType": "ExpressionStatement",
												"src": "2404:73:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 116,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 10,
															"src": "2514:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 117,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "2522:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 115,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2493:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "EmitStatement",
												"src": "2488:43:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 120,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2542:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 121,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "2551:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2542:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 123,
												"nodeType": "ExpressionStatement",
												"src": "2542:17:0"
											}
										]
									},
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "2176:141:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 103,
											"modifierName": {
												"argumentTypes": null,
												"id": 102,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "2383:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2383:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 125,
												"src": "2350:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 99,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2350:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2349:18:0"
									},
									"returnParameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2393:0:0"
									},
									"scope": 130,
									"src": "2323:244:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 129,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 130,
									"src": "2573:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 126,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2573:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 128,
										"length": {
											"argumentTypes": null,
											"hexValue": "3439",
											"id": 127,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2581:2:0",
											"subdenomination": null,
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2573:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"value": null,
									"visibility": "private"
								}
							],
							"scope": 131,
							"src": "652:1950:0"
						}
					],
					"src": "35:2567:0"
				},
				"id": 0
			},
			"farming/eZKaliburProxy.sol": {
				"ast": {
					"absolutePath": "farming/eZKaliburProxy.sol",
					"exportedSymbols": {
						"eZKaliburProxy": [
							237
						]
					},
					"id": 238,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 132,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "33:25:1"
						},
						{
							"absolutePath": "farming/utils/SafeBEP20.sol",
							"file": "./utils/SafeBEP20.sol",
							"id": 133,
							"nodeType": "ImportDirective",
							"scope": 238,
							"sourceUnit": 1484,
							"src": "62:31:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "farming/access/OwnableUpgradeable.sol",
							"file": "./access/OwnableUpgradeable.sol",
							"id": 134,
							"nodeType": "ImportDirective",
							"scope": 238,
							"sourceUnit": 131,
							"src": "95:41:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "farming/library/WhitelistUpgradeable.sol",
							"file": "./library/WhitelistUpgradeable.sol",
							"id": 135,
							"nodeType": "ImportDirective",
							"scope": 238,
							"sourceUnit": 712,
							"src": "138:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 136,
										"name": "OwnableUpgradeable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 130,
										"src": "213:18:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_OwnableUpgradeable_$130",
											"typeString": "contract OwnableUpgradeable"
										}
									},
									"id": 137,
									"nodeType": "InheritanceSpecifier",
									"src": "213:18:1"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 138,
										"name": "WhitelistUpgradeable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 711,
										"src": "233:20:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_WhitelistUpgradeable_$711",
											"typeString": "contract WhitelistUpgradeable"
										}
									},
									"id": 139,
									"nodeType": "InheritanceSpecifier",
									"src": "233:20:1"
								}
							],
							"contractDependencies": [
								130,
								711,
								777,
								1270
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 237,
							"linearizedBaseContracts": [
								237,
								711,
								130,
								1270,
								777
							],
							"name": "eZKaliburProxy",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 142,
									"libraryName": {
										"contractScope": null,
										"id": 140,
										"name": "SafeBEP20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1483,
										"src": "267:9:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeBEP20_$1483",
											"typeString": "library SafeBEP20"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "261:27:1",
									"typeName": {
										"contractScope": null,
										"id": 141,
										"name": "IBEP20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 338,
										"src": "281:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IBEP20_$338",
											"typeString": "contract IBEP20"
										}
									}
								},
								{
									"constant": false,
									"id": 144,
									"mutability": "mutable",
									"name": "token",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 237,
									"src": "296:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IBEP20_$338",
										"typeString": "contract IBEP20"
									},
									"typeName": {
										"contractScope": null,
										"id": 143,
										"name": "IBEP20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 338,
										"src": "296:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IBEP20_$338",
											"typeString": "contract IBEP20"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 158,
										"nodeType": "Block",
										"src": "381:60:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 151,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "392:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "392:16:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 153,
												"nodeType": "ExpressionStatement",
												"src": "392:16:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 154,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 144,
														"src": "419:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IBEP20_$338",
															"typeString": "contract IBEP20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 155,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "427:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IBEP20_$338",
															"typeString": "contract IBEP20"
														}
													},
													"src": "419:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"id": 157,
												"nodeType": "ExpressionStatement",
												"src": "419:14:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "c4d66de8",
									"id": 159,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 149,
											"modifierName": {
												"argumentTypes": null,
												"id": 148,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 760,
												"src": "369:11:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "369:11:1"
										}
									],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "_token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 159,
												"src": "345:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBEP20_$338",
													"typeString": "contract IBEP20"
												},
												"typeName": {
													"contractScope": null,
													"id": 145,
													"name": "IBEP20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 338,
													"src": "345:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "344:15:1"
									},
									"returnParameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:0:1"
									},
									"scope": 237,
									"src": "325:116:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 204,
										"nodeType": "Block",
										"src": "549:281:1",
										"statements": [
											{
												"assignments": [
													171
												],
												"declarations": [
													{
														"constant": false,
														"id": 171,
														"mutability": "mutable",
														"name": "meerkatBal",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 204,
														"src": "560:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 170,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "560:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 179,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 176,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -28,
																	"src": "605:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_eZKaliburProxy_$237",
																		"typeString": "contract eZKaliburProxy"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_eZKaliburProxy_$237",
																		"typeString": "contract eZKaliburProxy"
																	}
																],
																"id": 175,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "597:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 174,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "597:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "597:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 172,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "581:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															}
														},
														"id": 173,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 277,
														"src": "581:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "581:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "560:51:1"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 180,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "626:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"id": 181,
														"name": "meerkatBal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 171,
														"src": "635:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "626:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 202,
													"nodeType": "Block",
													"src": "742:81:1",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 196,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 161,
																		"src": "772:2:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 197,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 163,
																		"src": "776:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 193,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 144,
																		"src": "757:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IBEP20_$338",
																			"typeString": "contract IBEP20"
																		}
																	},
																	"id": 195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 287,
																	"src": "757:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "757:26:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 199,
															"nodeType": "ExpressionStatement",
															"src": "757:26:1"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 200,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 163,
																"src": "805:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 169,
															"id": 201,
															"nodeType": "Return",
															"src": "798:13:1"
														}
													]
												},
												"id": 203,
												"nodeType": "IfStatement",
												"src": "622:201:1",
												"trueBody": {
													"id": 192,
													"nodeType": "Block",
													"src": "647:89:1",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 186,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 161,
																		"src": "677:2:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 187,
																		"name": "meerkatBal",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 171,
																		"src": "681:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 183,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 144,
																		"src": "662:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IBEP20_$338",
																			"typeString": "contract IBEP20"
																		}
																	},
																	"id": 185,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 287,
																	"src": "662:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "662:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 189,
															"nodeType": "ExpressionStatement",
															"src": "662:30:1"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 190,
																"name": "meerkatBal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 171,
																"src": "714:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 169,
															"id": 191,
															"nodeType": "Return",
															"src": "707:17:1"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"functionSelector": "3158079c",
									"id": 205,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 166,
											"modifierName": {
												"argumentTypes": null,
												"id": 165,
												"name": "onlyWhitelisted",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 642,
												"src": "515:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "515:15:1"
										}
									],
									"name": "safeMeerkatTransfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 205,
												"src": "478:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "478:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 205,
												"src": "490:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "490:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "477:28:1"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 205,
												"src": "540:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "540:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "539:9:1"
									},
									"scope": 237,
									"src": "449:381:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "924:105:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 219,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 207,
																		"src": "951:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IBEP20_$338",
																			"typeString": "contract IBEP20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IBEP20_$338",
																			"typeString": "contract IBEP20"
																		}
																	],
																	"id": 218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "943:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 217,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "943:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "943:15:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 223,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 144,
																		"src": "970:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IBEP20_$338",
																			"typeString": "contract IBEP20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IBEP20_$338",
																			"typeString": "contract IBEP20"
																		}
																	],
																	"id": 222,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "962:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 221,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "962:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "962:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "943:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 216,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "935:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "935:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 227,
												"nodeType": "ExpressionStatement",
												"src": "935:42:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 231,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 211,
															"src": "1008:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 232,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 209,
															"src": "1013:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 228,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 207,
															"src": "988:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															}
														},
														"id": 230,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1304,
														"src": "988:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBEP20_$338_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBEP20_$338_$",
															"typeString": "function (contract IBEP20,address,uint256)"
														}
													},
													"id": 233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "988:33:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 234,
												"nodeType": "ExpressionStatement",
												"src": "988:33:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "d04323c5",
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 214,
											"modifierName": {
												"argumentTypes": null,
												"id": 213,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "914:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "914:9:1"
										}
									],
									"name": "recoverToken",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "_token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "860:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBEP20_$338",
													"typeString": "contract IBEP20"
												},
												"typeName": {
													"contractScope": null,
													"id": 206,
													"name": "IBEP20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 338,
													"src": "860:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "875:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 208,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "875:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "892:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "859:45:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "924:0:1"
									},
									"scope": 237,
									"src": "838:191:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 238,
							"src": "186:846:1"
						}
					],
					"src": "33:999:1"
				},
				"id": 1
			},
			"farming/interfaces/IBEP20.sol": {
				"ast": {
					"absolutePath": "farming/interfaces/IBEP20.sol",
					"exportedSymbols": {
						"IBEP20": [
							338
						]
					},
					"id": 339,
					"license": "GPL-3.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 239,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "48:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": null,
							"fullyImplemented": false,
							"id": 338,
							"linearizedBaseContracts": [
								338
							],
							"name": "IBEP20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "100:68:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 245,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "194:2:2"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 245,
												"src": "220:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "220:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "219:9:2"
									},
									"scope": 338,
									"src": "174:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 246,
										"nodeType": "StructuredDocumentation",
										"src": "237:53:2",
										"text": " @dev Returns the token decimals."
									},
									"functionSelector": "313ce567",
									"id": 251,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "313:2:2"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 251,
												"src": "339:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 248,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "339:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "338:7:2"
									},
									"scope": 338,
									"src": "296:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "354:51:2",
										"text": " @dev Returns the token symbol."
									},
									"functionSelector": "95d89b41",
									"id": 257,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "426:2:2"
									},
									"returnParameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 257,
												"src": "452:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 254,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "452:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "451:15:2"
									},
									"scope": 338,
									"src": "411:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "475:49:2",
										"text": " @dev Returns the token name."
									},
									"functionSelector": "06fdde03",
									"id": 263,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:2"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 263,
												"src": "569:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 260,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "568:15:2"
									},
									"scope": 338,
									"src": "530:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "592:54:2",
										"text": " @dev Returns the bep token owner."
									},
									"functionSelector": "893d20e8",
									"id": 269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getOwner",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "669:2:2"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 269,
												"src": "695:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 266,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "695:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "694:9:2"
									},
									"scope": 338,
									"src": "652:52:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "712:74:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 277,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 277,
												"src": "811:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "811:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "810:17:2"
									},
									"returnParameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 277,
												"src": "851:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 274,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "851:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "850:9:2"
									},
									"scope": 338,
									"src": "792:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 278,
										"nodeType": "StructuredDocumentation",
										"src": "868:215:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 287,
												"src": "1107:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 279,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1107:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 287,
												"src": "1126:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1126:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1106:35:2"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 287,
												"src": "1160:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 284,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1160:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1159:6:2"
									},
									"scope": 338,
									"src": "1089:77:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "1174:270:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 297,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 297,
												"src": "1469:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1469:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 297,
												"src": "1485:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1485:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1468:33:2"
									},
									"returnParameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 297,
												"src": "1525:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1525:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1524:9:2"
									},
									"scope": 338,
									"src": "1450:84:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 298,
										"nodeType": "StructuredDocumentation",
										"src": "1542:655:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 307,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 307,
												"src": "2220:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2220:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 307,
												"src": "2237:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2237:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2219:33:2"
									},
									"returnParameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 307,
												"src": "2271:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 304,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2271:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2270:6:2"
									},
									"scope": 338,
									"src": "2203:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 308,
										"nodeType": "StructuredDocumentation",
										"src": "2285:304:2",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 319,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 319,
												"src": "2627:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2627:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 319,
												"src": "2652:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 311,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 319,
												"src": "2680:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 313,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2680:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2616:85:2"
									},
									"returnParameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 319,
												"src": "2720:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 316,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2720:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2719:6:2"
									},
									"scope": 338,
									"src": "2595:131:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "2734:163:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 328,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 328,
												"src": "2918:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2918:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 328,
												"src": "2940:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 326,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 328,
												"src": "2960:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 325,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2960:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2917:57:2"
									},
									"src": "2903:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 329,
										"nodeType": "StructuredDocumentation",
										"src": "2983:151:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 337,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 337,
												"src": "3155:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 337,
												"src": "3178:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3178:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 337,
												"src": "3203:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3203:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3154:63:2"
									},
									"src": "3140:78:2"
								}
							],
							"scope": 339,
							"src": "76:3145:2"
						}
					],
					"src": "48:3173:2"
				},
				"id": 2
			},
			"farming/library/SafeMath.sol": {
				"ast": {
					"absolutePath": "farming/library/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							607
						]
					},
					"id": 608,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 340,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 341,
								"nodeType": "StructuredDocumentation",
								"src": "63:575:3",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 607,
							"linearizedBaseContracts": [
								607
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 366,
										"nodeType": "Block",
										"src": "970:114:3",
										"statements": [
											{
												"assignments": [
													352
												],
												"declarations": [
													{
														"constant": false,
														"id": 352,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 366,
														"src": "981:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 351,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "981:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 356,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 353,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "993:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 354,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "997:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "993:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "981:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 358,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 352,
																"src": "1017:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 359,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 344,
																"src": "1022:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1017:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1025:29:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 357,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1009:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1009:46:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "1009:46:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 364,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 352,
													"src": "1075:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 350,
												"id": 365,
												"nodeType": "Return",
												"src": "1068:8:3"
											}
										]
									},
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "664:233:3",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 367,
												"src": "916:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "916:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 367,
												"src": "927:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "927:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "915:22:3"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 367,
												"src": "961:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "961:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "960:9:3"
									},
									"scope": 607,
									"src": "903:181:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 383,
										"nodeType": "Block",
										"src": "1434:69:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 378,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 370,
															"src": "1456:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 379,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 372,
															"src": "1459:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 380,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1462:32:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 377,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															384,
															412
														],
														"referencedDeclaration": 412,
														"src": "1452:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1452:43:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 376,
												"id": 382,
												"nodeType": "Return",
												"src": "1445:50:3"
											}
										]
									},
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "1092:269:3",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 384,
												"src": "1380:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1380:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 384,
												"src": "1391:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1391:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1379:22:3"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 384,
												"src": "1425:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 374,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1424:9:3"
									},
									"scope": 607,
									"src": "1367:136:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "1935:97:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 399,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 397,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 389,
																"src": "1954:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 398,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "1959:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1954:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 400,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 391,
															"src": "1962:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 396,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1946:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1946:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 402,
												"nodeType": "ExpressionStatement",
												"src": "1946:29:3"
											},
											{
												"assignments": [
													404
												],
												"declarations": [
													{
														"constant": false,
														"id": 404,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 411,
														"src": "1986:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 403,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1986:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 408,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 405,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 387,
														"src": "1998:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 406,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "2002:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1998:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1986:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 409,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 404,
													"src": "2023:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 395,
												"id": 410,
												"nodeType": "Return",
												"src": "2016:8:3"
											}
										]
									},
									"documentation": {
										"id": 385,
										"nodeType": "StructuredDocumentation",
										"src": "1511:289:3",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 412,
												"src": "1829:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1829:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 412,
												"src": "1849:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1849:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 412,
												"src": "1869:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 390,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1869:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1818:84:3"
									},
									"returnParameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 412,
												"src": "1926:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1926:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1925:9:3"
									},
									"scope": 607,
									"src": "1806:226:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 446,
										"nodeType": "Block",
										"src": "2358:404:3",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 422,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 415,
														"src": "2594:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 423,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2599:1:3",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2594:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 428,
												"nodeType": "IfStatement",
												"src": "2590:47:3",
												"trueBody": {
													"id": 427,
													"nodeType": "Block",
													"src": "2602:35:3",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 425,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2624:1:3",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 421,
															"id": 426,
															"nodeType": "Return",
															"src": "2617:8:3"
														}
													]
												}
											},
											{
												"assignments": [
													430
												],
												"declarations": [
													{
														"constant": false,
														"id": 430,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 446,
														"src": "2649:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 429,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2649:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 434,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 431,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 415,
														"src": "2661:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 432,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 417,
														"src": "2665:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2661:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2649:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 438,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 436,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 430,
																	"src": "2685:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 437,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 415,
																	"src": "2689:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2685:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 439,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 417,
																"src": "2694:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2685:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 441,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2697:35:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 435,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2677:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2677:56:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 443,
												"nodeType": "ExpressionStatement",
												"src": "2677:56:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 444,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 430,
													"src": "2753:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 421,
												"id": 445,
												"nodeType": "Return",
												"src": "2746:8:3"
											}
										]
									},
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "2040:245:3",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 447,
												"src": "2304:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2304:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 447,
												"src": "2315:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2315:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2303:22:3"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 447,
												"src": "2349:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2349:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2348:9:3"
									},
									"scope": 607,
									"src": "2291:471:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "3305:65:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 458,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 450,
															"src": "3327:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 459,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 452,
															"src": "3330:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3333:28:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 457,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															464,
															492
														],
														"referencedDeclaration": 492,
														"src": "3323:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3323:39:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 456,
												"id": 462,
												"nodeType": "Return",
												"src": "3316:46:3"
											}
										]
									},
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "2770:462:3",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 464,
												"src": "3251:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3251:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 464,
												"src": "3262:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 451,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3262:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3250:22:3"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 464,
												"src": "3296:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3296:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3295:9:3"
									},
									"scope": 607,
									"src": "3238:132:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 491,
										"nodeType": "Block",
										"src": "3995:183:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 477,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "4014:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 478,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4018:1:3",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4014:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 480,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "4021:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 476,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4006:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4006:28:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "4006:28:3"
											},
											{
												"assignments": [
													484
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 491,
														"src": "4045:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 483,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4045:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 488,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 485,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 467,
														"src": "4057:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 486,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 469,
														"src": "4061:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4057:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4045:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 489,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 484,
													"src": "4169:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 475,
												"id": 490,
												"nodeType": "Return",
												"src": "4162:8:3"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "3378:482:3",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 492,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 492,
												"src": "3889:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 466,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3889:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 492,
												"src": "3909:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3909:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 492,
												"src": "3929:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 470,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3929:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3878:84:3"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 492,
												"src": "3986:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3986:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3985:9:3"
									},
									"scope": 607,
									"src": "3866:312:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 508,
										"nodeType": "Block",
										"src": "4710:63:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 503,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 495,
															"src": "4732:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 504,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 497,
															"src": "4735:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 505,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4738:26:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 502,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															509,
															533
														],
														"referencedDeclaration": 533,
														"src": "4728:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 506,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4728:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 501,
												"id": 507,
												"nodeType": "Return",
												"src": "4721:44:3"
											}
										]
									},
									"documentation": {
										"id": 493,
										"nodeType": "StructuredDocumentation",
										"src": "4186:451:3",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 509,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 509,
												"src": "4656:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4656:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 509,
												"src": "4667:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4667:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4655:22:3"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 509,
												"src": "4701:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4700:9:3"
									},
									"scope": 607,
									"src": "4643:130:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 532,
										"nodeType": "Block",
										"src": "5387:71:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 522,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 514,
																"src": "5406:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 523,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5411:1:3",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5406:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 525,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "5414:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 521,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5398:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5398:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "5398:29:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 528,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 512,
														"src": "5445:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 529,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "5449:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5445:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 520,
												"id": 531,
												"nodeType": "Return",
												"src": "5438:12:3"
											}
										]
									},
									"documentation": {
										"id": 510,
										"nodeType": "StructuredDocumentation",
										"src": "4781:471:3",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 533,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 533,
												"src": "5281:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5281:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 533,
												"src": "5301:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5301:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 533,
												"src": "5321:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 515,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5321:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5270:84:3"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 533,
												"src": "5378:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 518,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5378:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5377:9:3"
									},
									"scope": 607,
									"src": "5258:200:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 551,
										"nodeType": "Block",
										"src": "5535:36:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 542,
														"name": "z",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "5546:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"condition": {
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 543,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 535,
																"src": "5550:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"argumentTypes": null,
																"id": 544,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 537,
																"src": "5554:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5550:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"argumentTypes": null,
															"id": 547,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 537,
															"src": "5562:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 548,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "5550:13:3",
														"trueExpression": {
															"argumentTypes": null,
															"id": 546,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 535,
															"src": "5558:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5546:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 550,
												"nodeType": "ExpressionStatement",
												"src": "5546:17:3"
											}
										]
									},
									"documentation": null,
									"id": 552,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 552,
												"src": "5479:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 534,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5479:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 552,
												"src": "5490:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5490:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5478:22:3"
									},
									"returnParameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 552,
												"src": "5524:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 539,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5524:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5523:11:3"
									},
									"scope": 607,
									"src": "5466:105:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "5748:253:3",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 559,
														"name": "y",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "5763:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "33",
														"id": 560,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5767:1:3",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "5763:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 597,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 595,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "5954:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 596,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5959:1:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5954:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": null,
													"id": 603,
													"nodeType": "IfStatement",
													"src": "5950:44:3",
													"trueBody": {
														"id": 602,
														"nodeType": "Block",
														"src": "5962:32:3",
														"statements": [
															{
																"expression": {
																	"argumentTypes": null,
																	"id": 600,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"argumentTypes": null,
																		"id": 598,
																		"name": "z",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "5977:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"argumentTypes": null,
																		"hexValue": "31",
																		"id": 599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5981:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "5977:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 601,
																"nodeType": "ExpressionStatement",
																"src": "5977:5:3"
															}
														]
													}
												},
												"id": 604,
												"nodeType": "IfStatement",
												"src": "5759:235:3",
												"trueBody": {
													"id": 594,
													"nodeType": "Block",
													"src": "5770:174:3",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 564,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 562,
																	"name": "z",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 557,
																	"src": "5785:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"id": 563,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 554,
																	"src": "5789:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5785:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 565,
															"nodeType": "ExpressionStatement",
															"src": "5785:5:3"
														},
														{
															"assignments": [
																567
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 567,
																	"mutability": "mutable",
																	"name": "x",
																	"nodeType": "VariableDeclaration",
																	"overrides": null,
																	"scope": 594,
																	"src": "5805:9:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 566,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5805:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 573,
															"initialValue": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 568,
																		"name": "y",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 554,
																		"src": "5817:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "32",
																		"id": 569,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5821:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "5817:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "31",
																	"id": 571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5825:1:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "5817:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5805:21:3"
														},
														{
															"body": {
																"id": 592,
																"nodeType": "Block",
																"src": "5855:78:3",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 579,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 577,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 557,
																				"src": "5874:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"id": 578,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 567,
																				"src": "5878:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5874:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 580,
																		"nodeType": "ExpressionStatement",
																		"src": "5874:5:3"
																	},
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 590,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 581,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 567,
																				"src": "5898:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 589,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"components": [
																						{
																							"argumentTypes": null,
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 586,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"argumentTypes": null,
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 584,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"argumentTypes": null,
																									"id": 582,
																									"name": "y",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 554,
																									"src": "5903:1:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "/",
																								"rightExpression": {
																									"argumentTypes": null,
																									"id": 583,
																									"name": "x",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 567,
																									"src": "5907:1:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "5903:5:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "+",
																							"rightExpression": {
																								"argumentTypes": null,
																								"id": 585,
																								"name": "x",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 567,
																								"src": "5911:1:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "5903:9:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 587,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "5902:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "32",
																					"id": 588,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "5916:1:3",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "5902:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5898:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 591,
																		"nodeType": "ExpressionStatement",
																		"src": "5898:19:3"
																	}
																]
															},
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 576,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 574,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 567,
																	"src": "5848:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 575,
																	"name": "z",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 557,
																	"src": "5852:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5848:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 593,
															"nodeType": "WhileStatement",
															"src": "5841:92:3"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 606,
												"src": "5703:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5703:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5702:11:3"
									},
									"returnParameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 606,
												"src": "5737:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5737:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5736:11:3"
									},
									"scope": 607,
									"src": "5689:312:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 608,
							"src": "640:5364:3"
						}
					],
					"src": "35:5969:3"
				},
				"id": 3
			},
			"farming/library/WhitelistUpgradeable.sol": {
				"ast": {
					"absolutePath": "farming/library/WhitelistUpgradeable.sol",
					"exportedSymbols": {
						"WhitelistUpgradeable": [
							711
						]
					},
					"id": 712,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 609,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "33:25:4"
						},
						{
							"absolutePath": "farming/access/OwnableUpgradeable.sol",
							"file": "../access/OwnableUpgradeable.sol",
							"id": 610,
							"nodeType": "ImportDirective",
							"scope": 712,
							"sourceUnit": 131,
							"src": "62:42:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 611,
										"name": "OwnableUpgradeable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 130,
										"src": "141:18:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_OwnableUpgradeable_$130",
											"typeString": "contract OwnableUpgradeable"
										}
									},
									"id": 612,
									"nodeType": "InheritanceSpecifier",
									"src": "141:18:4"
								}
							],
							"contractDependencies": [
								130,
								777,
								1270
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 711,
							"linearizedBaseContracts": [
								711,
								130,
								1270,
								777
							],
							"name": "WhitelistUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 616,
									"mutability": "mutable",
									"name": "_whitelist",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 711,
									"src": "167:44:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 615,
										"keyType": {
											"id": 613,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "176:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "167:25:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 614,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "187:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 618,
									"mutability": "mutable",
									"name": "_disable",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 711,
									"src": "218:21:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 617,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "218:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 624,
									"name": "Whitelisted",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"indexed": true,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 624,
												"src": "378:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 619,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 622,
												"indexed": false,
												"mutability": "mutable",
												"name": "whitelist",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 624,
												"src": "404:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 621,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "404:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "377:42:4"
									},
									"src": "360:60:4"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 626,
									"name": "EnableWhitelist",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:4"
									},
									"src": "426:24:4"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 628,
									"name": "DisableWhitelist",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "478:2:4"
									},
									"src": "456:25:4"
								},
								{
									"body": {
										"id": 641,
										"nodeType": "Block",
										"src": "514:119:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 636,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 631,
																"name": "_disable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 618,
																"src": "533:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 632,
																	"name": "_whitelist",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 616,
																	"src": "545:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 635,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 633,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "556:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 634,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "556:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "545:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "533:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "57686974656c6973743a2063616c6c6572206973206e6f74206f6e207468652077686974656c697374",
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "569:43:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8193a60c6207ee93eb48bebd42af33b356dd6e6ca52ad6aab6a8892e28cd7323",
																"typeString": "literal_string \"Whitelist: caller is not on the whitelist\""
															},
															"value": "Whitelist: caller is not on the whitelist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8193a60c6207ee93eb48bebd42af33b356dd6e6ca52ad6aab6a8892e28cd7323",
																"typeString": "literal_string \"Whitelist: caller is not on the whitelist\""
															}
														],
														"id": 630,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "525:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "525:88:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 639,
												"nodeType": "ExpressionStatement",
												"src": "525:88:4"
											},
											{
												"id": 640,
												"nodeType": "PlaceholderStatement",
												"src": "624:1:4"
											}
										]
									},
									"documentation": null,
									"id": 642,
									"name": "onlyWhitelisted",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:0:4"
									},
									"src": "489:144:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 650,
										"nodeType": "Block",
										"src": "701:35:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 647,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "712:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "712:16:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 649,
												"nodeType": "ExpressionStatement",
												"src": "712:16:4"
											}
										]
									},
									"documentation": null,
									"id": 651,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 645,
											"modifierName": {
												"argumentTypes": null,
												"id": 644,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 760,
												"src": "689:11:4",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "689:11:4"
										}
									],
									"name": "__WhitelistUpgradeable_init",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "677:2:4"
									},
									"returnParameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "701:0:4"
									},
									"scope": 711,
									"src": "641:95:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 662,
										"nodeType": "Block",
										"src": "809:46:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 658,
														"name": "_whitelist",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 616,
														"src": "827:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 660,
													"indexExpression": {
														"argumentTypes": null,
														"id": 659,
														"name": "_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 653,
														"src": "838:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "827:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 657,
												"id": 661,
												"nodeType": "Return",
												"src": "820:27:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "c683630d",
									"id": 663,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isWhitelist",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 663,
												"src": "765:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "765:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "764:18:4"
									},
									"returnParameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 663,
												"src": "803:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 655,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "803:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "802:6:4"
									},
									"scope": 711,
									"src": "744:111:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 683,
										"nodeType": "Block",
										"src": "932:89:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 672,
															"name": "_whitelist",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "943:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 674,
														"indexExpression": {
															"argumentTypes": null,
															"id": 673,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "954:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "943:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 675,
														"name": "_on",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "966:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "943:26:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 677,
												"nodeType": "ExpressionStatement",
												"src": "943:26:4"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 679,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "999:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 680,
															"name": "_on",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "1009:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 678,
														"name": "Whitelisted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 624,
														"src": "987:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,bool)"
														}
													},
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "987:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 682,
												"nodeType": "EmitStatement",
												"src": "982:31:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "53d6fd59",
									"id": 684,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 670,
											"modifierName": {
												"argumentTypes": null,
												"id": 669,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "922:9:4",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "922:9:4"
										}
									],
									"name": "setWhitelist",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 684,
												"src": "885:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 664,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "_on",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 684,
												"src": "903:8:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 666,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "903:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "884:28:4"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "932:0:4"
									},
									"scope": 711,
									"src": "863:158:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "1088:165:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 691,
														"name": "_disable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 618,
														"src": "1099:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 692,
														"name": "disable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "1110:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1099:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 694,
												"nodeType": "ExpressionStatement",
												"src": "1099:18:4"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 695,
													"name": "disable",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 686,
													"src": "1132:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 703,
													"nodeType": "Block",
													"src": "1197:49:4",
													"statements": [
														{
															"eventCall": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 700,
																	"name": "EnableWhitelist",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 626,
																	"src": "1217:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 701,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1217:17:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 702,
															"nodeType": "EmitStatement",
															"src": "1212:22:4"
														}
													]
												},
												"id": 704,
												"nodeType": "IfStatement",
												"src": "1128:118:4",
												"trueBody": {
													"id": 699,
													"nodeType": "Block",
													"src": "1141:50:4",
													"statements": [
														{
															"eventCall": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 696,
																	"name": "DisableWhitelist",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 628,
																	"src": "1161:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 697,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1161:18:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 698,
															"nodeType": "EmitStatement",
															"src": "1156:23:4"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"functionSelector": "49ba1b49",
									"id": 706,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 689,
											"modifierName": {
												"argumentTypes": null,
												"id": 688,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "1078:9:4",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1078:9:4"
										}
									],
									"name": "disableWhitelist",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "disable",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 706,
												"src": "1055:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 685,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1055:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1054:14:4"
									},
									"returnParameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1088:0:4"
									},
									"scope": 711,
									"src": "1029:224:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"constant": false,
									"id": 710,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 711,
									"src": "1261:25:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 707,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1261:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 709,
										"length": {
											"argumentTypes": null,
											"hexValue": "3439",
											"id": 708,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1269:2:4",
											"subdenomination": null,
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "1261:11:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"value": null,
									"visibility": "private"
								}
							],
							"scope": 712,
							"src": "108:1182:4"
						}
					],
					"src": "33:1257:4"
				},
				"id": 4
			},
			"farming/proxy/Initializable.sol": {
				"ast": {
					"absolutePath": "farming/proxy/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							777
						]
					},
					"id": 778,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 713,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".24",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "82:32:5"
						},
						{
							"absolutePath": "farming/utils/AddressUpgradeable.sol",
							"file": "../utils/AddressUpgradeable.sol",
							"id": 714,
							"nodeType": "ImportDirective",
							"scope": 778,
							"sourceUnit": 1226,
							"src": "118:41:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 715,
								"nodeType": "StructuredDocumentation",
								"src": "163:949:5",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity."
							},
							"fullyImplemented": true,
							"id": 777,
							"linearizedBaseContracts": [
								777
							],
							"name": "Initializable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "1155:75:5",
										"text": " @dev Indicates that the contract has been initialized."
									},
									"id": 718,
									"mutability": "mutable",
									"name": "_initialized",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 777,
									"src": "1236:25:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 717,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1236:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 719,
										"nodeType": "StructuredDocumentation",
										"src": "1270:93:5",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 721,
									"mutability": "mutable",
									"name": "_initializing",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 777,
									"src": "1369:26:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 720,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1369:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 759,
										"nodeType": "Block",
										"src": "1528:382:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 725,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 721,
																	"src": "1547:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"argumentTypes": null,
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 726,
																		"name": "_isConstructor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 776,
																		"src": "1564:14:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																			"typeString": "function () view returns (bool)"
																		}
																	},
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1564:16:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "1547:33:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"id": 730,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "1584:13:5",
																"subExpression": {
																	"argumentTypes": null,
																	"id": 729,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 718,
																	"src": "1585:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1547:50:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 732,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1599:48:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 724,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1539:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1539:109:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 734,
												"nodeType": "ExpressionStatement",
												"src": "1539:109:5"
											},
											{
												"assignments": [
													736
												],
												"declarations": [
													{
														"constant": false,
														"id": 736,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 759,
														"src": "1661:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 735,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1661:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 739,
												"initialValue": {
													"argumentTypes": null,
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1683:14:5",
													"subExpression": {
														"argumentTypes": null,
														"id": 737,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 721,
														"src": "1684:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1661:36:5"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 740,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 736,
													"src": "1712:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 750,
												"nodeType": "IfStatement",
												"src": "1708:101:5",
												"trueBody": {
													"id": 749,
													"nodeType": "Block",
													"src": "1728:81:5",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 743,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 741,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 721,
																	"src": "1743:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 742,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:4:5",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1743:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 744,
															"nodeType": "ExpressionStatement",
															"src": "1743:20:5"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 747,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 745,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 718,
																	"src": "1778:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 746,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:4:5",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1778:19:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 748,
															"nodeType": "ExpressionStatement",
															"src": "1778:19:5"
														}
													]
												}
											},
											{
												"id": 751,
												"nodeType": "PlaceholderStatement",
												"src": "1821:1:5"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 752,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 736,
													"src": "1839:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 758,
												"nodeType": "IfStatement",
												"src": "1835:68:5",
												"trueBody": {
													"id": 757,
													"nodeType": "Block",
													"src": "1855:48:5",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 755,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 753,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 721,
																	"src": "1870:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "66616c7365",
																	"id": 754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1886:5:5",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "1870:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 756,
															"nodeType": "ExpressionStatement",
															"src": "1870:21:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 722,
										"nodeType": "StructuredDocumentation",
										"src": "1404:95:5",
										"text": " @dev Modifier to protect an initializer function from being invoked twice."
									},
									"id": 760,
									"name": "initializer",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1525:2:5"
									},
									"src": "1505:405:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 775,
										"nodeType": "Block",
										"src": "2057:71:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2075:45:5",
													"subExpression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 770,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -28,
																		"src": "2114:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Initializable_$777",
																			"typeString": "contract Initializable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Initializable_$777",
																			"typeString": "contract Initializable"
																		}
																	],
																	"id": 769,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2106:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 768,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2106:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 771,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2106:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 766,
																"name": "AddressUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1225,
																"src": "2076:18:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1225_$",
																	"typeString": "type(library AddressUpgradeable)"
																}
															},
															"id": 767,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1001,
															"src": "2076:29:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2076:44:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 765,
												"id": 774,
												"nodeType": "Return",
												"src": "2068:52:5"
											}
										]
									},
									"documentation": {
										"id": 761,
										"nodeType": "StructuredDocumentation",
										"src": "1918:79:5",
										"text": "@dev Returns true if and only if the function is running in the constructor"
									},
									"id": 776,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isConstructor",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2026:2:5"
									},
									"returnParameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 776,
												"src": "2051:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 763,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2051:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2050:6:5"
									},
									"scope": 777,
									"src": "2003:125:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 778,
							"src": "1114:1017:5"
						}
					],
					"src": "82:2049:5"
				},
				"id": 5
			},
			"farming/utils/Address.sol": {
				"ast": {
					"absolutePath": "farming/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							981
						]
					},
					"id": 982,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 779,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 780,
								"nodeType": "StructuredDocumentation",
								"src": "62:69:6",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 981,
							"linearizedBaseContracts": [
								981
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 805,
										"nodeType": "Block",
										"src": "809:575:6",
										"statements": [
											{
												"assignments": [
													789
												],
												"declarations": [
													{
														"constant": false,
														"id": 789,
														"mutability": "mutable",
														"name": "codehash",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 805,
														"src": "1065:16:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 788,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1065:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 790,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "1065:16:6"
											},
											{
												"assignments": [
													792
												],
												"declarations": [
													{
														"constant": false,
														"id": 792,
														"mutability": "mutable",
														"name": "accountHash",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 805,
														"src": "1092:19:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 791,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1092:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 794,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "307863356432343630313836663732333363393237653764623264636337303363306535303062363533636138323237336237626661643830343564383561343730",
													"id": 793,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1114:66:6",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_89477152217924674838424037953991966239322087453347756267410168184682657981552_by_1",
														"typeString": "int_const 8947...(69 digits omitted)...1552"
													},
													"value": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1092:88:6"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1257:58:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1272:32:6",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1296:7:6"
																	}
																],
																"functionName": {
																	"name": "extcodehash",
																	"nodeType": "YulIdentifier",
																	"src": "1284:11:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1284:20:6"
															},
															"variableNames": [
																{
																	"name": "codehash",
																	"nodeType": "YulIdentifier",
																	"src": "1272:8:6"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 783,
														"isOffset": false,
														"isSlot": false,
														"src": "1296:7:6",
														"valueSize": 1
													},
													{
														"declaration": 789,
														"isOffset": false,
														"isSlot": false,
														"src": "1272:8:6",
														"valueSize": 1
													}
												],
												"id": 795,
												"nodeType": "InlineAssembly",
												"src": "1248:67:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 798,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 796,
																	"name": "codehash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 789,
																	"src": "1333:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 797,
																	"name": "accountHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 792,
																	"src": "1345:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "1333:23:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 799,
																	"name": "codehash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 789,
																	"src": "1360:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "307830",
																	"id": 800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1372:3:6",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0x0"
																},
																"src": "1360:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1333:42:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 803,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1332:44:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 787,
												"id": 804,
												"nodeType": "Return",
												"src": "1325:51:6"
											}
										]
									},
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "156:581:6",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 806,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 806,
												"src": "763:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "763:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "762:17:6"
									},
									"returnParameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 806,
												"src": "803:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 785,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "803:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "802:6:6"
									},
									"scope": 981,
									"src": "743:641:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 839,
										"nodeType": "Block",
										"src": "2390:324:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 821,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 817,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2417:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$981",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$981",
																				"typeString": "library Address"
																			}
																		],
																		"id": 816,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2409:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 815,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2409:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 818,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2409:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 819,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2409:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 820,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 811,
																"src": "2434:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2409:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 822,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2442:31:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 814,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2401:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2401:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 824,
												"nodeType": "ExpressionStatement",
												"src": "2401:73:6"
											},
											{
												"assignments": [
													826,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 826,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 839,
														"src": "2566:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 825,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2566:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													null
												],
												"id": 833,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "",
															"id": 831,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2614:2:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 827,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 809,
																"src": "2584:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 828,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "2584:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 830,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 829,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 811,
																"src": "2606:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2584:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2584:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2565:52:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 835,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 826,
															"src": "2636:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 836,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2645:60:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 834,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2628:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2628:78:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 838,
												"nodeType": "ExpressionStatement",
												"src": "2628:78:6"
											}
										]
									},
									"documentation": {
										"id": 807,
										"nodeType": "StructuredDocumentation",
										"src": "1392:921:6",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 840,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 809,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 840,
												"src": "2338:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 808,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2338:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 840,
												"src": "2365:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2365:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2337:43:6"
									},
									"returnParameters": {
										"id": 813,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2390:0:6"
									},
									"scope": 981,
									"src": "2319:395:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 856,
										"nodeType": "Block",
										"src": "3564:86:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 851,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "3595:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 852,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "3603:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 853,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3609:32:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 850,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															857,
															877
														],
														"referencedDeclaration": 877,
														"src": "3582:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3582:60:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 849,
												"id": 855,
												"nodeType": "Return",
												"src": "3575:67:6"
											}
										]
									},
									"documentation": {
										"id": 841,
										"nodeType": "StructuredDocumentation",
										"src": "2722:747:6",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 857,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 857,
												"src": "3497:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 842,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3497:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 857,
												"src": "3513:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 844,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3513:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3496:35:6"
									},
									"returnParameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 857,
												"src": "3550:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 847,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3550:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3549:14:6"
									},
									"scope": 981,
									"src": "3475:175:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 876,
										"nodeType": "Block",
										"src": "4031:79:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 870,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 860,
															"src": "4072:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 871,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 862,
															"src": "4080:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "30",
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4086:1:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"argumentTypes": null,
															"id": 873,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 864,
															"src": "4089:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 869,
														"name": "_functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 980,
														"src": "4049:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4049:53:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 868,
												"id": 875,
												"nodeType": "Return",
												"src": "4042:60:6"
											}
										]
									},
									"documentation": {
										"id": 858,
										"nodeType": "StructuredDocumentation",
										"src": "3658:216:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 877,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 860,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 877,
												"src": "3912:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3912:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 877,
												"src": "3937:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 861,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3937:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 877,
												"src": "3965:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 863,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3965:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3901:97:6"
									},
									"returnParameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 877,
												"src": "4017:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 866,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4017:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4016:14:6"
									},
									"scope": 981,
									"src": "3880:230:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 896,
										"nodeType": "Block",
										"src": "4632:113:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 890,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 880,
															"src": "4672:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 891,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 882,
															"src": "4680:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 892,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 884,
															"src": "4686:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 893,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4693:43:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 889,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															897,
															930
														],
														"referencedDeclaration": 930,
														"src": "4650:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4650:87:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 888,
												"id": 895,
												"nodeType": "Return",
												"src": "4643:94:6"
											}
										]
									},
									"documentation": {
										"id": 878,
										"nodeType": "StructuredDocumentation",
										"src": "4118:361:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 897,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 897,
												"src": "4526:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4526:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 897,
												"src": "4551:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 881,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4551:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 897,
												"src": "4579:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4579:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4515:84:6"
									},
									"returnParameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 897,
												"src": "4618:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 886,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4618:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4617:14:6"
									},
									"scope": 981,
									"src": "4485:260:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 929,
										"nodeType": "Block",
										"src": "5185:175:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 918,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 914,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "5212:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$981",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$981",
																				"typeString": "library Address"
																			}
																		],
																		"id": 913,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5204:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 912,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5204:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 915,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5204:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 916,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "5204:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 917,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 904,
																"src": "5229:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5204:30:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 919,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5236:40:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 911,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5196:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 920,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5196:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 921,
												"nodeType": "ExpressionStatement",
												"src": "5196:81:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 923,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 900,
															"src": "5318:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 924,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "5326:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 925,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "5332:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 926,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 906,
															"src": "5339:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 922,
														"name": "_functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 980,
														"src": "5295:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5295:57:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 910,
												"id": 928,
												"nodeType": "Return",
												"src": "5288:64:6"
											}
										]
									},
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "4753:242:6",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 930,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 930,
												"src": "5042:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5042:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 930,
												"src": "5067:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 901,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5067:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 930,
												"src": "5095:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5095:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 930,
												"src": "5119:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 905,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5119:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5031:121:6"
									},
									"returnParameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 930,
												"src": "5171:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 908,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5171:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5170:14:6"
									},
									"scope": 981,
									"src": "5001:359:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 979,
										"nodeType": "Block",
										"src": "5555:833:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 945,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 932,
																	"src": "5585:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 944,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 806,
																"src": "5574:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5574:18:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 947,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5594:31:6",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 943,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5566:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5566:60:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 949,
												"nodeType": "ExpressionStatement",
												"src": "5566:60:6"
											},
											{
												"assignments": [
													951,
													953
												],
												"declarations": [
													{
														"constant": false,
														"id": 951,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 979,
														"src": "5700:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 950,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5700:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 953,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 979,
														"src": "5714:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 952,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5714:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 960,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 958,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 934,
															"src": "5770:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 954,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 932,
																"src": "5741:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 955,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "5741:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 957,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 956,
																"name": "weiValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 936,
																"src": "5760:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5741:28:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:34:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5699:76:6"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 961,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 951,
													"src": "5790:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 977,
													"nodeType": "Block",
													"src": "5849:532:6",
													"statements": [
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 965,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 953,
																		"src": "5935:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 966,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "5935:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 967,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5955:1:6",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5935:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 975,
																"nodeType": "Block",
																"src": "6315:55:6",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 972,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 938,
																					"src": "6341:12:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 971,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					-19,
																					-19
																				],
																				"referencedDeclaration": -19,
																				"src": "6334:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 973,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6334:20:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 974,
																		"nodeType": "ExpressionStatement",
																		"src": "6334:20:6"
																	}
																]
															},
															"id": 976,
															"nodeType": "IfStatement",
															"src": "5931:439:6",
															"trueBody": {
																"id": 970,
																"nodeType": "Block",
																"src": "5958:351:6",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "6146:148:6",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "6169:40:6",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "6198:10:6"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "6192:5:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6192:17:6"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "6173:15:6",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6242:2:6",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "6246:10:6"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6238:3:6"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6238:19:6"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "6259:15:6"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "6231:6:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6231:44:6"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "6231:44:6"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 953,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6198:10:6",
																				"valueSize": 1
																			},
																			{
																				"declaration": 953,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6246:10:6",
																				"valueSize": 1
																			}
																		],
																		"id": 969,
																		"nodeType": "InlineAssembly",
																		"src": "6137:157:6"
																	}
																]
															}
														}
													]
												},
												"id": 978,
												"nodeType": "IfStatement",
												"src": "5786:595:6",
												"trueBody": {
													"id": 964,
													"nodeType": "Block",
													"src": "5799:44:6",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 962,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 953,
																"src": "5821:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 942,
															"id": 963,
															"nodeType": "Return",
															"src": "5814:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 980,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 980,
												"src": "5410:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 931,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5410:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 980,
												"src": "5435:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 933,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5435:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "weiValue",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 980,
												"src": "5463:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 935,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5463:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 980,
												"src": "5490:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 937,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5490:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5399:124:6"
									},
									"returnParameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 980,
												"src": "5541:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 940,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5541:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5540:14:6"
									},
									"scope": 981,
									"src": "5368:1020:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 982,
							"src": "133:6258:6"
						}
					],
					"src": "35:6356:6"
				},
				"id": 6
			},
			"farming/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "farming/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1225
						]
					},
					"id": 1226,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 983,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "35:25:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 984,
								"nodeType": "StructuredDocumentation",
								"src": "64:69:7",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1225,
							"linearizedBaseContracts": [
								1225
							],
							"name": "AddressUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1000,
										"nodeType": "Block",
										"src": "822:356:7",
										"statements": [
											{
												"assignments": [
													993
												],
												"declarations": [
													{
														"constant": false,
														"id": 993,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1000,
														"src": "1024:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 992,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1024:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 994,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "1024:12:7"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1113:32:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1115:28:7",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1135:7:7"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1123:11:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:20:7"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1115:4:7"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "1135:7:7",
														"valueSize": 1
													},
													{
														"declaration": 993,
														"isOffset": false,
														"isSlot": false,
														"src": "1115:4:7",
														"valueSize": 1
													}
												],
												"id": 995,
												"nodeType": "InlineAssembly",
												"src": "1104:41:7"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 996,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "1162:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 997,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1169:1:7",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1162:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 991,
												"id": 999,
												"nodeType": "Return",
												"src": "1155:15:7"
											}
										]
									},
									"documentation": {
										"id": 985,
										"nodeType": "StructuredDocumentation",
										"src": "169:581:7",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 1001,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1001,
												"src": "776:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "776:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "775:17:7"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1001,
												"src": "816:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 989,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "816:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "815:6:7"
									},
									"scope": 1225,
									"src": "756:422:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1034,
										"nodeType": "Block",
										"src": "2184:326:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1016,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1012,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2211:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1225",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1225",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1011,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2203:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1010,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2203:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 1013,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2203:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1014,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2203:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1015,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1006,
																"src": "2228:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2203:31:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1017,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2236:31:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1009,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2195:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2195:73:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1019,
												"nodeType": "ExpressionStatement",
												"src": "2195:73:7"
											},
											{
												"assignments": [
													1021,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1021,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1034,
														"src": "2360:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1020,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2360:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													null
												],
												"id": 1028,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "",
															"id": 1026,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2410:2:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 1022,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1004,
																"src": "2378:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1023,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "2378:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1025,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 1024,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1006,
																"src": "2401:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2378:31:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1027,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2378:35:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2359:54:7"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1030,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1021,
															"src": "2432:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1031,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2441:60:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1029,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2424:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2424:78:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1033,
												"nodeType": "ExpressionStatement",
												"src": "2424:78:7"
											}
										]
									},
									"documentation": {
										"id": 1002,
										"nodeType": "StructuredDocumentation",
										"src": "1186:921:7",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1035,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1035,
												"src": "2132:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1003,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2132:15:7",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1035,
												"src": "2159:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2159:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2131:43:7"
									},
									"returnParameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2184:0:7"
									},
									"scope": 1225,
									"src": "2113:397:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1051,
										"nodeType": "Block",
										"src": "3360:84:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1046,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1038,
															"src": "3389:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 1047,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1040,
															"src": "3397:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1048,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3403:32:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1045,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1052,
															1072
														],
														"referencedDeclaration": 1072,
														"src": "3376:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3376:60:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1044,
												"id": 1050,
												"nodeType": "Return",
												"src": "3369:67:7"
											}
										]
									},
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "2518:747:7",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1052,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1052,
												"src": "3293:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1037,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3293:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1052,
												"src": "3309:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1039,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3309:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3292:35:7"
									},
									"returnParameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1052,
												"src": "3346:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1042,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3346:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3345:14:7"
									},
									"scope": 1225,
									"src": "3271:173:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1071,
										"nodeType": "Block",
										"src": "3791:78:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1065,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "3831:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 1066,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1057,
															"src": "3839:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "30",
															"id": 1067,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3845:1:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"argumentTypes": null,
															"id": 1068,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1059,
															"src": "3848:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1064,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1092,
															1142
														],
														"referencedDeclaration": 1142,
														"src": "3809:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1069,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3809:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1063,
												"id": 1070,
												"nodeType": "Return",
												"src": "3802:59:7"
											}
										]
									},
									"documentation": {
										"id": 1053,
										"nodeType": "StructuredDocumentation",
										"src": "3452:216:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1072,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1072,
												"src": "3696:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3696:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1072,
												"src": "3712:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1056,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3712:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1072,
												"src": "3731:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1058,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3731:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3695:63:7"
									},
									"returnParameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1072,
												"src": "3777:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1061,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3777:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3776:14:7"
									},
									"scope": 1225,
									"src": "3674:195:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1091,
										"nodeType": "Block",
										"src": "4357:113:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1085,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1075,
															"src": "4397:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 1086,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1077,
															"src": "4405:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 1087,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1079,
															"src": "4411:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1088,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4418:43:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1084,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1092,
															1142
														],
														"referencedDeclaration": 1142,
														"src": "4375:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1089,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4375:87:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1083,
												"id": 1090,
												"nodeType": "Return",
												"src": "4368:94:7"
											}
										]
									},
									"documentation": {
										"id": 1073,
										"nodeType": "StructuredDocumentation",
										"src": "3877:361:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1092,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1092,
												"src": "4275:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1074,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1092,
												"src": "4291:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1076,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4291:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1079,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1092,
												"src": "4310:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4274:50:7"
									},
									"returnParameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1092,
												"src": "4343:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1081,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4343:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4342:14:7"
									},
									"scope": 1225,
									"src": "4244:226:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1141,
										"nodeType": "Block",
										"src": "4867:389:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1109,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "4894:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1225",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1225",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1108,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4886:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1107,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4886:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 1110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4886:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "4886:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1112,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1099,
																"src": "4911:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4886:30:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1114,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4918:40:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1106,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4878:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4878:81:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1116,
												"nodeType": "ExpressionStatement",
												"src": "4878:81:7"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1119,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "4989:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1118,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1001,
																"src": "4978:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1120,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4978:18:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4998:31:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 1117,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4970:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4970:60:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1123,
												"nodeType": "ExpressionStatement",
												"src": "4970:60:7"
											},
											{
												"assignments": [
													1125,
													1127
												],
												"declarations": [
													{
														"constant": false,
														"id": 1125,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1141,
														"src": "5104:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1124,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5104:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1127,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1141,
														"src": "5118:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1126,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5118:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1134,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1132,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1097,
															"src": "5173:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 1128,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1095,
																"src": "5145:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "5145:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1131,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 1130,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1099,
																"src": "5165:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5145:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5145:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5103:75:7"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1136,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1125,
															"src": "5214:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 1137,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1127,
															"src": "5223:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 1138,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1101,
															"src": "5235:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1135,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1224,
														"src": "5196:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5196:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1105,
												"id": 1140,
												"nodeType": "Return",
												"src": "5189:59:7"
											}
										]
									},
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "4478:242:7",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1142,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1142,
												"src": "4757:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4757:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1142,
												"src": "4773:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1096,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4773:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1142,
												"src": "4792:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4792:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1142,
												"src": "4807:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1100,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4807:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4756:78:7"
									},
									"returnParameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1142,
												"src": "4853:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1103,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4853:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4852:14:7"
									},
									"scope": 1225,
									"src": "4726:530:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1158,
										"nodeType": "Block",
										"src": "5541:99:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1153,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1145,
															"src": "5578:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 1154,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1147,
															"src": "5586:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1155,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5592:39:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1152,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1159,
															1194
														],
														"referencedDeclaration": 1194,
														"src": "5559:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5559:73:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1151,
												"id": 1157,
												"nodeType": "Return",
												"src": "5552:80:7"
											}
										]
									},
									"documentation": {
										"id": 1143,
										"nodeType": "StructuredDocumentation",
										"src": "5264:171:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1159,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1159,
												"src": "5469:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1159,
												"src": "5485:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1146,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5485:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5468:35:7"
									},
									"returnParameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1159,
												"src": "5527:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1149,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5527:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5526:14:7"
									},
									"scope": 1225,
									"src": "5441:199:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1193,
										"nodeType": "Block",
										"src": "5960:294:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1173,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1162,
																	"src": "5990:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1172,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1001,
																"src": "5979:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5979:18:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1175,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5999:38:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 1171,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5971:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5971:67:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1177,
												"nodeType": "ExpressionStatement",
												"src": "5971:67:7"
											},
											{
												"assignments": [
													1179,
													1181
												],
												"declarations": [
													{
														"constant": false,
														"id": 1179,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1193,
														"src": "6112:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1178,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6112:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1181,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1193,
														"src": "6126:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1180,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6126:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1186,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1184,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1164,
															"src": "6171:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1182,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1162,
															"src": "6153:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1183,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6153:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6153:23:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6111:65:7"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1188,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1179,
															"src": "6212:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 1189,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1181,
															"src": "6221:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 1190,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1166,
															"src": "6233:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1187,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1224,
														"src": "6194:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6194:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1170,
												"id": 1192,
												"nodeType": "Return",
												"src": "6187:59:7"
											}
										]
									},
									"documentation": {
										"id": 1160,
										"nodeType": "StructuredDocumentation",
										"src": "5648:178:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1194,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1194,
												"src": "5860:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5860:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1194,
												"src": "5876:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1163,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5876:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1166,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1194,
												"src": "5895:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1165,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5895:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5859:63:7"
									},
									"returnParameters": {
										"id": 1170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1194,
												"src": "5946:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1168,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5946:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5945:14:7"
									},
									"scope": 1225,
									"src": "5832:422:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1223,
										"nodeType": "Block",
										"src": "6391:613:7",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"id": 1205,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1196,
													"src": "6406:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1221,
													"nodeType": "Block",
													"src": "6465:532:7",
													"statements": [
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1209,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1198,
																		"src": "6551:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "6551:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 1211,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6571:1:7",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6551:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1219,
																"nodeType": "Block",
																"src": "6931:55:7",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 1216,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1200,
																					"src": "6957:12:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 1215,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					-19,
																					-19
																				],
																				"referencedDeclaration": -19,
																				"src": "6950:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1217,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6950:20:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1218,
																		"nodeType": "ExpressionStatement",
																		"src": "6950:20:7"
																	}
																]
															},
															"id": 1220,
															"nodeType": "IfStatement",
															"src": "6547:439:7",
															"trueBody": {
																"id": 1214,
																"nodeType": "Block",
																"src": "6574:351:7",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "6762:148:7",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "6785:40:7",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "6814:10:7"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "6808:5:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6808:17:7"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "6789:15:7",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6858:2:7",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "6862:10:7"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6854:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6854:19:7"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "6875:15:7"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "6847:6:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6847:44:7"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "6847:44:7"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 1198,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6814:10:7",
																				"valueSize": 1
																			},
																			{
																				"declaration": 1198,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6862:10:7",
																				"valueSize": 1
																			}
																		],
																		"id": 1213,
																		"nodeType": "InlineAssembly",
																		"src": "6753:157:7"
																	}
																]
															}
														}
													]
												},
												"id": 1222,
												"nodeType": "IfStatement",
												"src": "6402:595:7",
												"trueBody": {
													"id": 1208,
													"nodeType": "Block",
													"src": "6415:44:7",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1206,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1198,
																"src": "6437:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1204,
															"id": 1207,
															"nodeType": "Return",
															"src": "6430:17:7"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 1224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1224,
												"src": "6289:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1195,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6289:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1224,
												"src": "6303:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1197,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6303:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1224,
												"src": "6328:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1199,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6328:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6288:67:7"
									},
									"returnParameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1224,
												"src": "6377:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1202,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6377:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6376:14:7"
									},
									"scope": 1225,
									"src": "6262:742:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1226,
							"src": "135:6872:7"
						}
					],
					"src": "35:6972:7"
				},
				"id": 7
			},
			"farming/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "farming/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1270
						]
					},
					"id": 1271,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1227,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:31:8"
						},
						{
							"absolutePath": "farming/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 1228,
							"nodeType": "ImportDirective",
							"scope": 1271,
							"sourceUnit": 778,
							"src": "68:36:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 1229,
										"name": "Initializable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 777,
										"src": "658:13:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Initializable_$777",
											"typeString": "contract Initializable"
										}
									},
									"id": 1230,
									"nodeType": "InheritanceSpecifier",
									"src": "658:13:8"
								}
							],
							"contractDependencies": [
								777
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 1270,
							"linearizedBaseContracts": [
								1270,
								777
							],
							"name": "ContextUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1238,
										"nodeType": "Block",
										"src": "726:45:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1235,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "737:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "737:26:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1237,
												"nodeType": "ExpressionStatement",
												"src": "737:26:8"
											}
										]
									},
									"documentation": null,
									"id": 1239,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 1233,
											"modifierName": {
												"argumentTypes": null,
												"id": 1232,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 760,
												"src": "714:11:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "714:11:8"
										}
									],
									"name": "__Context_init",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "702:2:8"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "726:0:8"
									},
									"scope": 1270,
									"src": "679:92:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1244,
										"nodeType": "Block",
										"src": "836:8:8",
										"statements": []
									},
									"documentation": null,
									"id": 1245,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 1242,
											"modifierName": {
												"argumentTypes": null,
												"id": 1241,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 760,
												"src": "824:11:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "824:11:8"
										}
									],
									"name": "__Context_init_unchained",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "812:2:8"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "836:0:8"
									},
									"scope": 1270,
									"src": "779:65:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1253,
										"nodeType": "Block",
										"src": "920:36:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1250,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "938:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "938:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 1249,
												"id": 1252,
												"nodeType": "Return",
												"src": "931:17:8"
											}
										]
									},
									"documentation": null,
									"id": 1254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:8"
									},
									"returnParameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1254,
												"src": "903:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:15:8",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "902:17:8"
									},
									"scope": 1270,
									"src": "850:106:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1264,
										"nodeType": "Block",
										"src": "1029:168:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 1259,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": -28,
													"src": "1040:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ContextUpgradeable_$1270",
														"typeString": "contract ContextUpgradeable"
													}
												},
												"id": 1260,
												"nodeType": "ExpressionStatement",
												"src": "1040:4:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1261,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "1181:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "1181:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1258,
												"id": 1263,
												"nodeType": "Return",
												"src": "1174:15:8"
											}
										]
									},
									"documentation": null,
									"id": 1265,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1255,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "981:2:8"
									},
									"returnParameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1265,
												"src": "1015:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1256,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1015:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1014:14:8"
									},
									"scope": 1270,
									"src": "964:233:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1269,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 1270,
									"src": "1203:25:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1266,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1203:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1268,
										"length": {
											"argumentTypes": null,
											"hexValue": "3530",
											"id": 1267,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1211:2:8",
											"subdenomination": null,
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1203:11:8",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"value": null,
									"visibility": "private"
								}
							],
							"scope": 1271,
							"src": "618:614:8"
						}
					],
					"src": "35:1197:8"
				},
				"id": 8
			},
			"farming/utils/SafeBEP20.sol": {
				"ast": {
					"absolutePath": "farming/utils/SafeBEP20.sol",
					"exportedSymbols": {
						"SafeBEP20": [
							1483
						]
					},
					"id": 1484,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1272,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:9"
						},
						{
							"absolutePath": "farming/interfaces/IBEP20.sol",
							"file": "../interfaces/IBEP20.sol",
							"id": 1273,
							"nodeType": "ImportDirective",
							"scope": 1484,
							"sourceUnit": 339,
							"src": "62:34:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "farming/library/SafeMath.sol",
							"file": "../library/SafeMath.sol",
							"id": 1274,
							"nodeType": "ImportDirective",
							"scope": 1484,
							"sourceUnit": 608,
							"src": "98:33:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "farming/utils/Address.sol",
							"file": "./Address.sol",
							"id": 1275,
							"nodeType": "ImportDirective",
							"scope": 1484,
							"sourceUnit": 982,
							"src": "133:23:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1276,
								"nodeType": "StructuredDocumentation",
								"src": "160:465:9",
								"text": " @title SafeBEP20\n @dev Wrappers around BEP20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 1483,
							"linearizedBaseContracts": [
								1483
							],
							"name": "SafeBEP20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1279,
									"libraryName": {
										"contractScope": null,
										"id": 1277,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 607,
										"src": "658:8:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$607",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "652:27:9",
									"typeName": {
										"id": 1278,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "671:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 1282,
									"libraryName": {
										"contractScope": null,
										"id": 1280,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 981,
										"src": "691:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$981",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "685:26:9",
									"typeName": {
										"id": 1281,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "703:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 1303,
										"nodeType": "Block",
										"src": "825:105:9",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1292,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "856:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1295,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1284,
																			"src": "886:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IBEP20_$338",
																				"typeString": "contract IBEP20"
																			}
																		},
																		"id": 1296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 287,
																		"src": "886:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1297,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "886:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1298,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1286,
																	"src": "911:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1299,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1288,
																	"src": "915:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 1293,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "863:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "863:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "863:58:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1291,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1482,
														"src": "836:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBEP20_$338_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IBEP20,bytes memory)"
														}
													},
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "836:86:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1302,
												"nodeType": "ExpressionStatement",
												"src": "836:86:9"
											}
										]
									},
									"documentation": null,
									"id": 1304,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1304,
												"src": "751:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBEP20_$338",
													"typeString": "contract IBEP20"
												},
												"typeName": {
													"contractScope": null,
													"id": 1283,
													"name": "IBEP20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 338,
													"src": "751:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1304,
												"src": "774:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1304,
												"src": "795:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "795:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "740:75:9"
									},
									"returnParameters": {
										"id": 1290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "825:0:9"
									},
									"scope": 1483,
									"src": "719:211:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1328,
										"nodeType": "Block",
										"src": "1071:115:9",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1316,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1306,
															"src": "1102:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1319,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1306,
																			"src": "1132:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IBEP20_$338",
																				"typeString": "contract IBEP20"
																			}
																		},
																		"id": 1320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 319,
																		"src": "1132:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "1132:27:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1322,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1308,
																	"src": "1161:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1323,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1310,
																	"src": "1167:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1324,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1312,
																	"src": "1171:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 1317,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "1109:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1109:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1325,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1109:68:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1315,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1482,
														"src": "1082:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBEP20_$338_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IBEP20,bytes memory)"
														}
													},
													"id": 1326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1082:96:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1327,
												"nodeType": "ExpressionStatement",
												"src": "1082:96:9"
											}
										]
									},
									"documentation": null,
									"id": 1329,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1329,
												"src": "974:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBEP20_$338",
													"typeString": "contract IBEP20"
												},
												"typeName": {
													"contractScope": null,
													"id": 1305,
													"name": "IBEP20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 338,
													"src": "974:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1329,
												"src": "997:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "997:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1329,
												"src": "1020:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1329,
												"src": "1041:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "963:98:9"
									},
									"returnParameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1071:0:9"
									},
									"scope": 1483,
									"src": "938:248:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1371,
										"nodeType": "Block",
										"src": "1565:560:9",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"components": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 1340,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1336,
																			"src": "1873:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 1341,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1882:1:9",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1873:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1343,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1872:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"components": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1353,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"arguments": [
																						{
																							"argumentTypes": null,
																							"id": 1348,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": -28,
																							"src": "1913:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeBEP20_$1483",
																								"typeString": "library SafeBEP20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeBEP20_$1483",
																								"typeString": "library SafeBEP20"
																							}
																						],
																						"id": 1347,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1905:7:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 1346,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1905:7:9",
																							"typeDescriptions": {
																								"typeIdentifier": null,
																								"typeString": null
																							}
																						}
																					},
																					"id": 1349,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1905:13:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"argumentTypes": null,
																					"id": 1350,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1334,
																					"src": "1920:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"argumentTypes": null,
																					"id": 1344,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1332,
																					"src": "1889:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IBEP20_$338",
																						"typeString": "contract IBEP20"
																					}
																				},
																				"id": 1345,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 297,
																				"src": "1889:15:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 1351,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1889:39:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 1352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1932:1:9",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1889:44:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1354,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1888:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1872:62:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 1356,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1949:56:9",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_91a9bac926ceb306224f4766a09b4f2ef09ebf6b62503a939a3d65e9ddb75b06",
																"typeString": "literal_string \"SafeBEP20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeBEP20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_91a9bac926ceb306224f4766a09b4f2ef09ebf6b62503a939a3d65e9ddb75b06",
																"typeString": "literal_string \"SafeBEP20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 1339,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1850:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1850:166:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1358,
												"nodeType": "ExpressionStatement",
												"src": "1850:166:9"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1360,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1332,
															"src": "2047:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1363,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1332,
																			"src": "2077:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IBEP20_$338",
																				"typeString": "contract IBEP20"
																			}
																		},
																		"id": 1364,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 307,
																		"src": "2077:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "2077:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1366,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1334,
																	"src": "2101:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1367,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1336,
																	"src": "2110:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 1361,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2054:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2054:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1368,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2054:62:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1359,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1482,
														"src": "2027:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBEP20_$338_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IBEP20,bytes memory)"
														}
													},
													"id": 1369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2027:90:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1370,
												"nodeType": "ExpressionStatement",
												"src": "2027:90:9"
											}
										]
									},
									"documentation": {
										"id": 1330,
										"nodeType": "StructuredDocumentation",
										"src": "1194:255:9",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IBEP20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 1372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1372,
												"src": "1486:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBEP20_$338",
													"typeString": "contract IBEP20"
												},
												"typeName": {
													"contractScope": null,
													"id": 1331,
													"name": "IBEP20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 338,
													"src": "1486:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1372,
												"src": "1509:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1372,
												"src": "1535:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1335,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1535:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1475:80:9"
									},
									"returnParameters": {
										"id": 1338,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1565:0:9"
									},
									"scope": 1483,
									"src": "1455:670:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1407,
										"nodeType": "Block",
										"src": "2253:200:9",
										"statements": [
											{
												"assignments": [
													1382
												],
												"declarations": [
													{
														"constant": false,
														"id": 1382,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1407,
														"src": "2264:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1381,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2264:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1394,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1392,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1378,
															"src": "2331:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1387,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2311:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeBEP20_$1483",
																				"typeString": "library SafeBEP20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeBEP20_$1483",
																				"typeString": "library SafeBEP20"
																			}
																		],
																		"id": 1386,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2303:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1385,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2303:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 1388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2303:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1389,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1376,
																	"src": "2318:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 1383,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1374,
																	"src": "2287:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IBEP20_$338",
																		"typeString": "contract IBEP20"
																	}
																},
																"id": 1384,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 297,
																"src": "2287:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2287:39:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1391,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 367,
														"src": "2287:43:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2287:50:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2264:73:9"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1396,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1374,
															"src": "2368:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1399,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1374,
																			"src": "2398:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IBEP20_$338",
																				"typeString": "contract IBEP20"
																			}
																		},
																		"id": 1400,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 307,
																		"src": "2398:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1401,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "2398:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1402,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1376,
																	"src": "2422:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1403,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1382,
																	"src": "2431:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 1397,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2375:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1398,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2375:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2375:69:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1395,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1482,
														"src": "2348:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBEP20_$338_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IBEP20,bytes memory)"
														}
													},
													"id": 1405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2348:97:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1406,
												"nodeType": "ExpressionStatement",
												"src": "2348:97:9"
											}
										]
									},
									"documentation": null,
									"id": 1408,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1408,
												"src": "2174:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBEP20_$338",
													"typeString": "contract IBEP20"
												},
												"typeName": {
													"contractScope": null,
													"id": 1373,
													"name": "IBEP20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 338,
													"src": "2174:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1408,
												"src": "2197:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2197:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1408,
												"src": "2223:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2223:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2163:80:9"
									},
									"returnParameters": {
										"id": 1380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2253:0:9"
									},
									"scope": 1483,
									"src": "2133:320:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1444,
										"nodeType": "Block",
										"src": "2581:282:9",
										"statements": [
											{
												"assignments": [
													1418
												],
												"declarations": [
													{
														"constant": false,
														"id": 1418,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1444,
														"src": "2592:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1417,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2592:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1431,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1428,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1414,
															"src": "2673:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666542455032303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 1429,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2693:43:9",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8d8b0d004f76517d0accc4049600ccad745ed1cf03a0a544bc57f891c9ae38a3",
																"typeString": "literal_string \"SafeBEP20: decreased allowance below zero\""
															},
															"value": "SafeBEP20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_8d8b0d004f76517d0accc4049600ccad745ed1cf03a0a544bc57f891c9ae38a3",
																"typeString": "literal_string \"SafeBEP20: decreased allowance below zero\""
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1423,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2639:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeBEP20_$1483",
																				"typeString": "library SafeBEP20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeBEP20_$1483",
																				"typeString": "library SafeBEP20"
																			}
																		],
																		"id": 1422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2631:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1421,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2631:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 1424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2631:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1425,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1412,
																	"src": "2646:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 1419,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1410,
																	"src": "2615:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IBEP20_$338",
																		"typeString": "contract IBEP20"
																	}
																},
																"id": 1420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 297,
																"src": "2615:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2615:39:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1427,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 412,
														"src": "2615:43:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 1430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2615:132:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2592:155:9"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1433,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1410,
															"src": "2778:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1436,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1410,
																			"src": "2808:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IBEP20_$338",
																				"typeString": "contract IBEP20"
																			}
																		},
																		"id": 1437,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 307,
																		"src": "2808:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1438,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "2808:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1439,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1412,
																	"src": "2832:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 1440,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1418,
																	"src": "2841:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 1434,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2785:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1435,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2785:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2785:69:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IBEP20_$338",
																"typeString": "contract IBEP20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1432,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1482,
														"src": "2758:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBEP20_$338_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IBEP20,bytes memory)"
														}
													},
													"id": 1442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2758:97:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1443,
												"nodeType": "ExpressionStatement",
												"src": "2758:97:9"
											}
										]
									},
									"documentation": null,
									"id": 1445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1410,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1445,
												"src": "2502:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBEP20_$338",
													"typeString": "contract IBEP20"
												},
												"typeName": {
													"contractScope": null,
													"id": 1409,
													"name": "IBEP20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 338,
													"src": "2502:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1412,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1445,
												"src": "2525:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2525:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1445,
												"src": "2551:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1413,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2551:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2491:80:9"
									},
									"returnParameters": {
										"id": 1416,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2581:0:9"
									},
									"scope": 1483,
									"src": "2461:402:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1481,
										"nodeType": "Block",
										"src": "3324:704:9",
										"statements": [
											{
												"assignments": [
													1454
												],
												"declarations": [
													{
														"constant": false,
														"id": 1454,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1481,
														"src": "3678:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1453,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3678:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1463,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1460,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1450,
															"src": "3732:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1461,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3738:34:9",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e357ac51478c37023e9e7ad13e9d6e33f2ac0566d41923020f1a6b2e7a541c3e",
																"typeString": "literal_string \"SafeBEP20: low-level call failed\""
															},
															"value": "SafeBEP20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_e357ac51478c37023e9e7ad13e9d6e33f2ac0566d41923020f1a6b2e7a541c3e",
																"typeString": "literal_string \"SafeBEP20: low-level call failed\""
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1457,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1448,
																	"src": "3712:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IBEP20_$338",
																		"typeString": "contract IBEP20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IBEP20_$338",
																		"typeString": "contract IBEP20"
																	}
																],
																"id": 1456,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3704:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1455,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3704:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 1458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3704:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 877,
														"src": "3704:27:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3704:69:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3678:95:9"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1464,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1454,
															"src": "3788:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "3788:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1466,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3808:1:9",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3788:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1480,
												"nodeType": "IfStatement",
												"src": "3784:237:9",
												"trueBody": {
													"id": 1479,
													"nodeType": "Block",
													"src": "3811:210:9",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 1471,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1454,
																				"src": "3943:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"argumentTypes": null,
																				"components": [
																					{
																						"argumentTypes": null,
																						"id": 1473,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3956:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 1472,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3956:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": null,
																								"typeString": null
																							}
																						}
																					}
																				],
																				"id": 1474,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3955:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"argumentTypes": null,
																				"id": 1469,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": -1,
																				"src": "3932:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1470,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "3932:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1475,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3932:30:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"hexValue": "5361666542455032303a204245503230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 1476,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3964:44:9",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_21c3364d55537bf20eb8f05374e9f53f47299e1883c412f1f1135f398f2c2082",
																			"typeString": "literal_string \"SafeBEP20: BEP20 operation did not succeed\""
																		},
																		"value": "SafeBEP20: BEP20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_21c3364d55537bf20eb8f05374e9f53f47299e1883c412f1f1135f398f2c2082",
																			"typeString": "literal_string \"SafeBEP20: BEP20 operation did not succeed\""
																		}
																	],
																	"id": 1468,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-18,
																		-18
																	],
																	"referencedDeclaration": -18,
																	"src": "3924:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3924:85:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1478,
															"nodeType": "ExpressionStatement",
															"src": "3924:85:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1446,
										"nodeType": "StructuredDocumentation",
										"src": "2871:377:9",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 1482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1482,
												"src": "3283:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBEP20_$338",
													"typeString": "contract IBEP20"
												},
												"typeName": {
													"contractScope": null,
													"id": 1447,
													"name": "IBEP20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 338,
													"src": "3283:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IBEP20_$338",
														"typeString": "contract IBEP20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1450,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1482,
												"src": "3297:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1449,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3297:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3282:33:9"
									},
									"returnParameters": {
										"id": 1452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3324:0:9"
									},
									"scope": 1483,
									"src": "3254:774:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1484,
							"src": "627:3404:9"
						}
					],
					"src": "35:3996:9"
				},
				"id": 9
			}
		}
	}
}