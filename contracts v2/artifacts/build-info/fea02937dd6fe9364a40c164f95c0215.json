{
	"id": "fea02937dd6fe9364a40c164f95c0215",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ProtocolEarnings.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\nimport \"./access/Ownable.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./math/SafeMath.sol\";\n\ncontract ProtocolEarnings is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  address public dividendsWallet;\n  address public buybackAndBurnWallet;\n  address public operatingFundsWallet;\n\n  uint256 public constant sharePrecision = 10000;\n  uint256 public dividendsShare = 6250;\n  uint256 public buybackAndBurnShare = 2500;\n\n  constructor (address dividends, address buyback, address operating) {\n    dividendsWallet = dividends;\n    buybackAndBurnWallet = buyback;\n    operatingFundsWallet = operating;\n  }\n\n  event Distribute(IERC20 token, uint256 dividendsAmount, uint256 buybackAndBurnAmount, uint256 operatingAmount);\n\n  function updateBuybackAndBurnWallet(address newWallet) external onlyOwner {\n    require(newWallet != address(0), \"zero address\");\n    buybackAndBurnWallet = newWallet;\n  }\n\n  function updateDevelopmentFundsWallet(address newWallet) external onlyOwner {\n    require(newWallet != address(0), \"zero address\");\n    operatingFundsWallet = newWallet;\n  }\n\n  function updateDividendsWallet(address newWallet) external onlyOwner {\n    require(newWallet != address(0), \"zero address\");\n    dividendsWallet = newWallet;\n  }\n\n  function distributeShares(IERC20 token) external onlyOwner {\n    uint256 _balance = token.balanceOf(address(this));\n\n    uint256 dividendsAmount = _balance.mul(dividendsShare).div(sharePrecision);\n    uint256 buybackAndBurnAmount = _balance.mul(buybackAndBurnShare).div(sharePrecision);\n    uint256 operatingFundsAmount = _balance.sub(dividendsAmount).sub(buybackAndBurnAmount);\n\n    if(dividendsAmount > 0) token.safeTransfer(dividendsWallet, dividendsAmount);\n    if(buybackAndBurnAmount > 0) token.safeTransfer(buybackAndBurnWallet, buybackAndBurnAmount);\n    if(operatingFundsAmount > 0) token.safeTransfer(operatingFundsWallet, operatingFundsAmount);\n\n    emit Distribute(token, dividendsAmount, buybackAndBurnAmount, operatingFundsAmount);\n  }\n\n  function updateShares(uint256 dividendsShare_, uint256 buybackAndBurnShare_) external onlyOwner {\n    require(dividendsShare_.add(buybackAndBurnShare_) <= sharePrecision, \"invalid shares\");\n    dividendsShare = dividendsShare_;\n    buybackAndBurnShare = buybackAndBurnShare_;\n  }\n\n  function safeEmergencyWithdraw(IERC20 token, address to) external onlyOwner {\n    token.safeTransfer(to, token.balanceOf(address(this)));\n  }\n}\n"
			},
			"contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}"
			},
			"contracts/libraries/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../math/SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.7.6;\n\nimport \"../libraries/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
			},
			"contracts/libraries/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"contracts/interfaces/IERC20.sol": {
				"content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
			},
			"contracts/libraries/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/ProtocolEarnings.sol": {
				"ProtocolEarnings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "dividends",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "buyback",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operating",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "dividendsAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "buybackAndBurnAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "operatingAmount",
									"type": "uint256"
								}
							],
							"name": "Distribute",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "buybackAndBurnShare",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "buybackAndBurnWallet",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								}
							],
							"name": "distributeShares",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dividendsShare",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dividendsWallet",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "operatingFundsWallet",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "safeEmergencyWithdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sharePrecision",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newWallet",
									"type": "address"
								}
							],
							"name": "updateBuybackAndBurnWallet",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newWallet",
									"type": "address"
								}
							],
							"name": "updateDevelopmentFundsWallet",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newWallet",
									"type": "address"
								}
							],
							"name": "updateDividendsWallet",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "dividendsShare_",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "buybackAndBurnShare_",
									"type": "uint256"
								}
							],
							"name": "updateShares",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ProtocolEarnings.sol\":155:2501  contract ProtocolEarnings is Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/ProtocolEarnings.sol\":452:456  6250 */\n  0x186a\n    /* \"contracts/ProtocolEarnings.sol\":420:456  uint256 public dividendsShare = 6250 */\n  0x04\n  sstore\n    /* \"contracts/ProtocolEarnings.sol\":497:501  2500 */\n  0x09c4\n    /* \"contracts/ProtocolEarnings.sol\":460:501  uint256 public buybackAndBurnShare = 2500 */\n  0x05\n  sstore\n    /* \"contracts/ProtocolEarnings.sol\":506:686  constructor (address dividends, address buyback, address operating) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x60\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  pop\n  pop\n  pop\n    /* \"contracts/access/Ownable.sol\":940:972  _transferOwnership(_msgSender()) */\n  tag_6\n    /* \"contracts/access/Ownable.sol\":959:971  _msgSender() */\n  tag_7\n    /* \"contracts/access/Ownable.sol\":959:969  _msgSender */\n  shl(0x20, tag_8)\n    /* \"contracts/access/Ownable.sol\":959:971  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_7:\n    /* \"contracts/access/Ownable.sol\":940:958  _transferOwnership */\n  shl(0x20, tag_9)\n    /* \"contracts/access/Ownable.sol\":940:972  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_6:\n    /* \"contracts/ProtocolEarnings.sol\":598:607  dividends */\n  dup3\n    /* \"contracts/ProtocolEarnings.sol\":580:595  dividendsWallet */\n  0x01\n  0x00\n    /* \"contracts/ProtocolEarnings.sol\":580:607  dividendsWallet = dividends */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/ProtocolEarnings.sol\":636:643  buyback */\n  dup2\n    /* \"contracts/ProtocolEarnings.sol\":613:633  buybackAndBurnWallet */\n  0x02\n  0x00\n    /* \"contracts/ProtocolEarnings.sol\":613:643  buybackAndBurnWallet = buyback */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/ProtocolEarnings.sol\":672:681  operating */\n  dup1\n    /* \"contracts/ProtocolEarnings.sol\":649:669  operatingFundsWallet */\n  0x03\n  0x00\n    /* \"contracts/ProtocolEarnings.sol\":649:681  operatingFundsWallet = operating */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/ProtocolEarnings.sol\":506:686  constructor (address dividends, address buyback, address operating) {... */\n  pop\n  pop\n  pop\n    /* \"contracts/ProtocolEarnings.sol\":155:2501  contract ProtocolEarnings is Ownable {... */\n  jump(tag_11)\n    /* \"contracts/libraries/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\ntag_8:\n    /* \"contracts/libraries/Context.sol\":651:666  address payable */\n  0x00\n    /* \"contracts/libraries/Context.sol\":685:695  msg.sender */\n  caller\n    /* \"contracts/libraries/Context.sol\":678:695  return msg.sender */\n  swap1\n  pop\n    /* \"contracts/libraries/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n  swap1\n  jump\t// out\n    /* \"contracts/access/Ownable.sol\":2430:2617  function _transferOwnership(address newOwner) internal virtual {... */\ntag_9:\n    /* \"contracts/access/Ownable.sol\":2503:2519  address oldOwner */\n  0x00\n    /* \"contracts/access/Ownable.sol\":2522:2528  _owner */\n  dup1\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/access/Ownable.sol\":2503:2528  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"contracts/access/Ownable.sol\":2547:2555  newOwner */\n  dup2\n    /* \"contracts/access/Ownable.sol\":2538:2544  _owner */\n  0x00\n  dup1\n    /* \"contracts/access/Ownable.sol\":2538:2555  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/access/Ownable.sol\":2601:2609  newOwner */\n  dup2\n    /* \"contracts/access/Ownable.sol\":2570:2610  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/access/Ownable.sol\":2591:2599  oldOwner */\n  dup2\n    /* \"contracts/access/Ownable.sol\":2570:2610  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"contracts/access/Ownable.sol\":2430:2617  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/ProtocolEarnings.sol\":155:2501  contract ProtocolEarnings is Ownable {... */\ntag_11:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ProtocolEarnings.sol\":155:2501  contract ProtocolEarnings is Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_18\n      jumpi\n      dup1\n      0x9bafaaa4\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x9bafaaa4\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xdc308193\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xe2c8dd34\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_17\n      jumpi\n      jump(tag_2)\n    tag_19:\n      dup1\n      0x715018a6\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x7500412b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x86df07ba\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_18:\n      dup1\n      0x327de06a\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x327de06a\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x3f428adc\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x541effc3\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x64790208\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x0481531d\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x1efee6be\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2ab8fc1e\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ProtocolEarnings.sol\":805:976  function updateBuybackAndBurnWallet(address newWallet) external onlyOwner {... */\n    tag_3:\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_23\n      jump\t// in\n    tag_21:\n      stop\n        /* \"contracts/ProtocolEarnings.sol\":370:416  uint256 public constant sharePrecision = 10000 */\n    tag_4:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ProtocolEarnings.sol\":330:365  address public operatingFundsWallet */\n    tag_5:\n      tag_26\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ProtocolEarnings.sol\":1157:1318  function updateDividendsWallet(address newWallet) external onlyOwner {... */\n    tag_6:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_29\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_30\n      jump\t// in\n    tag_28:\n      stop\n        /* \"contracts/ProtocolEarnings.sol\":420:456  uint256 public dividendsShare = 6250 */\n    tag_7:\n      tag_31\n      tag_32\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ProtocolEarnings.sol\":460:501  uint256 public buybackAndBurnShare = 2500 */\n    tag_8:\n      tag_33\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ProtocolEarnings.sol\":2075:2354  function updateShares(uint256 dividendsShare_, uint256 buybackAndBurnShare_) external onlyOwner {... */\n    tag_9:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_37\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/access/Ownable.sol\":1828:1929  function renounceOwnership() public virtual onlyOwner {... */\n    tag_10:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      stop\n        /* \"contracts/ProtocolEarnings.sol\":2358:2499  function safeEmergencyWithdraw(IERC20 token, address to) external onlyOwner {... */\n    tag_11:\n      tag_40\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_41\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_41:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_42\n      jump\t// in\n    tag_40:\n      stop\n        /* \"contracts/ProtocolEarnings.sol\":980:1153  function updateDevelopmentFundsWallet(address newWallet) external onlyOwner {... */\n    tag_12:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_45\n      jump\t// in\n    tag_43:\n      stop\n        /* \"contracts/access/Ownable.sol\":1205:1290  function owner() public view virtual returns (address) {... */\n    tag_13:\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ProtocolEarnings.sol\":1322:2071  function distributeShares(IERC20 token) external onlyOwner {... */\n    tag_14:\n      tag_48\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_50\n      jump\t// in\n    tag_48:\n      stop\n        /* \"contracts/ProtocolEarnings.sol\":291:326  address public buybackAndBurnWallet */\n    tag_15:\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ProtocolEarnings.sol\":257:287  address public dividendsWallet */\n    tag_16:\n      tag_53\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/access/Ownable.sol\":2078:2276  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_17:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_56\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_56:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_57\n      jump\t// in\n    tag_55:\n      stop\n        /* \"contracts/ProtocolEarnings.sol\":805:976  function updateBuybackAndBurnWallet(address newWallet) external onlyOwner {... */\n    tag_23:\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      tag_59\n        /* \"contracts/access/Ownable.sol\":1098:1109  _checkOwner */\n      tag_60\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      jump\t// in\n    tag_59:\n        /* \"contracts/ProtocolEarnings.sol\":914:915  0 */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":893:916  newWallet != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ProtocolEarnings.sol\":893:902  newWallet */\n      dup2\n        /* \"contracts/ProtocolEarnings.sol\":893:916  newWallet != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/ProtocolEarnings.sol\":885:933  require(newWallet != address(0), \"zero address\") */\n      tag_62\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0c\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x7a65726f20616464726573730000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_62:\n        /* \"contracts/ProtocolEarnings.sol\":962:971  newWallet */\n      dup1\n        /* \"contracts/ProtocolEarnings.sol\":939:959  buybackAndBurnWallet */\n      0x02\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":939:971  buybackAndBurnWallet = newWallet */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":805:976  function updateBuybackAndBurnWallet(address newWallet) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":370:416  uint256 public constant sharePrecision = 10000 */\n    tag_25:\n        /* \"contracts/ProtocolEarnings.sol\":411:416  10000 */\n      0x2710\n        /* \"contracts/ProtocolEarnings.sol\":370:416  uint256 public constant sharePrecision = 10000 */\n      dup2\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":330:365  address public operatingFundsWallet */\n    tag_27:\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":1157:1318  function updateDividendsWallet(address newWallet) external onlyOwner {... */\n    tag_30:\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      tag_64\n        /* \"contracts/access/Ownable.sol\":1098:1109  _checkOwner */\n      tag_60\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      jump\t// in\n    tag_64:\n        /* \"contracts/ProtocolEarnings.sol\":1261:1262  0 */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1240:1263  newWallet != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ProtocolEarnings.sol\":1240:1249  newWallet */\n      dup2\n        /* \"contracts/ProtocolEarnings.sol\":1240:1263  newWallet != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/ProtocolEarnings.sol\":1232:1280  require(newWallet != address(0), \"zero address\") */\n      tag_66\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0c\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x7a65726f20616464726573730000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_66:\n        /* \"contracts/ProtocolEarnings.sol\":1304:1313  newWallet */\n      dup1\n        /* \"contracts/ProtocolEarnings.sol\":1286:1301  dividendsWallet */\n      0x01\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1286:1313  dividendsWallet = newWallet */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":1157:1318  function updateDividendsWallet(address newWallet) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":420:456  uint256 public dividendsShare = 6250 */\n    tag_32:\n      sload(0x04)\n      dup2\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":460:501  uint256 public buybackAndBurnShare = 2500 */\n    tag_34:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":2075:2354  function updateShares(uint256 dividendsShare_, uint256 buybackAndBurnShare_) external onlyOwner {... */\n    tag_37:\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      tag_68\n        /* \"contracts/access/Ownable.sol\":1098:1109  _checkOwner */\n      tag_60\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      jump\t// in\n    tag_68:\n        /* \"contracts/ProtocolEarnings.sol\":411:416  10000 */\n      0x2710\n        /* \"contracts/ProtocolEarnings.sol\":2185:2226  dividendsShare_.add(buybackAndBurnShare_) */\n      tag_70\n        /* \"contracts/ProtocolEarnings.sol\":2205:2225  buybackAndBurnShare_ */\n      dup3\n        /* \"contracts/ProtocolEarnings.sol\":2185:2200  dividendsShare_ */\n      dup5\n        /* \"contracts/ProtocolEarnings.sol\":2185:2204  dividendsShare_.add */\n      tag_71\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":2185:2226  dividendsShare_.add(buybackAndBurnShare_) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_70:\n        /* \"contracts/ProtocolEarnings.sol\":2185:2244  dividendsShare_.add(buybackAndBurnShare_) <= sharePrecision */\n      gt\n      iszero\n        /* \"contracts/ProtocolEarnings.sol\":2177:2263  require(dividendsShare_.add(buybackAndBurnShare_) <= sharePrecision, \"invalid shares\") */\n      tag_72\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x696e76616c696420736861726573000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_72:\n        /* \"contracts/ProtocolEarnings.sol\":2286:2301  dividendsShare_ */\n      dup2\n        /* \"contracts/ProtocolEarnings.sol\":2269:2283  dividendsShare */\n      0x04\n        /* \"contracts/ProtocolEarnings.sol\":2269:2301  dividendsShare = dividendsShare_ */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":2329:2349  buybackAndBurnShare_ */\n      dup1\n        /* \"contracts/ProtocolEarnings.sol\":2307:2326  buybackAndBurnShare */\n      0x05\n        /* \"contracts/ProtocolEarnings.sol\":2307:2349  buybackAndBurnShare = buybackAndBurnShare_ */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":2075:2354  function updateShares(uint256 dividendsShare_, uint256 buybackAndBurnShare_) external onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/access/Ownable.sol\":1828:1929  function renounceOwnership() public virtual onlyOwner {... */\n    tag_39:\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      tag_74\n        /* \"contracts/access/Ownable.sol\":1098:1109  _checkOwner */\n      tag_60\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      jump\t// in\n    tag_74:\n        /* \"contracts/access/Ownable.sol\":1892:1922  _transferOwnership(address(0)) */\n      tag_76\n        /* \"contracts/access/Ownable.sol\":1919:1920  0 */\n      0x00\n        /* \"contracts/access/Ownable.sol\":1892:1910  _transferOwnership */\n      tag_77\n        /* \"contracts/access/Ownable.sol\":1892:1922  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_76:\n        /* \"contracts/access/Ownable.sol\":1828:1929  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":2358:2499  function safeEmergencyWithdraw(IERC20 token, address to) external onlyOwner {... */\n    tag_42:\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      tag_79\n        /* \"contracts/access/Ownable.sol\":1098:1109  _checkOwner */\n      tag_60\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      jump\t// in\n    tag_79:\n        /* \"contracts/ProtocolEarnings.sol\":2440:2494  token.safeTransfer(to, token.balanceOf(address(this))) */\n      tag_81\n        /* \"contracts/ProtocolEarnings.sol\":2459:2461  to */\n      dup2\n        /* \"contracts/ProtocolEarnings.sol\":2463:2468  token */\n      dup4\n        /* \"contracts/ProtocolEarnings.sol\":2463:2478  token.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/ProtocolEarnings.sol\":2487:2491  this */\n      address\n        /* \"contracts/ProtocolEarnings.sol\":2463:2493  token.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_82\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_82:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_84\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_84:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_85:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":2440:2445  token */\n      dup5\n        /* \"contracts/ProtocolEarnings.sol\":2440:2458  token.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_86\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":2440:2494  token.safeTransfer(to, token.balanceOf(address(this))) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_81:\n        /* \"contracts/ProtocolEarnings.sol\":2358:2499  function safeEmergencyWithdraw(IERC20 token, address to) external onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":980:1153  function updateDevelopmentFundsWallet(address newWallet) external onlyOwner {... */\n    tag_45:\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      tag_88\n        /* \"contracts/access/Ownable.sol\":1098:1109  _checkOwner */\n      tag_60\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      jump\t// in\n    tag_88:\n        /* \"contracts/ProtocolEarnings.sol\":1091:1092  0 */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1070:1093  newWallet != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ProtocolEarnings.sol\":1070:1079  newWallet */\n      dup2\n        /* \"contracts/ProtocolEarnings.sol\":1070:1093  newWallet != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/ProtocolEarnings.sol\":1062:1110  require(newWallet != address(0), \"zero address\") */\n      tag_90\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0c\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x7a65726f20616464726573730000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_90:\n        /* \"contracts/ProtocolEarnings.sol\":1139:1148  newWallet */\n      dup1\n        /* \"contracts/ProtocolEarnings.sol\":1116:1136  operatingFundsWallet */\n      0x03\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1116:1148  operatingFundsWallet = newWallet */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":980:1153  function updateDevelopmentFundsWallet(address newWallet) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/access/Ownable.sol\":1205:1290  function owner() public view virtual returns (address) {... */\n    tag_47:\n        /* \"contracts/access/Ownable.sol\":1251:1258  address */\n      0x00\n        /* \"contracts/access/Ownable.sol\":1277:1283  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/access/Ownable.sol\":1270:1283  return _owner */\n      swap1\n      pop\n        /* \"contracts/access/Ownable.sol\":1205:1290  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":1322:2071  function distributeShares(IERC20 token) external onlyOwner {... */\n    tag_50:\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      tag_93\n        /* \"contracts/access/Ownable.sol\":1098:1109  _checkOwner */\n      tag_60\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      jump\t// in\n    tag_93:\n        /* \"contracts/ProtocolEarnings.sol\":1387:1403  uint256 _balance */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1406:1411  token */\n      dup2\n        /* \"contracts/ProtocolEarnings.sol\":1406:1421  token.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/ProtocolEarnings.sol\":1430:1434  this */\n      address\n        /* \"contracts/ProtocolEarnings.sol\":1406:1436  token.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_97\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_97:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_98\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_98:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":1387:1436  uint256 _balance = token.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":1443:1466  uint256 dividendsAmount */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1469:1517  _balance.mul(dividendsShare).div(sharePrecision) */\n      tag_99\n        /* \"contracts/ProtocolEarnings.sol\":411:416  10000 */\n      0x2710\n        /* \"contracts/ProtocolEarnings.sol\":1469:1497  _balance.mul(dividendsShare) */\n      tag_100\n        /* \"contracts/ProtocolEarnings.sol\":1482:1496  dividendsShare */\n      sload(0x04)\n        /* \"contracts/ProtocolEarnings.sol\":1469:1477  _balance */\n      dup6\n        /* \"contracts/ProtocolEarnings.sol\":1469:1481  _balance.mul */\n      tag_101\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1469:1497  _balance.mul(dividendsShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_100:\n        /* \"contracts/ProtocolEarnings.sol\":1469:1501  _balance.mul(dividendsShare).div */\n      tag_102\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1469:1517  _balance.mul(dividendsShare).div(sharePrecision) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_99:\n        /* \"contracts/ProtocolEarnings.sol\":1443:1517  uint256 dividendsAmount = _balance.mul(dividendsShare).div(sharePrecision) */\n      swap1\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":1523:1551  uint256 buybackAndBurnAmount */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1554:1607  _balance.mul(buybackAndBurnShare).div(sharePrecision) */\n      tag_103\n        /* \"contracts/ProtocolEarnings.sol\":411:416  10000 */\n      0x2710\n        /* \"contracts/ProtocolEarnings.sol\":1554:1587  _balance.mul(buybackAndBurnShare) */\n      tag_104\n        /* \"contracts/ProtocolEarnings.sol\":1567:1586  buybackAndBurnShare */\n      sload(0x05)\n        /* \"contracts/ProtocolEarnings.sol\":1554:1562  _balance */\n      dup7\n        /* \"contracts/ProtocolEarnings.sol\":1554:1566  _balance.mul */\n      tag_101\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1554:1587  _balance.mul(buybackAndBurnShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_104:\n        /* \"contracts/ProtocolEarnings.sol\":1554:1591  _balance.mul(buybackAndBurnShare).div */\n      tag_102\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1554:1607  _balance.mul(buybackAndBurnShare).div(sharePrecision) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_103:\n        /* \"contracts/ProtocolEarnings.sol\":1523:1607  uint256 buybackAndBurnAmount = _balance.mul(buybackAndBurnShare).div(sharePrecision) */\n      swap1\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":1613:1641  uint256 operatingFundsAmount */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1644:1699  _balance.sub(dividendsAmount).sub(buybackAndBurnAmount) */\n      tag_105\n        /* \"contracts/ProtocolEarnings.sol\":1678:1698  buybackAndBurnAmount */\n      dup3\n        /* \"contracts/ProtocolEarnings.sol\":1644:1673  _balance.sub(dividendsAmount) */\n      tag_106\n        /* \"contracts/ProtocolEarnings.sol\":1657:1672  dividendsAmount */\n      dup6\n        /* \"contracts/ProtocolEarnings.sol\":1644:1652  _balance */\n      dup8\n        /* \"contracts/ProtocolEarnings.sol\":1644:1656  _balance.sub */\n      tag_107\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1644:1673  _balance.sub(dividendsAmount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_106:\n        /* \"contracts/ProtocolEarnings.sol\":1644:1677  _balance.sub(dividendsAmount).sub */\n      tag_107\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1644:1699  _balance.sub(dividendsAmount).sub(buybackAndBurnAmount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_105:\n        /* \"contracts/ProtocolEarnings.sol\":1613:1699  uint256 operatingFundsAmount = _balance.sub(dividendsAmount).sub(buybackAndBurnAmount) */\n      swap1\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":1727:1728  0 */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1709:1724  dividendsAmount */\n      dup4\n        /* \"contracts/ProtocolEarnings.sol\":1709:1728  dividendsAmount > 0 */\n      gt\n        /* \"contracts/ProtocolEarnings.sol\":1706:1782  if(dividendsAmount > 0) token.safeTransfer(dividendsWallet, dividendsAmount) */\n      iszero\n      tag_108\n      jumpi\n        /* \"contracts/ProtocolEarnings.sol\":1730:1782  token.safeTransfer(dividendsWallet, dividendsAmount) */\n      tag_109\n        /* \"contracts/ProtocolEarnings.sol\":1749:1764  dividendsWallet */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ProtocolEarnings.sol\":1766:1781  dividendsAmount */\n      dup5\n        /* \"contracts/ProtocolEarnings.sol\":1730:1735  token */\n      dup8\n        /* \"contracts/ProtocolEarnings.sol\":1730:1748  token.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_86\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1730:1782  token.safeTransfer(dividendsWallet, dividendsAmount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_109:\n        /* \"contracts/ProtocolEarnings.sol\":1706:1782  if(dividendsAmount > 0) token.safeTransfer(dividendsWallet, dividendsAmount) */\n    tag_108:\n        /* \"contracts/ProtocolEarnings.sol\":1814:1815  0 */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1791:1811  buybackAndBurnAmount */\n      dup3\n        /* \"contracts/ProtocolEarnings.sol\":1791:1815  buybackAndBurnAmount > 0 */\n      gt\n        /* \"contracts/ProtocolEarnings.sol\":1788:1879  if(buybackAndBurnAmount > 0) token.safeTransfer(buybackAndBurnWallet, buybackAndBurnAmount) */\n      iszero\n      tag_110\n      jumpi\n        /* \"contracts/ProtocolEarnings.sol\":1817:1879  token.safeTransfer(buybackAndBurnWallet, buybackAndBurnAmount) */\n      tag_111\n        /* \"contracts/ProtocolEarnings.sol\":1836:1856  buybackAndBurnWallet */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ProtocolEarnings.sol\":1858:1878  buybackAndBurnAmount */\n      dup4\n        /* \"contracts/ProtocolEarnings.sol\":1817:1822  token */\n      dup8\n        /* \"contracts/ProtocolEarnings.sol\":1817:1835  token.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_86\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1817:1879  token.safeTransfer(buybackAndBurnWallet, buybackAndBurnAmount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_111:\n        /* \"contracts/ProtocolEarnings.sol\":1788:1879  if(buybackAndBurnAmount > 0) token.safeTransfer(buybackAndBurnWallet, buybackAndBurnAmount) */\n    tag_110:\n        /* \"contracts/ProtocolEarnings.sol\":1911:1912  0 */\n      0x00\n        /* \"contracts/ProtocolEarnings.sol\":1888:1908  operatingFundsAmount */\n      dup2\n        /* \"contracts/ProtocolEarnings.sol\":1888:1912  operatingFundsAmount > 0 */\n      gt\n        /* \"contracts/ProtocolEarnings.sol\":1885:1976  if(operatingFundsAmount > 0) token.safeTransfer(operatingFundsWallet, operatingFundsAmount) */\n      iszero\n      tag_112\n      jumpi\n        /* \"contracts/ProtocolEarnings.sol\":1914:1976  token.safeTransfer(operatingFundsWallet, operatingFundsAmount) */\n      tag_113\n        /* \"contracts/ProtocolEarnings.sol\":1933:1953  operatingFundsWallet */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ProtocolEarnings.sol\":1955:1975  operatingFundsAmount */\n      dup3\n        /* \"contracts/ProtocolEarnings.sol\":1914:1919  token */\n      dup8\n        /* \"contracts/ProtocolEarnings.sol\":1914:1932  token.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_86\n      swap1\n        /* \"contracts/ProtocolEarnings.sol\":1914:1976  token.safeTransfer(operatingFundsWallet, operatingFundsAmount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_113:\n        /* \"contracts/ProtocolEarnings.sol\":1885:1976  if(operatingFundsAmount > 0) token.safeTransfer(operatingFundsWallet, operatingFundsAmount) */\n    tag_112:\n        /* \"contracts/ProtocolEarnings.sol\":1988:2066  Distribute(token, dividendsAmount, buybackAndBurnAmount, operatingFundsAmount) */\n      0x899f4b1088197f1163efe7b38e0e7ce07a6b129dadf58829dd71fae27f1f2374\n        /* \"contracts/ProtocolEarnings.sol\":1999:2004  token */\n      dup6\n        /* \"contracts/ProtocolEarnings.sol\":2006:2021  dividendsAmount */\n      dup5\n        /* \"contracts/ProtocolEarnings.sol\":2023:2043  buybackAndBurnAmount */\n      dup5\n        /* \"contracts/ProtocolEarnings.sol\":2045:2065  operatingFundsAmount */\n      dup5\n        /* \"contracts/ProtocolEarnings.sol\":1988:2066  Distribute(token, dividendsAmount, buybackAndBurnAmount, operatingFundsAmount) */\n      mload(0x40)\n      dup1\n      dup6\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/access/Ownable.sol\":1121:1122  _ */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/ProtocolEarnings.sol\":1322:2071  function distributeShares(IERC20 token) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":291:326  address public buybackAndBurnWallet */\n    tag_52:\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ProtocolEarnings.sol\":257:287  address public dividendsWallet */\n    tag_54:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/access/Ownable.sol\":2078:2276  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_57:\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      tag_115\n        /* \"contracts/access/Ownable.sol\":1098:1109  _checkOwner */\n      tag_60\n        /* \"contracts/access/Ownable.sol\":1098:1111  _checkOwner() */\n      jump\t// in\n    tag_115:\n        /* \"contracts/access/Ownable.sol\":2186:2187  0 */\n      0x00\n        /* \"contracts/access/Ownable.sol\":2166:2188  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/access/Ownable.sol\":2166:2174  newOwner */\n      dup2\n        /* \"contracts/access/Ownable.sol\":2166:2188  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/access/Ownable.sol\":2158:2231  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_117\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_117:\n        /* \"contracts/access/Ownable.sol\":2241:2269  _transferOwnership(newOwner) */\n      tag_118\n        /* \"contracts/access/Ownable.sol\":2260:2268  newOwner */\n      dup2\n        /* \"contracts/access/Ownable.sol\":2241:2259  _transferOwnership */\n      tag_77\n        /* \"contracts/access/Ownable.sol\":2241:2269  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_118:\n        /* \"contracts/access/Ownable.sol\":2078:2276  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/access/Ownable.sol\":1363:1493  function _checkOwner() internal view virtual {... */\n    tag_60:\n        /* \"contracts/access/Ownable.sol\":1437:1449  _msgSender() */\n      tag_120\n        /* \"contracts/access/Ownable.sol\":1437:1447  _msgSender */\n      tag_121\n        /* \"contracts/access/Ownable.sol\":1437:1449  _msgSender() */\n      jump\t// in\n    tag_120:\n        /* \"contracts/access/Ownable.sol\":1426:1449  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/access/Ownable.sol\":1426:1433  owner() */\n      tag_122\n        /* \"contracts/access/Ownable.sol\":1426:1431  owner */\n      tag_47\n        /* \"contracts/access/Ownable.sol\":1426:1433  owner() */\n      jump\t// in\n    tag_122:\n        /* \"contracts/access/Ownable.sol\":1426:1449  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/access/Ownable.sol\":1418:1486  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_123:\n        /* \"contracts/access/Ownable.sol\":1363:1493  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_71:\n        /* \"contracts/math/SafeMath.sol\":2740:2747  uint256 */\n      0x00\n        /* \"contracts/math/SafeMath.sol\":2759:2768  uint256 c */\n      dup1\n        /* \"contracts/math/SafeMath.sol\":2775:2776  b */\n      dup3\n        /* \"contracts/math/SafeMath.sol\":2771:2772  a */\n      dup5\n        /* \"contracts/math/SafeMath.sol\":2771:2776  a + b */\n      add\n        /* \"contracts/math/SafeMath.sol\":2759:2776  uint256 c = a + b */\n      swap1\n      pop\n        /* \"contracts/math/SafeMath.sol\":2799:2800  a */\n      dup4\n        /* \"contracts/math/SafeMath.sol\":2794:2795  c */\n      dup2\n        /* \"contracts/math/SafeMath.sol\":2794:2800  c >= a */\n      lt\n      iszero\n        /* \"contracts/math/SafeMath.sol\":2786:2832  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_125:\n        /* \"contracts/math/SafeMath.sol\":2849:2850  c */\n      dup1\n        /* \"contracts/math/SafeMath.sol\":2842:2850  return c */\n      swap2\n      pop\n      pop\n        /* \"contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/access/Ownable.sol\":2430:2617  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_77:\n        /* \"contracts/access/Ownable.sol\":2503:2519  address oldOwner */\n      0x00\n        /* \"contracts/access/Ownable.sol\":2522:2528  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/access/Ownable.sol\":2503:2528  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"contracts/access/Ownable.sol\":2547:2555  newOwner */\n      dup2\n        /* \"contracts/access/Ownable.sol\":2538:2544  _owner */\n      0x00\n      dup1\n        /* \"contracts/access/Ownable.sol\":2538:2555  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/access/Ownable.sol\":2601:2609  newOwner */\n      dup2\n        /* \"contracts/access/Ownable.sol\":2570:2610  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/access/Ownable.sol\":2591:2599  oldOwner */\n      dup2\n        /* \"contracts/access/Ownable.sol\":2570:2610  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/access/Ownable.sol\":2430:2617  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/SafeERC20.sol\":695:870  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_86:\n        /* \"contracts/libraries/SafeERC20.sol\":777:863  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_128\n        /* \"contracts/libraries/SafeERC20.sol\":797:802  token */\n      dup4\n        /* \"contracts/libraries/SafeERC20.sol\":827:850  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"contracts/libraries/SafeERC20.sol\":852:854  to */\n      dup5\n        /* \"contracts/libraries/SafeERC20.sol\":856:861  value */\n      dup5\n        /* \"contracts/libraries/SafeERC20.sol\":804:862  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/SafeERC20.sol\":777:796  _callOptionalReturn */\n      tag_129\n        /* \"contracts/libraries/SafeERC20.sol\":777:863  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_128:\n        /* \"contracts/libraries/SafeERC20.sol\":695:870  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/math/SafeMath.sol\":3530:3745  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_101:\n        /* \"contracts/math/SafeMath.sol\":3588:3595  uint256 */\n      0x00\n        /* \"contracts/math/SafeMath.sol\":3616:3617  0 */\n      dup1\n        /* \"contracts/math/SafeMath.sol\":3611:3612  a */\n      dup4\n        /* \"contracts/math/SafeMath.sol\":3611:3617  a == 0 */\n      eq\n        /* \"contracts/math/SafeMath.sol\":3607:3627  if (a == 0) return 0 */\n      iszero\n      tag_131\n      jumpi\n        /* \"contracts/math/SafeMath.sol\":3626:3627  0 */\n      0x00\n        /* \"contracts/math/SafeMath.sol\":3619:3627  return 0 */\n      swap1\n      pop\n      jump(tag_130)\n        /* \"contracts/math/SafeMath.sol\":3607:3627  if (a == 0) return 0 */\n    tag_131:\n        /* \"contracts/math/SafeMath.sol\":3637:3646  uint256 c */\n      0x00\n        /* \"contracts/math/SafeMath.sol\":3653:3654  b */\n      dup3\n        /* \"contracts/math/SafeMath.sol\":3649:3650  a */\n      dup5\n        /* \"contracts/math/SafeMath.sol\":3649:3654  a * b */\n      mul\n        /* \"contracts/math/SafeMath.sol\":3637:3654  uint256 c = a * b */\n      swap1\n      pop\n        /* \"contracts/math/SafeMath.sol\":3681:3682  b */\n      dup3\n        /* \"contracts/math/SafeMath.sol\":3676:3677  a */\n      dup5\n        /* \"contracts/math/SafeMath.sol\":3672:3673  c */\n      dup3\n        /* \"contracts/math/SafeMath.sol\":3672:3677  c / a */\n      dup2\n      tag_132\n      jumpi\n      invalid\n    tag_132:\n      div\n        /* \"contracts/math/SafeMath.sol\":3672:3682  c / a == b */\n      eq\n        /* \"contracts/math/SafeMath.sol\":3664:3720  require(c / a == b, \"SafeMath: multiplication overflow\") */\n      tag_133\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x21\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3\n      0x21\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_133:\n        /* \"contracts/math/SafeMath.sol\":3737:3738  c */\n      dup1\n        /* \"contracts/math/SafeMath.sol\":3730:3738  return c */\n      swap2\n      pop\n      pop\n        /* \"contracts/math/SafeMath.sol\":3530:3745  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_130:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/math/SafeMath.sol\":4209:4359  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_102:\n        /* \"contracts/math/SafeMath.sol\":4267:4274  uint256 */\n      0x00\n        /* \"contracts/math/SafeMath.sol\":4298:4299  0 */\n      dup1\n        /* \"contracts/math/SafeMath.sol\":4294:4295  b */\n      dup3\n        /* \"contracts/math/SafeMath.sol\":4294:4299  b > 0 */\n      gt\n        /* \"contracts/math/SafeMath.sol\":4286:4330  require(b > 0, \"SafeMath: division by zero\") */\n      tag_135\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206469766973696f6e206279207a65726f000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_135:\n        /* \"contracts/math/SafeMath.sol\":4351:4352  b */\n      dup2\n        /* \"contracts/math/SafeMath.sol\":4347:4348  a */\n      dup4\n        /* \"contracts/math/SafeMath.sol\":4347:4352  a / b */\n      dup2\n      tag_136\n      jumpi\n      invalid\n    tag_136:\n      div\n        /* \"contracts/math/SafeMath.sol\":4340:4352  return a / b */\n      swap1\n      pop\n        /* \"contracts/math/SafeMath.sol\":4209:4359  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/math/SafeMath.sol\":3128:3283  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_107:\n        /* \"contracts/math/SafeMath.sol\":3186:3193  uint256 */\n      0x00\n        /* \"contracts/math/SafeMath.sol\":3218:3219  a */\n      dup3\n        /* \"contracts/math/SafeMath.sol\":3213:3214  b */\n      dup3\n        /* \"contracts/math/SafeMath.sol\":3213:3219  b <= a */\n      gt\n      iszero\n        /* \"contracts/math/SafeMath.sol\":3205:3254  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_138\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_138:\n        /* \"contracts/math/SafeMath.sol\":3275:3276  b */\n      dup2\n        /* \"contracts/math/SafeMath.sol\":3271:3272  a */\n      dup4\n        /* \"contracts/math/SafeMath.sol\":3271:3276  a - b */\n      sub\n        /* \"contracts/math/SafeMath.sol\":3264:3276  return a - b */\n      swap1\n      pop\n        /* \"contracts/math/SafeMath.sol\":3128:3283  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_121:\n        /* \"contracts/libraries/Context.sol\":651:666  address payable */\n      0x00\n        /* \"contracts/libraries/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"contracts/libraries/Context.sol\":678:695  return msg.sender */\n      swap1\n      pop\n        /* \"contracts/libraries/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/libraries/SafeERC20.sol\":2958:3709  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_129:\n        /* \"contracts/libraries/SafeERC20.sol\":3377:3400  bytes memory returndata */\n      0x00\n        /* \"contracts/libraries/SafeERC20.sol\":3403:3472  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_141\n        /* \"contracts/libraries/SafeERC20.sol\":3431:3435  data */\n      dup3\n        /* \"contracts/libraries/SafeERC20.sol\":3403:3472  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"contracts/libraries/SafeERC20.sol\":3411:3416  token */\n      dup6\n        /* \"contracts/libraries/SafeERC20.sol\":3403:3430  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_142\n      swap1\n        /* \"contracts/libraries/SafeERC20.sol\":3403:3472  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_141:\n        /* \"contracts/libraries/SafeERC20.sol\":3377:3472  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"contracts/libraries/SafeERC20.sol\":3506:3507  0 */\n      0x00\n        /* \"contracts/libraries/SafeERC20.sol\":3486:3496  returndata */\n      dup2\n        /* \"contracts/libraries/SafeERC20.sol\":3486:3503  returndata.length */\n      mload\n        /* \"contracts/libraries/SafeERC20.sol\":3486:3507  returndata.length > 0 */\n      gt\n        /* \"contracts/libraries/SafeERC20.sol\":3482:3703  if (returndata.length > 0) { // Return data is optional... */\n      iszero\n      tag_143\n      jumpi\n        /* \"contracts/libraries/SafeERC20.sol\":3626:3636  returndata */\n      dup1\n        /* \"contracts/libraries/SafeERC20.sol\":3615:3645  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_144\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_144:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/SafeERC20.sol\":3607:3692  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_145\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd\n      0x2a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_145:\n        /* \"contracts/libraries/SafeERC20.sol\":3482:3703  if (returndata.length > 0) { // Return data is optional... */\n    tag_143:\n        /* \"contracts/libraries/SafeERC20.sol\":2958:3709  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/Address.sol\":3573:3766  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {... */\n    tag_142:\n        /* \"contracts/libraries/Address.sol\":3676:3688  bytes memory */\n      0x60\n        /* \"contracts/libraries/Address.sol\":3707:3759  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_147\n        /* \"contracts/libraries/Address.sol\":3729:3735  target */\n      dup5\n        /* \"contracts/libraries/Address.sol\":3737:3741  data */\n      dup5\n        /* \"contracts/libraries/Address.sol\":3743:3744  0 */\n      0x00\n        /* \"contracts/libraries/Address.sol\":3746:3758  errorMessage */\n      dup6\n        /* \"contracts/libraries/Address.sol\":3707:3728  functionCallWithValue */\n      tag_148\n        /* \"contracts/libraries/Address.sol\":3707:3759  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_147:\n        /* \"contracts/libraries/Address.sol\":3700:3759  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"contracts/libraries/Address.sol\":3573:3766  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/Address.sol\":4600:5123  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {... */\n    tag_148:\n        /* \"contracts/libraries/Address.sol\":4727:4739  bytes memory */\n      0x60\n        /* \"contracts/libraries/Address.sol\":4784:4789  value */\n      dup3\n        /* \"contracts/libraries/Address.sol\":4759:4780  address(this).balance */\n      selfbalance\n        /* \"contracts/libraries/Address.sol\":4759:4789  address(this).balance >= value */\n      lt\n      iszero\n        /* \"contracts/libraries/Address.sol\":4751:4832  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_150\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_150:\n        /* \"contracts/libraries/Address.sol\":4850:4868  isContract(target) */\n      tag_151\n        /* \"contracts/libraries/Address.sol\":4861:4867  target */\n      dup6\n        /* \"contracts/libraries/Address.sol\":4850:4860  isContract */\n      tag_152\n        /* \"contracts/libraries/Address.sol\":4850:4868  isContract(target) */\n      jump\t// in\n    tag_151:\n        /* \"contracts/libraries/Address.sol\":4842:4902  require(isContract(target), \"Address: call to non-contract\") */\n      tag_153\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1d\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_153:\n        /* \"contracts/libraries/Address.sol\":4973:4985  bool success */\n      0x00\n        /* \"contracts/libraries/Address.sol\":4987:5010  bytes memory returndata */\n      dup1\n        /* \"contracts/libraries/Address.sol\":5014:5020  target */\n      dup7\n        /* \"contracts/libraries/Address.sol\":5014:5025  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/Address.sol\":5034:5039  value */\n      dup6\n        /* \"contracts/libraries/Address.sol\":5042:5046  data */\n      dup8\n        /* \"contracts/libraries/Address.sol\":5014:5047  target.call{ value: value }(data) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_154:\n      0x20\n      dup4\n      lt\n      tag_156\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      0x20\n      dup4\n      sub\n      swap3\n      pop\n      jump(tag_154)\n    tag_156:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_159\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_158)\n    tag_159:\n      0x60\n      swap2\n      pop\n    tag_158:\n      pop\n        /* \"contracts/libraries/Address.sol\":4972:5047  (bool success, bytes memory returndata) = target.call{ value: value }(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/libraries/Address.sol\":5064:5116  _verifyCallResult(success, returndata, errorMessage) */\n      tag_160\n        /* \"contracts/libraries/Address.sol\":5082:5089  success */\n      dup3\n        /* \"contracts/libraries/Address.sol\":5091:5101  returndata */\n      dup3\n        /* \"contracts/libraries/Address.sol\":5103:5115  errorMessage */\n      dup7\n        /* \"contracts/libraries/Address.sol\":5064:5081  _verifyCallResult */\n      tag_161\n        /* \"contracts/libraries/Address.sol\":5064:5116  _verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_160:\n        /* \"contracts/libraries/Address.sol\":5057:5116  return _verifyCallResult(success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/Address.sol\":4600:5123  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/Address.sol\":718:1131  function isContract(address account) internal view returns (bool) {... */\n    tag_152:\n        /* \"contracts/libraries/Address.sol\":778:782  bool */\n      0x00\n        /* \"contracts/libraries/Address.sol\":981:993  uint256 size */\n      dup1\n        /* \"contracts/libraries/Address.sol\":1090:1097  account */\n      dup3\n        /* \"contracts/libraries/Address.sol\":1078:1098  extcodesize(account) */\n      extcodesize\n        /* \"contracts/libraries/Address.sol\":1070:1098  size := extcodesize(account) */\n      swap1\n      pop\n        /* \"contracts/libraries/Address.sol\":1123:1124  0 */\n      0x00\n        /* \"contracts/libraries/Address.sol\":1116:1120  size */\n      dup2\n        /* \"contracts/libraries/Address.sol\":1116:1124  size > 0 */\n      gt\n        /* \"contracts/libraries/Address.sol\":1109:1124  return size > 0 */\n      swap2\n      pop\n      pop\n        /* \"contracts/libraries/Address.sol\":718:1131  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/libraries/Address.sol\":7083:7808  function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {... */\n    tag_161:\n        /* \"contracts/libraries/Address.sol\":7198:7210  bytes memory */\n      0x60\n        /* \"contracts/libraries/Address.sol\":7226:7233  success */\n      dup4\n        /* \"contracts/libraries/Address.sol\":7222:7802  if (success) {... */\n      iszero\n      tag_164\n      jumpi\n        /* \"contracts/libraries/Address.sol\":7256:7266  returndata */\n      dup3\n        /* \"contracts/libraries/Address.sol\":7249:7266  return returndata */\n      swap1\n      pop\n      jump(tag_163)\n        /* \"contracts/libraries/Address.sol\":7222:7802  if (success) {... */\n    tag_164:\n        /* \"contracts/libraries/Address.sol\":7387:7388  0 */\n      0x00\n        /* \"contracts/libraries/Address.sol\":7367:7377  returndata */\n      dup4\n        /* \"contracts/libraries/Address.sol\":7367:7384  returndata.length */\n      mload\n        /* \"contracts/libraries/Address.sol\":7367:7388  returndata.length > 0 */\n      gt\n        /* \"contracts/libraries/Address.sol\":7363:7792  if (returndata.length > 0) {... */\n      iszero\n      tag_166\n      jumpi\n        /* \"contracts/libraries/Address.sol\":7625:7635  returndata */\n      dup3\n        /* \"contracts/libraries/Address.sol\":7619:7636  mload(returndata) */\n      mload\n        /* \"contracts/libraries/Address.sol\":7685:7700  returndata_size */\n      dup1\n        /* \"contracts/libraries/Address.sol\":7672:7682  returndata */\n      dup5\n        /* \"contracts/libraries/Address.sol\":7668:7670  32 */\n      0x20\n        /* \"contracts/libraries/Address.sol\":7664:7683  add(32, returndata) */\n      add\n        /* \"contracts/libraries/Address.sol\":7657:7701  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"contracts/libraries/Address.sol\":7574:7719  {... */\n    tag_166:\n        /* \"contracts/libraries/Address.sol\":7764:7776  errorMessage */\n      dup2\n        /* \"contracts/libraries/Address.sol\":7757:7777  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_168:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_170\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_168)\n    tag_170:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_171\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_171:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/libraries/Address.sol\":7083:7808  function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {... */\n    tag_163:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c 416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c\n    data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3 536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77\n    data_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd 5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564\n\n    auxdata: 0xa26469706673582212207a63a459368ac067c8010e2fa8db625bd71ce3daccb6cd2cb35aa4a4bdd4fb0e64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405261186a6004556109c460055534801561001c57600080fd5b5060405161171e38038061171e8339818101604052606081101561003f57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505061008061007561014b60201b60201c565b61015360201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610217565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6114f8806102266000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a6116100975780639bafaaa4116100665780639bafaaa41461032e578063dc30819314610372578063e2c8dd34146103a6578063f2fde38b146103da576100f5565b8063715018a6146102485780637500412b1461025257806386df07ba146102b65780638da5cb5b146102fa576100f5565b8063327de06a116100d3578063327de06a146101905780633f428adc146101d4578063541effc3146101f25780636479020814610210576100f5565b80630481531d146100fa5780631efee6be1461013e5780632ab8fc1e1461015c575b600080fd5b61013c6004803603602081101561011057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061041e565b005b61014661050d565b6040518082815260200191505060405180910390f35b610164610513565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101d2600480360360208110156101a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610539565b005b6101dc610628565b6040518082815260200191505060405180910390f35b6101fa61062e565b6040518082815260200191505060405180910390f35b6102466004803603604081101561022657600080fd5b810190808035906020019092919080359060200190929190505050610634565b005b6102506106d8565b005b6102b46004803603604081101561026857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ec565b005b6102f8600480360360208110156102cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107c4565b005b6103026108b3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103706004803603602081101561034457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108dc565b005b61037a610b7e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103ae610ba4565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61041c600480360360208110156103f057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bca565b005b610426610c64565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f7a65726f2061646472657373000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61271081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610541610c64565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f7a65726f2061646472657373000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b60055481565b61063c610c64565b6127106106528284610d1590919063ffffffff16565b11156106c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c69642073686172657300000000000000000000000000000000000081525060200191505060405180910390fd5b81600481905550806005819055505050565b6106e0610c64565b6106ea6000610d9d565b565b6106f4610c64565b6107c0818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561075f57600080fd5b505afa158015610773573d6000803e3d6000fd5b505050506040513d602081101561078957600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b5050565b6107cc610c64565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f7a65726f2061646472657373000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108e4610c64565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561094d57600080fd5b505afa158015610961573d6000803e3d6000fd5b505050506040513d602081101561097757600080fd5b8101908080519060200190929190505050905060006109b56127106109a760045485610f0390919063ffffffff16565b610f8990919063ffffffff16565b905060006109e26127106109d460055486610f0390919063ffffffff16565b610f8990919063ffffffff16565b90506000610a0b826109fd858761101290919063ffffffff16565b61101290919063ffffffff16565b90506000831115610a6457610a63600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848773ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b5b6000821115610abb57610aba600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838773ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b5b6000811115610b1257610b11600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828773ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b5b7f899f4b1088197f1163efe7b38e0e7ce07a6b129dadf58829dd71fae27f1f237485848484604051808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bd2610c64565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061142c6026913960400191505060405180910390fd5b610c6181610d9d565b50565b610c6c611095565b73ffffffffffffffffffffffffffffffffffffffff16610c8a6108b3565b73ffffffffffffffffffffffffffffffffffffffff1614610d13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b565b600080828401905083811015610d93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610efe8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061109d565b505050565b600080831415610f165760009050610f83565b6000828402905082848281610f2757fe5b0414610f7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806114786021913960400191505060405180910390fd5b809150505b92915050565b6000808211611000576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161100957fe5b04905092915050565b60008282111561108a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b600033905090565b60006110ff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661118c9092919063ffffffff16565b90506000815111156111875780806020019051602081101561112057600080fd5b8101908080519060200190929190505050611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611499602a913960400191505060405180910390fd5b5b505050565b606061119b84846000856111a4565b90509392505050565b6060824710156111ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806114526026913960400191505060405180910390fd5b6112088561134c565b61127a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106112c957805182526020820191506020810190506020830392506112a6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461132b576040519150601f19603f3d011682016040523d82523d6000602084013e611330565b606091505b509150915061134082828661135f565b92505050949350505050565b600080823b905060008111915050919050565b6060831561136f57829050611424565b6000835111156113825782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113e95780820151818401526020810190506113ce565b50505050905090810190601f1680156114165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212207a63a459368ac067c8010e2fa8db625bd71ce3daccb6cd2cb35aa4a4bdd4fb0e64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0x186A PUSH1 0x4 SSTORE PUSH2 0x9C4 PUSH1 0x5 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x171E CODESIZE SUB DUP1 PUSH2 0x171E DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x80 PUSH2 0x75 PUSH2 0x14B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x153 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP PUSH2 0x217 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x14F8 DUP1 PUSH2 0x226 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0x9BAFAAA4 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x9BAFAAA4 EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0xDC308193 EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0xE2C8DD34 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3DA JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x7500412B EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0x86DF07BA EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2FA JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x327DE06A GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x327DE06A EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x3F428ADC EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x541EFFC3 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x64790208 EQ PUSH2 0x210 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x481531D EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x1EFEE6BE EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0x2AB8FC1E EQ PUSH2 0x15C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x41E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x146 PUSH2 0x50D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x164 PUSH2 0x513 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x539 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DC PUSH2 0x628 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FA PUSH2 0x62E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x246 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x634 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x250 PUSH2 0x6D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6EC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7C4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x302 PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x370 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x37A PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AE PUSH2 0xBA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBCA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x426 PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7A65726F20616464726573730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x541 PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7A65726F20616464726573730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x63C PUSH2 0xC64 JUMP JUMPDEST PUSH2 0x2710 PUSH2 0x652 DUP3 DUP5 PUSH2 0xD15 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E76616C696420736861726573000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x4 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x6E0 PUSH2 0xC64 JUMP JUMPDEST PUSH2 0x6EA PUSH1 0x0 PUSH2 0xD9D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6F4 PUSH2 0xC64 JUMP JUMPDEST PUSH2 0x7C0 DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x773 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE61 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7A65726F20616464726573730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x8E4 PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x94D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x961 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x977 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x9B5 PUSH2 0x2710 PUSH2 0x9A7 PUSH1 0x4 SLOAD DUP6 PUSH2 0xF03 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xF89 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9E2 PUSH2 0x2710 PUSH2 0x9D4 PUSH1 0x5 SLOAD DUP7 PUSH2 0xF03 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xF89 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA0B DUP3 PUSH2 0x9FD DUP6 DUP8 PUSH2 0x1012 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1012 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 GT ISZERO PUSH2 0xA64 JUMPI PUSH2 0xA63 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE61 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0xABB JUMPI PUSH2 0xABA PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE61 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xB12 JUMPI PUSH2 0xB11 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE61 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH32 0x899F4B1088197F1163EFE7B38E0E7CE07A6B129DADF58829DD71FAE27F1F2374 DUP6 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xBD2 PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC58 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x142C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC61 DUP2 PUSH2 0xD9D JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC6C PUSH2 0x1095 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC8A PUSH2 0x8B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xD93 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xEFE DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x109D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0xF16 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0xF27 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xF7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1478 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1000 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1009 JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x108A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FF DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x118C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1187 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1186 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1499 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x119B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x11A4 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x11FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1452 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1208 DUP6 PUSH2 0x134C JUMP JUMPDEST PUSH2 0x127A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x12C9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x132B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1330 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1340 DUP3 DUP3 DUP7 PUSH2 0x135F JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x136F JUMPI DUP3 SWAP1 POP PUSH2 0x1424 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x1382 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13E9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13CE JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1416 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77536166654552433230 GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A26469706673582212207A63A459 CALLDATASIZE DUP11 0xC0 PUSH8 0xC8010E2FA8DB625B 0xD7 SHR 0xE3 0xDA 0xCC 0xB6 0xCD 0x2C 0xB3 GAS LOG4 LOG4 0xBD 0xD4 0xFB 0xE PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "155:2346:0:-:0;;;452:4;420:36;;497:4;460:41;;506:180;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;940:32:1;959:12;:10;;;:12;;:::i;:::-;940:18;;;:32;;:::i;:::-;598:9:0;580:15;;:27;;;;;;;;;;;;;;;;;;636:7;613:20;;:30;;;;;;;;;;;;;;;;;;672:9;649:20;;:32;;;;;;;;;;;;;;;;;;506:180;;;155:2346;;598:104:4;651:15;685:10;678:17;;598:104;:::o;2430:187:1:-;2503:16;2522:6;;;;;;;;;;;2503:25;;2547:8;2538:6;;:17;;;;;;;;;;;;;;;;;;2601:8;2570:40;;2591:8;2570:40;;;;;;;;;;;;2430:187;;:::o;155:2346:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a6116100975780639bafaaa4116100665780639bafaaa41461032e578063dc30819314610372578063e2c8dd34146103a6578063f2fde38b146103da576100f5565b8063715018a6146102485780637500412b1461025257806386df07ba146102b65780638da5cb5b146102fa576100f5565b8063327de06a116100d3578063327de06a146101905780633f428adc146101d4578063541effc3146101f25780636479020814610210576100f5565b80630481531d146100fa5780631efee6be1461013e5780632ab8fc1e1461015c575b600080fd5b61013c6004803603602081101561011057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061041e565b005b61014661050d565b6040518082815260200191505060405180910390f35b610164610513565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101d2600480360360208110156101a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610539565b005b6101dc610628565b6040518082815260200191505060405180910390f35b6101fa61062e565b6040518082815260200191505060405180910390f35b6102466004803603604081101561022657600080fd5b810190808035906020019092919080359060200190929190505050610634565b005b6102506106d8565b005b6102b46004803603604081101561026857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ec565b005b6102f8600480360360208110156102cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107c4565b005b6103026108b3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103706004803603602081101561034457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108dc565b005b61037a610b7e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103ae610ba4565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61041c600480360360208110156103f057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bca565b005b610426610c64565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f7a65726f2061646472657373000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61271081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610541610c64565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f7a65726f2061646472657373000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b60055481565b61063c610c64565b6127106106528284610d1590919063ffffffff16565b11156106c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c69642073686172657300000000000000000000000000000000000081525060200191505060405180910390fd5b81600481905550806005819055505050565b6106e0610c64565b6106ea6000610d9d565b565b6106f4610c64565b6107c0818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561075f57600080fd5b505afa158015610773573d6000803e3d6000fd5b505050506040513d602081101561078957600080fd5b81019080805190602001909291905050508473ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b5050565b6107cc610c64565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f7a65726f2061646472657373000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108e4610c64565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561094d57600080fd5b505afa158015610961573d6000803e3d6000fd5b505050506040513d602081101561097757600080fd5b8101908080519060200190929190505050905060006109b56127106109a760045485610f0390919063ffffffff16565b610f8990919063ffffffff16565b905060006109e26127106109d460055486610f0390919063ffffffff16565b610f8990919063ffffffff16565b90506000610a0b826109fd858761101290919063ffffffff16565b61101290919063ffffffff16565b90506000831115610a6457610a63600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848773ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b5b6000821115610abb57610aba600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838773ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b5b6000811115610b1257610b11600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828773ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b5b7f899f4b1088197f1163efe7b38e0e7ce07a6b129dadf58829dd71fae27f1f237485848484604051808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bd2610c64565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061142c6026913960400191505060405180910390fd5b610c6181610d9d565b50565b610c6c611095565b73ffffffffffffffffffffffffffffffffffffffff16610c8a6108b3565b73ffffffffffffffffffffffffffffffffffffffff1614610d13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b565b600080828401905083811015610d93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610efe8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061109d565b505050565b600080831415610f165760009050610f83565b6000828402905082848281610f2757fe5b0414610f7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806114786021913960400191505060405180910390fd5b809150505b92915050565b6000808211611000576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161100957fe5b04905092915050565b60008282111561108a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b600033905090565b60006110ff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661118c9092919063ffffffff16565b90506000815111156111875780806020019051602081101561112057600080fd5b8101908080519060200190929190505050611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611499602a913960400191505060405180910390fd5b5b505050565b606061119b84846000856111a4565b90509392505050565b6060824710156111ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806114526026913960400191505060405180910390fd5b6112088561134c565b61127a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106112c957805182526020820191506020810190506020830392506112a6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461132b576040519150601f19603f3d011682016040523d82523d6000602084013e611330565b606091505b509150915061134082828661135f565b92505050949350505050565b600080823b905060008111915050919050565b6060831561136f57829050611424565b6000835111156113825782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113e95780820151818401526020810190506113ce565b50505050905090810190601f1680156114165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212207a63a459368ac067c8010e2fa8db625bd71ce3daccb6cd2cb35aa4a4bdd4fb0e64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0x9BAFAAA4 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x9BAFAAA4 EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0xDC308193 EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0xE2C8DD34 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3DA JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x7500412B EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0x86DF07BA EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2FA JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x327DE06A GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x327DE06A EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x3F428ADC EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x541EFFC3 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x64790208 EQ PUSH2 0x210 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x481531D EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x1EFEE6BE EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0x2AB8FC1E EQ PUSH2 0x15C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x41E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x146 PUSH2 0x50D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x164 PUSH2 0x513 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x539 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DC PUSH2 0x628 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FA PUSH2 0x62E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x246 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x634 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x250 PUSH2 0x6D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6EC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7C4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x302 PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x370 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x37A PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AE PUSH2 0xBA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBCA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x426 PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7A65726F20616464726573730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x541 PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7A65726F20616464726573730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x63C PUSH2 0xC64 JUMP JUMPDEST PUSH2 0x2710 PUSH2 0x652 DUP3 DUP5 PUSH2 0xD15 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x696E76616C696420736861726573000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x4 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x6E0 PUSH2 0xC64 JUMP JUMPDEST PUSH2 0x6EA PUSH1 0x0 PUSH2 0xD9D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6F4 PUSH2 0xC64 JUMP JUMPDEST PUSH2 0x7C0 DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x773 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE61 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7A65726F20616464726573730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x8E4 PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x94D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x961 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x977 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x9B5 PUSH2 0x2710 PUSH2 0x9A7 PUSH1 0x4 SLOAD DUP6 PUSH2 0xF03 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xF89 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9E2 PUSH2 0x2710 PUSH2 0x9D4 PUSH1 0x5 SLOAD DUP7 PUSH2 0xF03 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xF89 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA0B DUP3 PUSH2 0x9FD DUP6 DUP8 PUSH2 0x1012 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1012 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 GT ISZERO PUSH2 0xA64 JUMPI PUSH2 0xA63 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE61 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0xABB JUMPI PUSH2 0xABA PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE61 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xB12 JUMPI PUSH2 0xB11 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE61 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH32 0x899F4B1088197F1163EFE7B38E0E7CE07A6B129DADF58829DD71FAE27F1F2374 DUP6 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xBD2 PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC58 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x142C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC61 DUP2 PUSH2 0xD9D JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC6C PUSH2 0x1095 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC8A PUSH2 0x8B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xD93 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xEFE DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x109D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0xF16 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0xF27 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xF7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1478 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1000 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1009 JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x108A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FF DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x118C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1187 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1186 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1499 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x119B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x11A4 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x11FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1452 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1208 DUP6 PUSH2 0x134C JUMP JUMPDEST PUSH2 0x127A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x12C9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x132B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1330 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1340 DUP3 DUP3 DUP7 PUSH2 0x135F JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x136F JUMPI DUP3 SWAP1 POP PUSH2 0x1424 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x1382 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13E9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13CE JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1416 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416464726573733A20696E7375666669 PUSH4 0x69656E74 KECCAK256 PUSH3 0x616C61 PUSH15 0x636520666F722063616C6C53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77536166654552433230 GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A26469706673582212207A63A459 CALLDATASIZE DUP11 0xC0 PUSH8 0xC8010E2FA8DB625B 0xD7 SHR 0xE3 0xDA 0xCC 0xB6 0xCD 0x2C 0xB3 GAS LOG4 LOG4 0xBD 0xD4 0xFB 0xE PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "155:2346:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;805:171;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;370:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;330:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1157:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;420:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;460:41;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2075:279;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1828:101:1;;;:::i;:::-;;2358:141:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;980:173;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1205:85:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1322:749:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;291:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;257:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2078:198:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;805:171:0;1098:13:1;:11;:13::i;:::-;914:1:0::1;893:23;;:9;:23;;;;885:48;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;962:9;939:20;;:32;;;;;;;;;;;;;;;;;;805:171:::0;:::o;370:46::-;411:5;370:46;:::o;330:35::-;;;;;;;;;;;;;:::o;1157:161::-;1098:13:1;:11;:13::i;:::-;1261:1:0::1;1240:23;;:9;:23;;;;1232:48;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;1304:9;1286:15;;:27;;;;;;;;;;;;;;;;;;1157:161:::0;:::o;420:36::-;;;;:::o;460:41::-;;;;:::o;2075:279::-;1098:13:1;:11;:13::i;:::-;411:5:0::1;2185:41;2205:20;2185:15;:19;;:41;;;;:::i;:::-;:59;;2177:86;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;2286:15;2269:14;:32;;;;2329:20;2307:19;:42;;;;2075:279:::0;;:::o;1828:101:1:-;1098:13;:11;:13::i;:::-;1892:30:::1;1919:1;1892:18;:30::i;:::-;1828:101::o:0;2358:141:0:-;1098:13:1;:11;:13::i;:::-;2440:54:0::1;2459:2;2463:5;:15;;;2487:4;2463:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;2440:5;:18;;;;:54;;;;;:::i;:::-;2358:141:::0;;:::o;980:173::-;1098:13:1;:11;:13::i;:::-;1091:1:0::1;1070:23;;:9;:23;;;;1062:48;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;1139:9;1116:20;;:32;;;;;;;;;;;;;;;;;;980:173:::0;:::o;1205:85:1:-;1251:7;1277:6;;;;;;;;;;;1270:13;;1205:85;:::o;1322:749:0:-;1098:13:1;:11;:13::i;:::-;1387:16:0::1;1406:5;:15;;;1430:4;1406:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;1387:49;;1443:23;1469:48;411:5;1469:28;1482:14;;1469:8;:12;;:28;;;;:::i;:::-;:32;;:48;;;;:::i;:::-;1443:74;;1523:28;1554:53;411:5;1554:33;1567:19;;1554:8;:12;;:33;;;;:::i;:::-;:37;;:53;;;;:::i;:::-;1523:84;;1613:28;1644:55;1678:20;1644:29;1657:15;1644:8;:12;;:29;;;;:::i;:::-;:33;;:55;;;;:::i;:::-;1613:86;;1727:1;1709:15;:19;1706:76;;;1730:52;1749:15;;;;;;;;;;;1766;1730:5;:18;;;;:52;;;;;:::i;:::-;1706:76;1814:1;1791:20;:24;1788:91;;;1817:62;1836:20;;;;;;;;;;;1858;1817:5;:18;;;;:62;;;;;:::i;:::-;1788:91;1911:1;1888:20;:24;1885:91;;;1914:62;1933:20;;;;;;;;;;;1955;1914:5;:18;;;;:62;;;;;:::i;:::-;1885:91;1988:78;1999:5;2006:15;2023:20;2045;1988:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1121:1:1;;;;1322:749:0::0;:::o;291:35::-;;;;;;;;;;;;;:::o;257:30::-;;;;;;;;;;;;;:::o;2078:198:1:-;1098:13;:11;:13::i;:::-;2186:1:::1;2166:22;;:8;:22;;;;2158:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2241:28;2260:8;2241:18;:28::i;:::-;2078:198:::0;:::o;1363:130::-;1437:12;:10;:12::i;:::-;1426:23;;:7;:5;:7::i;:::-;:23;;;1418:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1363:130::o;2682:175:6:-;2740:7;2759:9;2775:1;2771;:5;2759:17;;2799:1;2794;:6;;2786:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:1;2842:8;;;2682:175;;;;:::o;2430:187:1:-;2503:16;2522:6;;;;;;;;;;;2503:25;;2547:8;2538:6;;:17;;;;;;;;;;;;;;;;;;2601:8;2570:40;;2591:8;2570:40;;;;;;;;;;;;2430:187;;:::o;695:175:5:-;777:86;797:5;827:23;;;852:2;856:5;804:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;777:19;:86::i;:::-;695:175;;;:::o;3530:215:6:-;3588:7;3616:1;3611;:6;3607:20;;;3626:1;3619:8;;;;3607:20;3637:9;3653:1;3649;:5;3637:17;;3681:1;3676;3672;:5;;;;;;:10;3664:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3737:1;3730:8;;;3530:215;;;;;:::o;4209:150::-;4267:7;4298:1;4294;:5;4286:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4351:1;4347;:5;;;;;;4340:12;;4209:150;;;;:::o;3128:155::-;3186:7;3218:1;3213;:6;;3205:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3275:1;3271;:5;3264:12;;3128:155;;;;:::o;598:104:4:-;651:15;685:10;678:17;;598:104;:::o;2958:751:5:-;3377:23;3403:69;3431:4;3403:69;;;;;;;;;;;;;;;;;3411:5;3403:27;;;;:69;;;;;:::i;:::-;3377:95;;3506:1;3486:10;:17;:21;3482:221;;;3626:10;3615:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3607:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3482:221;2958:751;;;:::o;3573:193:3:-;3676:12;3707:52;3729:6;3737:4;3743:1;3746:12;3707:21;:52::i;:::-;3700:59;;3573:193;;;;;:::o;4600:523::-;4727:12;4784:5;4759:21;:30;;4751:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4850:18;4861:6;4850:10;:18::i;:::-;4842:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4973:12;4987:23;5014:6;:11;;5034:5;5042:4;5014:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4972:75;;;;5064:52;5082:7;5091:10;5103:12;5064:17;:52::i;:::-;5057:59;;;;4600:523;;;;;;:::o;718:413::-;778:4;981:12;1090:7;1078:20;1070:28;;1123:1;1116:4;:8;1109:15;;;718:413;;;:::o;7083:725::-;7198:12;7226:7;7222:580;;;7256:10;7249:17;;;;7222:580;7387:1;7367:10;:17;:21;7363:429;;;7625:10;7619:17;7685:15;7672:10;7668:2;7664:19;7657:44;7574:145;7764:12;7757:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7083:725;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1073600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"buybackAndBurnShare()": "1072",
								"buybackAndBurnWallet()": "1091",
								"distributeShares(address)": "infinite",
								"dividendsShare()": "1050",
								"dividendsWallet()": "1113",
								"operatingFundsWallet()": "1115",
								"owner()": "1144",
								"renounceOwnership()": "24421",
								"safeEmergencyWithdraw(address,address)": "infinite",
								"sharePrecision()": "251",
								"transferOwnership(address)": "infinite",
								"updateBuybackAndBurnWallet(address)": "22127",
								"updateDevelopmentFundsWallet(address)": "22170",
								"updateDividendsWallet(address)": "22126",
								"updateShares(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 155,
									"end": 2501,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 452,
									"end": 456,
									"name": "PUSH",
									"source": 0,
									"value": "186A"
								},
								{
									"begin": 420,
									"end": 456,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 420,
									"end": 456,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 497,
									"end": 501,
									"name": "PUSH",
									"source": 0,
									"value": "9C4"
								},
								{
									"begin": 460,
									"end": 501,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 460,
									"end": 501,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH",
									"source": 0,
									"value": "60"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 506,
									"end": 686,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 940,
									"end": 972,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 959,
									"end": 971,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 959,
									"end": 969,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 959,
									"end": 969,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 959,
									"end": 969,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 959,
									"end": 971,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 959,
									"end": 971,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 959,
									"end": 971,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 959,
									"end": 971,
									"name": "tag",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 959,
									"end": 971,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 940,
									"end": 958,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 940,
									"end": 958,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 940,
									"end": 958,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 940,
									"end": 972,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 940,
									"end": 972,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 940,
									"end": 972,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 940,
									"end": 972,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 940,
									"end": 972,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 598,
									"end": 607,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 580,
									"end": 595,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 580,
									"end": 595,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 580,
									"end": 607,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 580,
									"end": 607,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 580,
									"end": 607,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 580,
									"end": 607,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 580,
									"end": 607,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 636,
									"end": 643,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 613,
									"end": 633,
									"name": "PUSH",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 613,
									"end": 633,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 613,
									"end": 643,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 613,
									"end": 643,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 613,
									"end": 643,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 613,
									"end": 643,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 613,
									"end": 643,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 672,
									"end": 681,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 649,
									"end": 669,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 649,
									"end": 669,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 649,
									"end": 681,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 649,
									"end": 681,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 649,
									"end": 681,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 649,
									"end": 681,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 649,
									"end": 681,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 506,
									"end": 686,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 598,
									"end": 702,
									"name": "tag",
									"source": 4,
									"value": "8"
								},
								{
									"begin": 598,
									"end": 702,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 651,
									"end": 666,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 685,
									"end": 695,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 678,
									"end": 695,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 678,
									"end": 695,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 598,
									"end": 702,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 598,
									"end": 702,
									"name": "JUMP",
									"source": 4,
									"value": "[out]"
								},
								{
									"begin": 2430,
									"end": 2617,
									"name": "tag",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 2430,
									"end": 2617,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2503,
									"end": 2519,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2522,
									"end": 2528,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2503,
									"end": 2528,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2503,
									"end": 2528,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2547,
									"end": 2555,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2544,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2538,
									"end": 2544,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 2538,
									"end": 2555,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2601,
									"end": 2609,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2591,
									"end": 2599,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "PUSH",
									"source": 1,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2570,
									"end": 2610,
									"name": "LOG3",
									"source": 1
								},
								{
									"begin": 2430,
									"end": 2617,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2430,
									"end": 2617,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2430,
									"end": 2617,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 155,
									"end": 2501,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207a63a459368ac067c8010e2fa8db625bd71ce3daccb6cd2cb35aa4a4bdd4fb0e64736f6c63430007060033",
									".code": [
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "715018A6"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "9BAFAAA4"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "9BAFAAA4"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "DC308193"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "E2C8DD34"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "F2FDE38B"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "715018A6"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "7500412B"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "86DF07BA"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "327DE06A"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "327DE06A"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "3F428ADC"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "541EFFC3"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "64790208"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "481531D"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "1EFEE6BE"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "2AB8FC1E"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 155,
											"end": 2501,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 805,
											"end": 976,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 805,
											"end": 976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 1098,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 914,
											"end": 915,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 916,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 893,
											"end": 916,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 893,
											"end": 902,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 893,
											"end": 916,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 893,
											"end": 916,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 893,
											"end": 916,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 916,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "C"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "7A65726F20616464726573730000000000000000000000000000000000000000"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 885,
											"end": 933,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 885,
											"end": 933,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 962,
											"end": 971,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 939,
											"end": 959,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 939,
											"end": 959,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 939,
											"end": 971,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 939,
											"end": 971,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 939,
											"end": 971,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 939,
											"end": 971,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 939,
											"end": 971,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 805,
											"end": 976,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 411,
											"end": 416,
											"name": "PUSH",
											"source": 0,
											"value": "2710"
										},
										{
											"begin": 370,
											"end": 416,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 370,
											"end": 416,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 330,
											"end": 365,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 330,
											"end": 365,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 1098,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1261,
											"end": 1262,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1240,
											"end": 1263,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1240,
											"end": 1263,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1249,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1263,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1240,
											"end": 1263,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1263,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1263,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "C"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "7A65726F20616464726573730000000000000000000000000000000000000000"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1232,
											"end": 1280,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1304,
											"end": 1313,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1301,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1286,
											"end": 1301,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1313,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1318,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 420,
											"end": 456,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 420,
											"end": 456,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 460,
											"end": 501,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 460,
											"end": 501,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 1098,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 411,
											"end": 416,
											"name": "PUSH",
											"source": 0,
											"value": "2710"
										},
										{
											"begin": 2185,
											"end": 2226,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 2205,
											"end": 2225,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2185,
											"end": 2200,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2185,
											"end": 2204,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 2185,
											"end": 2204,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2185,
											"end": 2226,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2185,
											"end": 2226,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2185,
											"end": 2226,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2185,
											"end": 2226,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2185,
											"end": 2226,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2185,
											"end": 2226,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 2185,
											"end": 2226,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2185,
											"end": 2244,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2185,
											"end": 2244,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "E"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "696E76616C696420736861726573000000000000000000000000000000000000"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2177,
											"end": 2263,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2286,
											"end": 2301,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2269,
											"end": 2283,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2269,
											"end": 2301,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2269,
											"end": 2301,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2269,
											"end": 2301,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2269,
											"end": 2301,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2329,
											"end": 2349,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 2326,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 2307,
											"end": 2349,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 2349,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 2349,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 2349,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2075,
											"end": 2354,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 1098,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1892,
											"end": 1922,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 1919,
											"end": 1920,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1892,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 1892,
											"end": 1922,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1892,
											"end": 1922,
											"name": "tag",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 1892,
											"end": 1922,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1828,
											"end": 1929,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 1098,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "tag",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2459,
											"end": 2461,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2468,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2478,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2463,
											"end": 2478,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2478,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 2487,
											"end": 2491,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2463,
											"end": 2493,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2440,
											"end": 2445,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2440,
											"end": 2458,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2440,
											"end": 2458,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2440,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2440,
											"end": 2458,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2440,
											"end": 2494,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2358,
											"end": 2499,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 1098,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "tag",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1091,
											"end": 1092,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1070,
											"end": 1093,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1070,
											"end": 1093,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1070,
											"end": 1079,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1070,
											"end": 1093,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1070,
											"end": 1093,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1070,
											"end": 1093,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1070,
											"end": 1093,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "C"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "7A65726F20616464726573730000000000000000000000000000000000000000"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1062,
											"end": 1110,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1139,
											"end": 1148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1136,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1116,
											"end": 1136,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 1148,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1153,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1251,
											"end": 1258,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1277,
											"end": 1283,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1270,
											"end": 1283,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1270,
											"end": 1283,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1205,
											"end": 1290,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 1098,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "tag",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1387,
											"end": 1403,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1406,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1421,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1406,
											"end": 1421,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1421,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1430,
											"end": 1434,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1406,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1387,
											"end": 1436,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1387,
											"end": 1436,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1443,
											"end": 1466,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1469,
											"end": 1517,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 411,
											"end": 416,
											"name": "PUSH",
											"source": 0,
											"value": "2710"
										},
										{
											"begin": 1469,
											"end": 1497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1482,
											"end": 1496,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 1496,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1477,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1481,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1469,
											"end": 1481,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1497,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1497,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1469,
											"end": 1497,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1497,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1469,
											"end": 1497,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1469,
											"end": 1497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1501,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 1469,
											"end": 1501,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1517,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1517,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1517,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1469,
											"end": 1517,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1469,
											"end": 1517,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1469,
											"end": 1517,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 1469,
											"end": 1517,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1443,
											"end": 1517,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1443,
											"end": 1517,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1554,
											"end": 1607,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 411,
											"end": 416,
											"name": "PUSH",
											"source": 0,
											"value": "2710"
										},
										{
											"begin": 1554,
											"end": 1587,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 1567,
											"end": 1586,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1567,
											"end": 1586,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1562,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1566,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1554,
											"end": 1566,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1587,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1587,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1587,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1554,
											"end": 1587,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1587,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1554,
											"end": 1587,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 1554,
											"end": 1587,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 1554,
											"end": 1591,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1607,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1607,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1607,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1554,
											"end": 1607,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1554,
											"end": 1607,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1554,
											"end": 1607,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 1554,
											"end": 1607,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1523,
											"end": 1607,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1523,
											"end": 1607,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1613,
											"end": 1641,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1644,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1678,
											"end": 1698,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1673,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1657,
											"end": 1672,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1652,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1656,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1644,
											"end": 1656,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1673,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1673,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1673,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1644,
											"end": 1673,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1673,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1644,
											"end": 1673,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1644,
											"end": 1673,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1677,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1644,
											"end": 1677,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1699,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1699,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1699,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1644,
											"end": 1699,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1644,
											"end": 1699,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1644,
											"end": 1699,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1644,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1613,
											"end": 1699,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1613,
											"end": 1699,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1727,
											"end": 1728,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1709,
											"end": 1724,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1709,
											"end": 1728,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1706,
											"end": 1782,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1706,
											"end": 1782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1706,
											"end": 1782,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1749,
											"end": 1764,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1766,
											"end": 1781,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1735,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 1730,
											"end": 1782,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1706,
											"end": 1782,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1706,
											"end": 1782,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1814,
											"end": 1815,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1791,
											"end": 1811,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1791,
											"end": 1815,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1788,
											"end": 1879,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1788,
											"end": 1879,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1788,
											"end": 1879,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1836,
											"end": 1856,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1858,
											"end": 1878,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1822,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1835,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1817,
											"end": 1835,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1835,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1817,
											"end": 1835,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1817,
											"end": 1879,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1788,
											"end": 1879,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1788,
											"end": 1879,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1911,
											"end": 1912,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1888,
											"end": 1908,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1888,
											"end": 1912,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1885,
											"end": 1976,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1885,
											"end": 1976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1885,
											"end": 1976,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1933,
											"end": 1953,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1955,
											"end": 1975,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1919,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1932,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1914,
											"end": 1932,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1914,
											"end": 1932,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1914,
											"end": 1976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1885,
											"end": 1976,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1885,
											"end": 1976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "PUSH",
											"source": 0,
											"value": "899F4B1088197F1163EFE7B38E0E7CE07A6B129DADF58829DD71FAE27F1F2374"
										},
										{
											"begin": 1999,
											"end": 2004,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2021,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2023,
											"end": 2043,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2045,
											"end": 2065,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1988,
											"end": 2066,
											"name": "LOG1",
											"source": 0
										},
										{
											"begin": 1121,
											"end": 1122,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1121,
											"end": 1122,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1121,
											"end": 1122,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1121,
											"end": 1122,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1322,
											"end": 2071,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 291,
											"end": 326,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 291,
											"end": 326,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 257,
											"end": 287,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 257,
											"end": 287,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 1098,
											"end": 1109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 1098,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2186,
											"end": 2187,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2166,
											"end": 2188,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2166,
											"end": 2188,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2166,
											"end": 2174,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2166,
											"end": 2188,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2166,
											"end": 2188,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2166,
											"end": 2188,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2166,
											"end": 2188,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH data",
											"source": 1,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "CODECOPY",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2158,
											"end": 2231,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2241,
											"end": 2269,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 2260,
											"end": 2268,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2241,
											"end": 2259,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 2241,
											"end": 2269,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2241,
											"end": 2269,
											"name": "tag",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 2241,
											"end": 2269,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2078,
											"end": 2276,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1363,
											"end": 1493,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1363,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1437,
											"end": 1449,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 1437,
											"end": 1447,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 1437,
											"end": 1449,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1437,
											"end": 1449,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 1437,
											"end": 1449,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1426,
											"end": 1449,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1426,
											"end": 1449,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1426,
											"end": 1433,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 1426,
											"end": 1431,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 1426,
											"end": 1433,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1426,
											"end": 1433,
											"name": "tag",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 1426,
											"end": 1433,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1426,
											"end": 1449,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1426,
											"end": 1449,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1426,
											"end": 1449,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "tag",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 1418,
											"end": 1486,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1363,
											"end": 1493,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "tag",
											"source": 6,
											"value": "71"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2740,
											"end": 2747,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2768,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2775,
											"end": 2776,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2771,
											"end": 2772,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2771,
											"end": 2776,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2799,
											"end": 2800,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2794,
											"end": 2795,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "1B"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2849,
											"end": 2850,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2430,
											"end": 2617,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 2430,
											"end": 2617,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2503,
											"end": 2519,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2522,
											"end": 2528,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2503,
											"end": 2528,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2503,
											"end": 2528,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2547,
											"end": 2555,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2544,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2538,
											"end": 2544,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2538,
											"end": 2555,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2601,
											"end": 2609,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2591,
											"end": 2599,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2610,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 2430,
											"end": 2617,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2430,
											"end": 2617,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2430,
											"end": 2617,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 695,
											"end": 870,
											"name": "tag",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 695,
											"end": 870,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 777,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 797,
											"end": 802,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 827,
											"end": 850,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB"
										},
										{
											"begin": 827,
											"end": 850,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 827,
											"end": 850,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 852,
											"end": 854,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 856,
											"end": 861,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 804,
											"end": 862,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 777,
											"end": 796,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 777,
											"end": 863,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 777,
											"end": 863,
											"name": "tag",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 777,
											"end": 863,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 695,
											"end": 870,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 695,
											"end": 870,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 695,
											"end": 870,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 695,
											"end": 870,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "tag",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3588,
											"end": 3595,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3616,
											"end": 3617,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3611,
											"end": 3612,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3611,
											"end": 3617,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3607,
											"end": 3627,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3607,
											"end": 3627,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 3607,
											"end": 3627,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3626,
											"end": 3627,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3619,
											"end": 3627,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3619,
											"end": 3627,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3619,
											"end": 3627,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 3619,
											"end": 3627,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3607,
											"end": 3627,
											"name": "tag",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 3607,
											"end": 3627,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3637,
											"end": 3646,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3653,
											"end": 3654,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3649,
											"end": 3650,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3649,
											"end": 3654,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 3637,
											"end": 3654,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3637,
											"end": 3654,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3681,
											"end": 3682,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3676,
											"end": 3677,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3672,
											"end": 3673,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3672,
											"end": 3677,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3672,
											"end": 3677,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3672,
											"end": 3677,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3672,
											"end": 3677,
											"name": "INVALID",
											"source": 6
										},
										{
											"begin": 3672,
											"end": 3677,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3672,
											"end": 3677,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3672,
											"end": 3677,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 3672,
											"end": 3682,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH data",
											"source": 6,
											"value": "9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "CODECOPY",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 3664,
											"end": 3720,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3737,
											"end": 3738,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3730,
											"end": 3738,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3730,
											"end": 3738,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3730,
											"end": 3738,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3530,
											"end": 3745,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4209,
											"end": 4359,
											"name": "tag",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 4209,
											"end": 4359,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4267,
											"end": 4274,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4298,
											"end": 4299,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4294,
											"end": 4295,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4294,
											"end": 4299,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "1A"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "536166654D6174683A206469766973696F6E206279207A65726F000000000000"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 4286,
											"end": 4330,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4351,
											"end": 4352,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4347,
											"end": 4348,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4347,
											"end": 4352,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4347,
											"end": 4352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 4347,
											"end": 4352,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4347,
											"end": 4352,
											"name": "INVALID",
											"source": 6
										},
										{
											"begin": 4347,
											"end": 4352,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 4347,
											"end": 4352,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4347,
											"end": 4352,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 4340,
											"end": 4352,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4340,
											"end": 4352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4209,
											"end": 4359,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4209,
											"end": 4359,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4209,
											"end": 4359,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4209,
											"end": 4359,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4209,
											"end": 4359,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3128,
											"end": 3283,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 3128,
											"end": 3283,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3186,
											"end": 3193,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3218,
											"end": 3219,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3213,
											"end": 3214,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3213,
											"end": 3219,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 3213,
											"end": 3219,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "1E"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 3205,
											"end": 3254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3275,
											"end": 3276,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3271,
											"end": 3272,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3271,
											"end": 3276,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3264,
											"end": 3276,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3264,
											"end": 3276,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3128,
											"end": 3283,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3128,
											"end": 3283,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3128,
											"end": 3283,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3128,
											"end": 3283,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3128,
											"end": 3283,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 651,
											"end": 666,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 678,
											"end": 695,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 678,
											"end": 695,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2958,
											"end": 3709,
											"name": "tag",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 2958,
											"end": 3709,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3377,
											"end": 3400,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "141"
										},
										{
											"begin": 3431,
											"end": 3435,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "PUSH",
											"source": 5,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3411,
											"end": 3416,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3430,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3403,
											"end": 3430,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "142"
										},
										{
											"begin": 3403,
											"end": 3430,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "tag",
											"source": 5,
											"value": "141"
										},
										{
											"begin": 3403,
											"end": 3472,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3377,
											"end": 3472,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3377,
											"end": 3472,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3506,
											"end": 3507,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3486,
											"end": 3496,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3486,
											"end": 3503,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3486,
											"end": 3507,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 3482,
											"end": 3703,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3482,
											"end": 3703,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "143"
										},
										{
											"begin": 3482,
											"end": 3703,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3626,
											"end": 3636,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "144"
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "tag",
											"source": 5,
											"value": "144"
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3615,
											"end": 3645,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "2A"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH data",
											"source": 5,
											"value": "E11AD79D1E4A7F2E5F376964CB99E8E8F7904E3FC16A109F7A7ECB9AA7956DCD"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "2A"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "CODECOPY",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "tag",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 3607,
											"end": 3692,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3482,
											"end": 3703,
											"name": "tag",
											"source": 5,
											"value": "143"
										},
										{
											"begin": 3482,
											"end": 3703,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2958,
											"end": 3709,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2958,
											"end": 3709,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2958,
											"end": 3709,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2958,
											"end": 3709,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 3573,
											"end": 3766,
											"name": "tag",
											"source": 3,
											"value": "142"
										},
										{
											"begin": 3573,
											"end": 3766,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3676,
											"end": 3688,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 3707,
											"end": 3759,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 3729,
											"end": 3735,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3737,
											"end": 3741,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3743,
											"end": 3744,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3746,
											"end": 3758,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3707,
											"end": 3728,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 3707,
											"end": 3759,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3707,
											"end": 3759,
											"name": "tag",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 3707,
											"end": 3759,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3759,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3759,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3573,
											"end": 3766,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3573,
											"end": 3766,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3573,
											"end": 3766,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3573,
											"end": 3766,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3573,
											"end": 3766,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3573,
											"end": 3766,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "tag",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4727,
											"end": 4739,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 4784,
											"end": 4789,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4759,
											"end": 4780,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 4759,
											"end": 4789,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4759,
											"end": 4789,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH data",
											"source": 3,
											"value": "565F1A77334FC4792800921178C71E4521ACFFAB18FF9E7885B49377EE80AB4C"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "tag",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 4751,
											"end": 4832,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4850,
											"end": 4868,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 4861,
											"end": 4867,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4850,
											"end": 4860,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 4850,
											"end": 4868,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4850,
											"end": 4868,
											"name": "tag",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 4850,
											"end": 4868,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "1D"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "tag",
											"source": 3,
											"value": "153"
										},
										{
											"begin": 4842,
											"end": 4902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4973,
											"end": 4985,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4987,
											"end": 5010,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5020,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5014,
											"end": 5025,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5034,
											"end": 5039,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5042,
											"end": 5046,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "tag",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "tag",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "3F"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "tag",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "tag",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4972,
											"end": 5047,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4972,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4972,
											"end": 5047,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4972,
											"end": 5047,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5064,
											"end": 5116,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 5082,
											"end": 5089,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5091,
											"end": 5101,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5103,
											"end": 5115,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 5064,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 5064,
											"end": 5116,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5064,
											"end": 5116,
											"name": "tag",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 5064,
											"end": 5116,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5057,
											"end": 5116,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5057,
											"end": 5116,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5057,
											"end": 5116,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5057,
											"end": 5116,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4600,
											"end": 5123,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 718,
											"end": 1131,
											"name": "tag",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 718,
											"end": 1131,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 778,
											"end": 782,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 981,
											"end": 993,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1090,
											"end": 1097,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1078,
											"end": 1098,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 1070,
											"end": 1098,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1070,
											"end": 1098,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1123,
											"end": 1124,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 1120,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1116,
											"end": 1124,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1109,
											"end": 1124,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1109,
											"end": 1124,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1109,
											"end": 1124,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 718,
											"end": 1131,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 718,
											"end": 1131,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 718,
											"end": 1131,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 718,
											"end": 1131,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "tag",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7198,
											"end": 7210,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 7226,
											"end": 7233,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7222,
											"end": 7802,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7222,
											"end": 7802,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 7222,
											"end": 7802,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7256,
											"end": 7266,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7249,
											"end": 7266,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7249,
											"end": 7266,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7249,
											"end": 7266,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 7249,
											"end": 7266,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7222,
											"end": 7802,
											"name": "tag",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 7222,
											"end": 7802,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7387,
											"end": 7388,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7367,
											"end": 7377,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7367,
											"end": 7384,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7367,
											"end": 7388,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 7363,
											"end": 7792,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7363,
											"end": 7792,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 7363,
											"end": 7792,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7625,
											"end": 7635,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7619,
											"end": 7636,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7685,
											"end": 7700,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7672,
											"end": 7682,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7668,
											"end": 7670,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7664,
											"end": 7683,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7657,
											"end": 7701,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7574,
											"end": 7719,
											"name": "tag",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 7574,
											"end": 7719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7764,
											"end": 7776,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "tag",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "tag",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "tag",
											"source": 3,
											"value": "171"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7757,
											"end": 7777,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "tag",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7083,
											"end": 7808,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"565F1A77334FC4792800921178C71E4521ACFFAB18FF9E7885B49377EE80AB4C": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
										"9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
										"E11AD79D1E4A7F2E5F376964CB99E8E8F7904E3FC16A109F7A7ECB9AA7956DCD": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"buybackAndBurnShare()": "541effc3",
							"buybackAndBurnWallet()": "dc308193",
							"distributeShares(address)": "9bafaaa4",
							"dividendsShare()": "3f428adc",
							"dividendsWallet()": "e2c8dd34",
							"operatingFundsWallet()": "2ab8fc1e",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"safeEmergencyWithdraw(address,address)": "7500412b",
							"sharePrecision()": "1efee6be",
							"transferOwnership(address)": "f2fde38b",
							"updateBuybackAndBurnWallet(address)": "0481531d",
							"updateDevelopmentFundsWallet(address)": "86df07ba",
							"updateDividendsWallet(address)": "327de06a",
							"updateShares(uint256,uint256)": "64790208"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dividends\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operating\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividendsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackAndBurnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatingAmount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buybackAndBurnShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackAndBurnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatingFundsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateBuybackAndBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevelopmentFundsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDividendsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendsShare_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackAndBurnShare_\",\"type\":\"uint256\"}],\"name\":\"updateShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolEarnings.sol\":\"ProtocolEarnings\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolEarnings.sol\":{\"keccak256\":\"0x797def7bb1e6feb96293f5bb0a8c56a0512d95479a8e44a53f8647c1ea27cd93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29740cd87579a46d1b37f170caf4b70a207a3f9b92b9855d9956edac88bdf5fb\",\"dweb:/ipfs/QmbF1GW2Vsx8toETqZeFbobjzraHCdjn3iHL4okGZBkzJE\"]},\"contracts/access/Ownable.sol\":{\"keccak256\":\"0x518a70e4fcf452baa3e82b63ac224256df18be67b211bfa96f412426e0b3bcaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79ed162bbc8eb9dc4170672df0d8375dfb6035980bbda4890cf7c6393416cd81\",\"dweb:/ipfs/QmYkVwViH7fQEF71YeP6swAV26p4s9ZycNX5akipmo3Gxs\"]},\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\",\"urls\":[\"bzz-raw://b006685e753f9120469f10b09c159f222d4cb8b507a6c1f0c14ed50c883ebe66\",\"dweb:/ipfs/QmSyY7iTugbczPwfGK67etiyPULenYGzzRYbt8aabwwkUb\"]},\"contracts/libraries/Address.sol\":{\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f963d438177764b5f43f637c02311c951c0f0025d12fe1ac7e62e295bf416c41\",\"dweb:/ipfs/QmcfVb9JsWrYeTwFUJsKVHpKB7EaWBKydAH9S4sKg2pzcK\"]},\"contracts/libraries/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"contracts/libraries/SafeERC20.sol\":{\"keccak256\":\"0x03058d523c91e750b20293a3646f883b58c837e6015aea4e013447e2c3afb460\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c8cb70431af35762dd5f0e503976bc1d271b5f0441dc29193d1a2ecd555816f2\",\"dweb:/ipfs/Qmen6ceEL3axV46Ge8YZoqSNCDA2D3ufiHp7VwmUPtoZG2\"]},\"contracts/math/SafeMath.sol\":{\"keccak256\":\"0x36d9cd071bd9940d5d037102f5ba45465b7611bc399c13d520707570757a8a8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96dde04088c2cd9ec4982b14c9e57c9a3aaf02ca0983207f5f2da98e9fd1ae54\",\"dweb:/ipfs/QmVb2d6mwg6Y79kHYT3yxNuXyYQcyUq93YcNCom3A1RDfi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 273,
								"contract": "contracts/ProtocolEarnings.sol:ProtocolEarnings",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 14,
								"contract": "contracts/ProtocolEarnings.sol:ProtocolEarnings",
								"label": "dividendsWallet",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 16,
								"contract": "contracts/ProtocolEarnings.sol:ProtocolEarnings",
								"label": "buybackAndBurnWallet",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 18,
								"contract": "contracts/ProtocolEarnings.sol:ProtocolEarnings",
								"label": "operatingFundsWallet",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 24,
								"contract": "contracts/ProtocolEarnings.sol:ProtocolEarnings",
								"label": "dividendsShare",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 27,
								"contract": "contracts/ProtocolEarnings.sol:ProtocolEarnings",
								"label": "buybackAndBurnShare",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/access/Ownable.sol\":{\"keccak256\":\"0x518a70e4fcf452baa3e82b63ac224256df18be67b211bfa96f412426e0b3bcaf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79ed162bbc8eb9dc4170672df0d8375dfb6035980bbda4890cf7c6393416cd81\",\"dweb:/ipfs/QmYkVwViH7fQEF71YeP6swAV26p4s9ZycNX5akipmo3Gxs\"]},\"contracts/libraries/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 273,
								"contract": "contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\",\"urls\":[\"bzz-raw://b006685e753f9120469f10b09c159f222d4cb8b507a6c1f0c14ed50c883ebe66\",\"dweb:/ipfs/QmSyY7iTugbczPwfGK67etiyPULenYGzzRYbt8aabwwkUb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/Address.sol\":126:7810  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/Address.sol\":126:7810  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206d593f6d0a79b91a346ee81620265d4ad0467ae65b7bd62095f4e0424dd43c7364736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d593f6d0a79b91a346ee81620265d4ad0467ae65b7bd62095f4e0424dd43c7364736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x593F6D0A79B91A346EE81620265D 0x4A 0xD0 CHAINID PUSH27 0xE65B7BD62095F4E0424DD43C7364736F6C63430007060033000000 ",
							"sourceMap": "126:7684:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d593f6d0a79b91a346ee81620265d4ad0467ae65b7bd62095f4e0424dd43c7364736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x593F6D0A79B91A346EE81620265D 0x4A 0xD0 CHAINID PUSH27 0xE65B7BD62095F4E0424DD43C7364736F6C63430007060033000000 ",
							"sourceMap": "126:7684:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 126,
									"end": 7810,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "INVALID",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 126,
									"end": 7810,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206d593f6d0a79b91a346ee81620265d4ad0467ae65b7bd62095f4e0424dd43c7364736f6c63430007060033",
									".code": [
										{
											"begin": 126,
											"end": 7810,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 126,
											"end": 7810,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 126,
											"end": 7810,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 126,
											"end": 7810,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 126,
											"end": 7810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 126,
											"end": 7810,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 126,
											"end": 7810,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 7810,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 126,
											"end": 7810,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Address.sol\":{\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f963d438177764b5f43f637c02311c951c0f0025d12fe1ac7e62e295bf416c41\",\"dweb:/ipfs/QmcfVb9JsWrYeTwFUJsKVHpKB7EaWBKydAH9S4sKg2pzcK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/SafeERC20.sol\":607:3711  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/SafeERC20.sol\":607:3711  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122015ed0f71db8a4022abd6d111e88027e3c843e0cbb4c8162579c831d2d1bb834264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122015ed0f71db8a4022abd6d111e88027e3c843e0cbb4c8162579c831d2d1bb834264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xED 0xF PUSH18 0xDB8A4022ABD6D111E88027E3C843E0CBB4C8 AND 0x25 PUSH26 0xC831D2D1BB834264736F6C634300070600330000000000000000 ",
							"sourceMap": "607:3104:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122015ed0f71db8a4022abd6d111e88027e3c843e0cbb4c8162579c831d2d1bb834264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xED 0xF PUSH18 0xDB8A4022ABD6D111E88027E3C843E0CBB4C8 AND 0x25 PUSH26 0xC831D2D1BB834264736F6C634300070600330000000000000000 ",
							"sourceMap": "607:3104:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 607,
									"end": 3711,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "INVALID",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 607,
									"end": 3711,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122015ed0f71db8a4022abd6d111e88027e3c843e0cbb4c8162579c831d2d1bb834264736f6c63430007060033",
									".code": [
										{
											"begin": 607,
											"end": 3711,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 607,
											"end": 3711,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 607,
											"end": 3711,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 607,
											"end": 3711,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 607,
											"end": 3711,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 607,
											"end": 3711,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 607,
											"end": 3711,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 607,
											"end": 3711,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 607,
											"end": 3711,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\",\"urls\":[\"bzz-raw://b006685e753f9120469f10b09c159f222d4cb8b507a6c1f0c14ed50c883ebe66\",\"dweb:/ipfs/QmSyY7iTugbczPwfGK67etiyPULenYGzzRYbt8aabwwkUb\"]},\"contracts/libraries/Address.sol\":{\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f963d438177764b5f43f637c02311c951c0f0025d12fe1ac7e62e295bf416c41\",\"dweb:/ipfs/QmcfVb9JsWrYeTwFUJsKVHpKB7EaWBKydAH9S4sKg2pzcK\"]},\"contracts/libraries/SafeERC20.sol\":{\"keccak256\":\"0x03058d523c91e750b20293a3646f883b58c837e6015aea4e013447e2c3afb460\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c8cb70431af35762dd5f0e503976bc1d271b5f0441dc29193d1a2ecd555816f2\",\"dweb:/ipfs/Qmen6ceEL3axV46Ge8YZoqSNCDA2D3ufiHp7VwmUPtoZG2\"]},\"contracts/math/SafeMath.sol\":{\"keccak256\":\"0x36d9cd071bd9940d5d037102f5ba45465b7611bc399c13d520707570757a8a8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96dde04088c2cd9ec4982b14c9e57c9a3aaf02ca0983207f5f2da98e9fd1ae54\",\"dweb:/ipfs/QmVb2d6mwg6Y79kHYT3yxNuXyYQcyUq93YcNCom3A1RDfi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/math/SafeMath.sol\":622:7216  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/math/SafeMath.sol\":622:7216  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a885bbb604d526bee1c9a0fbf8240ad82a36363f6035f0c926a2e1161ff49b8164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a885bbb604d526bee1c9a0fbf8240ad82a36363f6035f0c926a2e1161ff49b8164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 DUP6 0xBB 0xB6 DIV 0xD5 0x26 0xBE 0xE1 0xC9 LOG0 0xFB 0xF8 0x24 EXP 0xD8 0x2A CALLDATASIZE CALLDATASIZE EXTCODEHASH PUSH1 0x35 CREATE 0xC9 0x26 LOG2 0xE1 AND 0x1F DELEGATECALL SWAP12 DUP2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "622:6594:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a885bbb604d526bee1c9a0fbf8240ad82a36363f6035f0c926a2e1161ff49b8164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 DUP6 0xBB 0xB6 DIV 0xD5 0x26 0xBE 0xE1 0xC9 LOG0 0xFB 0xF8 0x24 EXP 0xD8 0x2A CALLDATASIZE CALLDATASIZE EXTCODEHASH PUSH1 0x35 CREATE 0xC9 0x26 LOG2 0xE1 AND 0x1F DELEGATECALL SWAP12 DUP2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "622:6594:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "INVALID",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a885bbb604d526bee1c9a0fbf8240ad82a36363f6035f0c926a2e1161ff49b8164736f6c63430007060033",
									".code": [
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/math/SafeMath.sol\":{\"keccak256\":\"0x36d9cd071bd9940d5d037102f5ba45465b7611bc399c13d520707570757a8a8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96dde04088c2cd9ec4982b14c9e57c9a3aaf02ca0983207f5f2da98e9fd1ae54\",\"dweb:/ipfs/QmVb2d6mwg6Y79kHYT3yxNuXyYQcyUq93YcNCom3A1RDfi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "contracts/interfaces/IERC20.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/interfaces/IERC20.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/ProtocolEarnings.sol": {
				"ast": {
					"absolutePath": "contracts/ProtocolEarnings.sol",
					"exportedSymbols": {
						"Address": [
							758
						],
						"Context": [
							781
						],
						"IERC20": [
							462
						],
						"Ownable": [
							378
						],
						"ProtocolEarnings": [
							265
						],
						"SafeERC20": [
							994
						],
						"SafeMath": [
							1349
						]
					},
					"id": 266,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"absolutePath": "contracts/access/Ownable.sol",
							"file": "./access/Ownable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 266,
							"sourceUnit": 379,
							"src": "57:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/SafeERC20.sol",
							"file": "./libraries/SafeERC20.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 266,
							"sourceUnit": 995,
							"src": "88:35:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/math/SafeMath.sol",
							"file": "./math/SafeMath.sol",
							"id": 4,
							"nodeType": "ImportDirective",
							"scope": 266,
							"sourceUnit": 1350,
							"src": "124:29:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 378,
										"src": "184:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$378",
											"typeString": "contract Ownable"
										}
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "184:7:0"
								}
							],
							"contractDependencies": [
								378,
								781
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 265,
							"linearizedBaseContracts": [
								265,
								378,
								781
							],
							"name": "ProtocolEarnings",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 9,
									"libraryName": {
										"id": 7,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1349,
										"src": "202:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$1349",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "196:27:0",
									"typeName": {
										"id": 8,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "215:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 12,
									"libraryName": {
										"id": 10,
										"name": "SafeERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 994,
										"src": "232:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeERC20_$994",
											"typeString": "library SafeERC20"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "226:27:0",
									"typeName": {
										"id": 11,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 462,
										"src": "246:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$462",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "e2c8dd34",
									"id": 14,
									"mutability": "mutable",
									"name": "dividendsWallet",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "257:30:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 13,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "257:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "dc308193",
									"id": 16,
									"mutability": "mutable",
									"name": "buybackAndBurnWallet",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "291:35:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 15,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "291:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2ab8fc1e",
									"id": 18,
									"mutability": "mutable",
									"name": "operatingFundsWallet",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "330:35:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 17,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "330:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "1efee6be",
									"id": 21,
									"mutability": "constant",
									"name": "sharePrecision",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "370:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 19,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "370:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3130303030",
										"id": 20,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "411:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10000_by_1",
											"typeString": "int_const 10000"
										},
										"value": "10000"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3f428adc",
									"id": 24,
									"mutability": "mutable",
									"name": "dividendsShare",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "420:36:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 22,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "420:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "36323530",
										"id": 23,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "452:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_6250_by_1",
											"typeString": "int_const 6250"
										},
										"value": "6250"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "541effc3",
									"id": 27,
									"mutability": "mutable",
									"name": "buybackAndBurnShare",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "460:41:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 25,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "460:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32353030",
										"id": 26,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "497:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2500_by_1",
											"typeString": "int_const 2500"
										},
										"value": "2500"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "574:112:0",
										"statements": [
											{
												"expression": {
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 36,
														"name": "dividendsWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "580:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 37,
														"name": "dividends",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "598:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "580:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 39,
												"nodeType": "ExpressionStatement",
												"src": "580:27:0"
											},
											{
												"expression": {
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 40,
														"name": "buybackAndBurnWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "613:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 41,
														"name": "buyback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "636:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "613:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "613:30:0"
											},
											{
												"expression": {
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 44,
														"name": "operatingFundsWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "649:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 45,
														"name": "operating",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 33,
														"src": "672:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "649:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 47,
												"nodeType": "ExpressionStatement",
												"src": "649:32:0"
											}
										]
									},
									"id": 49,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "dividends",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "519:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "519:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "buyback",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "538:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 30,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "538:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "operating",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "555:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "518:55:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "574:0:0"
									},
									"scope": 265,
									"src": "506:180:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"anonymous": false,
									"id": 59,
									"name": "Distribute",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"indexed": false,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "707:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 50,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "707:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"indexed": false,
												"mutability": "mutable",
												"name": "dividendsAmount",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "721:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 52,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "721:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"indexed": false,
												"mutability": "mutable",
												"name": "buybackAndBurnAmount",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "746:28:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "746:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatingAmount",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "776:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "776:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "706:94:0"
									},
									"src": "690:111:0"
								},
								{
									"body": {
										"id": 80,
										"nodeType": "Block",
										"src": "879:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 72,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 67,
																"name": "newWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 61,
																"src": "893:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 70,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "914:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 69,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "906:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 68,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "906:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "906:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "893:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7a65726f2061646472657373",
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "918:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7",
																"typeString": "literal_string \"zero address\""
															},
															"value": "zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7",
																"typeString": "literal_string \"zero address\""
															}
														],
														"id": 66,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "885:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "885:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 75,
												"nodeType": "ExpressionStatement",
												"src": "885:48:0"
											},
											{
												"expression": {
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 76,
														"name": "buybackAndBurnWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "939:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 77,
														"name": "newWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 61,
														"src": "962:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "939:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 79,
												"nodeType": "ExpressionStatement",
												"src": "939:32:0"
											}
										]
									},
									"functionSelector": "0481531d",
									"id": 81,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 64,
											"modifierName": {
												"id": 63,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 297,
												"src": "869:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "869:9:0"
										}
									],
									"name": "updateBuybackAndBurnWallet",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "newWallet",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "841:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 60,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "841:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "840:19:0"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "879:0:0"
									},
									"scope": 265,
									"src": "805:171:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "1056:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 89,
																"name": "newWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 83,
																"src": "1070:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 92,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1091:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 91,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1083:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 90,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1083:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 93,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1083:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1070:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7a65726f2061646472657373",
															"id": 95,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1095:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7",
																"typeString": "literal_string \"zero address\""
															},
															"value": "zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7",
																"typeString": "literal_string \"zero address\""
															}
														],
														"id": 88,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1062:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1062:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 97,
												"nodeType": "ExpressionStatement",
												"src": "1062:48:0"
											},
											{
												"expression": {
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 98,
														"name": "operatingFundsWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "1116:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 99,
														"name": "newWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 83,
														"src": "1139:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1116:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 101,
												"nodeType": "ExpressionStatement",
												"src": "1116:32:0"
											}
										]
									},
									"functionSelector": "86df07ba",
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 86,
											"modifierName": {
												"id": 85,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 297,
												"src": "1046:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1046:9:0"
										}
									],
									"name": "updateDevelopmentFundsWallet",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "newWallet",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "1018:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:19:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1056:0:0"
									},
									"scope": 265,
									"src": "980:173:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "1226:92:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 111,
																"name": "newWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 105,
																"src": "1240:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 114,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1261:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1253:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 112,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1253:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 115,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1253:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1240:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7a65726f2061646472657373",
															"id": 117,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1265:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7",
																"typeString": "literal_string \"zero address\""
															},
															"value": "zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7",
																"typeString": "literal_string \"zero address\""
															}
														],
														"id": 110,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1232:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1232:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "1232:48:0"
											},
											{
												"expression": {
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 120,
														"name": "dividendsWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "1286:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 121,
														"name": "newWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 105,
														"src": "1304:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1286:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 123,
												"nodeType": "ExpressionStatement",
												"src": "1286:27:0"
											}
										]
									},
									"functionSelector": "327de06a",
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 108,
											"modifierName": {
												"id": 107,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 297,
												"src": "1216:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1216:9:0"
										}
									],
									"name": "updateDividendsWallet",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "newWallet",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "1188:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 104,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1188:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:19:0"
									},
									"returnParameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1226:0:0"
									},
									"scope": 265,
									"src": "1157:161:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "1381:690:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "_balance",
														"nodeType": "VariableDeclaration",
														"scope": 212,
														"src": "1387:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 132,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1387:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 141,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 138,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1430:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ProtocolEarnings_$265",
																		"typeString": "contract ProtocolEarnings"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ProtocolEarnings_$265",
																		"typeString": "contract ProtocolEarnings"
																	}
																],
																"id": 137,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1422:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 136,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1422:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1422:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 134,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 127,
															"src": "1406:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															}
														},
														"id": 135,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 423,
														"src": "1406:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1406:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1387:49:0"
											},
											{
												"assignments": [
													143
												],
												"declarations": [
													{
														"constant": false,
														"id": 143,
														"mutability": "mutable",
														"name": "dividendsAmount",
														"nodeType": "VariableDeclaration",
														"scope": 212,
														"src": "1443:23:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 142,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1443:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 151,
												"initialValue": {
													"arguments": [
														{
															"id": 149,
															"name": "sharePrecision",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "1502:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 146,
																	"name": "dividendsShare",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 24,
																	"src": "1482:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 144,
																	"name": "_balance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "1469:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 145,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1232,
																"src": "1469:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1469:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 148,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1254,
														"src": "1469:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1469:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1443:74:0"
											},
											{
												"assignments": [
													153
												],
												"declarations": [
													{
														"constant": false,
														"id": 153,
														"mutability": "mutable",
														"name": "buybackAndBurnAmount",
														"nodeType": "VariableDeclaration",
														"scope": 212,
														"src": "1523:28:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 152,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1523:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 161,
												"initialValue": {
													"arguments": [
														{
															"id": 159,
															"name": "sharePrecision",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "1592:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 156,
																	"name": "buybackAndBurnShare",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 27,
																	"src": "1567:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 154,
																	"name": "_balance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "1554:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1232,
																"src": "1554:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 157,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1554:33:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 158,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1254,
														"src": "1554:37:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1554:53:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1523:84:0"
											},
											{
												"assignments": [
													163
												],
												"declarations": [
													{
														"constant": false,
														"id": 163,
														"mutability": "mutable",
														"name": "operatingFundsAmount",
														"nodeType": "VariableDeclaration",
														"scope": 212,
														"src": "1613:28:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 162,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1613:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 171,
												"initialValue": {
													"arguments": [
														{
															"id": 169,
															"name": "buybackAndBurnAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "1678:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 166,
																	"name": "dividendsAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 143,
																	"src": "1657:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 164,
																	"name": "_balance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "1644:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 165,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1198,
																"src": "1644:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 167,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1644:29:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 168,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1198,
														"src": "1644:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1644:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1613:86:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 172,
														"name": "dividendsAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "1709:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 173,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1727:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1709:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 182,
												"nodeType": "IfStatement",
												"src": "1706:76:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 178,
																"name": "dividendsWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 14,
																"src": "1749:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 179,
																"name": "dividendsAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 143,
																"src": "1766:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 175,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 127,
																"src": "1730:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$462",
																	"typeString": "contract IERC20"
																}
															},
															"id": 177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "safeTransfer",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 815,
															"src": "1730:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$462_$",
																"typeString": "function (contract IERC20,address,uint256)"
															}
														},
														"id": 180,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1730:52:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 181,
													"nodeType": "ExpressionStatement",
													"src": "1730:52:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 183,
														"name": "buybackAndBurnAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 153,
														"src": "1791:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 184,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1814:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1791:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 193,
												"nodeType": "IfStatement",
												"src": "1788:91:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 189,
																"name": "buybackAndBurnWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "1836:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 190,
																"name": "buybackAndBurnAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 153,
																"src": "1858:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 186,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 127,
																"src": "1817:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$462",
																	"typeString": "contract IERC20"
																}
															},
															"id": 188,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "safeTransfer",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 815,
															"src": "1817:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$462_$",
																"typeString": "function (contract IERC20,address,uint256)"
															}
														},
														"id": 191,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1817:62:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 192,
													"nodeType": "ExpressionStatement",
													"src": "1817:62:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 194,
														"name": "operatingFundsAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "1888:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 195,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1911:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1888:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 204,
												"nodeType": "IfStatement",
												"src": "1885:91:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 200,
																"name": "operatingFundsWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 18,
																"src": "1933:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 201,
																"name": "operatingFundsAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 163,
																"src": "1955:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 197,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 127,
																"src": "1914:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$462",
																	"typeString": "contract IERC20"
																}
															},
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "safeTransfer",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 815,
															"src": "1914:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$462_$",
																"typeString": "function (contract IERC20,address,uint256)"
															}
														},
														"id": 202,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1914:62:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 203,
													"nodeType": "ExpressionStatement",
													"src": "1914:62:0"
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 206,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 127,
															"src": "1999:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 207,
															"name": "dividendsAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 143,
															"src": "2006:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 208,
															"name": "buybackAndBurnAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "2023:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 209,
															"name": "operatingFundsAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 163,
															"src": "2045:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 205,
														"name": "Distribute",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 59,
														"src": "1988:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_contract$_IERC20_$462_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,uint256,uint256,uint256)"
														}
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1988:78:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 211,
												"nodeType": "EmitStatement",
												"src": "1983:83:0"
											}
										]
									},
									"functionSelector": "9bafaaa4",
									"id": 213,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 130,
											"modifierName": {
												"id": 129,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 297,
												"src": "1371:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1371:9:0"
										}
									],
									"name": "distributeShares",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1348:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 126,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "1348:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1347:14:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1381:0:0"
									},
									"scope": 265,
									"src": "1322:749:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 240,
										"nodeType": "Block",
										"src": "2171:183:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 228,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 225,
																		"name": "buybackAndBurnShare_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 217,
																		"src": "2205:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 223,
																		"name": "dividendsShare_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 215,
																		"src": "2185:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 224,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "add",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1176,
																	"src": "2185:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 226,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2185:41:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 227,
																"name": "sharePrecision",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "2230:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2185:59:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c696420736861726573",
															"id": 229,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2246:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_09bf6a7c312cce9e010310877608d21cfc09aac29471d27b458434d61ca3588e",
																"typeString": "literal_string \"invalid shares\""
															},
															"value": "invalid shares"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_09bf6a7c312cce9e010310877608d21cfc09aac29471d27b458434d61ca3588e",
																"typeString": "literal_string \"invalid shares\""
															}
														],
														"id": 222,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2177:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2177:86:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 231,
												"nodeType": "ExpressionStatement",
												"src": "2177:86:0"
											},
											{
												"expression": {
													"id": 234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 232,
														"name": "dividendsShare",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "2269:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 233,
														"name": "dividendsShare_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 215,
														"src": "2286:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2269:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 235,
												"nodeType": "ExpressionStatement",
												"src": "2269:32:0"
											},
											{
												"expression": {
													"id": 238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 236,
														"name": "buybackAndBurnShare",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "2307:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 237,
														"name": "buybackAndBurnShare_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 217,
														"src": "2329:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2307:42:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 239,
												"nodeType": "ExpressionStatement",
												"src": "2307:42:0"
											}
										]
									},
									"functionSelector": "64790208",
									"id": 241,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 220,
											"modifierName": {
												"id": 219,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 297,
												"src": "2161:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2161:9:0"
										}
									],
									"name": "updateShares",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "dividendsShare_",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "2097:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2097:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "buybackAndBurnShare_",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "2122:28:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2122:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2096:55:0"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2171:0:0"
									},
									"scope": 265,
									"src": "2075:279:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "2434:65:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 253,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 245,
															"src": "2459:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 258,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2487:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ProtocolEarnings_$265",
																				"typeString": "contract ProtocolEarnings"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_ProtocolEarnings_$265",
																				"typeString": "contract ProtocolEarnings"
																			}
																		],
																		"id": 257,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2479:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 256,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2479:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 259,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2479:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 254,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 243,
																	"src": "2463:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$462",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 255,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balanceOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 423,
																"src": "2463:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view external returns (uint256)"
																}
															},
															"id": 260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2463:30:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 250,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "2440:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															}
														},
														"id": 252,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 815,
														"src": "2440:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$462_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2440:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 262,
												"nodeType": "ExpressionStatement",
												"src": "2440:54:0"
											}
										]
									},
									"functionSelector": "7500412b",
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 248,
											"modifierName": {
												"id": 247,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 297,
												"src": "2424:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2424:9:0"
										}
									],
									"name": "safeEmergencyWithdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "2389:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 242,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "2389:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "2403:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2388:26:0"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2434:0:0"
									},
									"scope": 265,
									"src": "2358:141:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 266,
							"src": "155:2346:0"
						}
					],
					"src": "32:2470:0"
				},
				"id": 0
			},
			"contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							781
						],
						"Ownable": [
							378
						]
					},
					"id": 379,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 267,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:1"
						},
						{
							"absolutePath": "contracts/libraries/Context.sol",
							"file": "../libraries/Context.sol",
							"id": 268,
							"nodeType": "ImportDirective",
							"scope": 379,
							"sourceUnit": 782,
							"src": "127:34:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 270,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 781,
										"src": "687:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$781",
											"typeString": "contract Context"
										}
									},
									"id": 271,
									"nodeType": "InheritanceSpecifier",
									"src": "687:7:1"
								}
							],
							"contractDependencies": [
								781
							],
							"contractKind": "contract",
							"documentation": {
								"id": 269,
								"nodeType": "StructuredDocumentation",
								"src": "163:494:1",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 378,
							"linearizedBaseContracts": [
								378,
								781
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 273,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 378,
									"src": "701:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 272,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "701:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 279,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "757:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 274,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "757:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "788:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "788:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "756:57:1"
									},
									"src": "730:84:1"
								},
								{
									"body": {
										"id": 288,
										"nodeType": "Block",
										"src": "930:49:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 284,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 769,
																"src": "959:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "959:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 283,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 377,
														"src": "940:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "940:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 287,
												"nodeType": "ExpressionStatement",
												"src": "940:32:1"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "820:91:1",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 289,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "927:2:1"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "930:0:1"
									},
									"scope": 378,
									"src": "916:63:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 296,
										"nodeType": "Block",
										"src": "1088:41:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 292,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 320,
														"src": "1098:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1098:13:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 294,
												"nodeType": "ExpressionStatement",
												"src": "1098:13:1"
											},
											{
												"id": 295,
												"nodeType": "PlaceholderStatement",
												"src": "1121:1:1"
											}
										]
									},
									"documentation": {
										"id": 290,
										"nodeType": "StructuredDocumentation",
										"src": "985:77:1",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 297,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1085:2:1"
									},
									"src": "1067:62:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 305,
										"nodeType": "Block",
										"src": "1260:30:1",
										"statements": [
											{
												"expression": {
													"id": 303,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 273,
													"src": "1277:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 302,
												"id": 304,
												"nodeType": "Return",
												"src": "1270:13:1"
											}
										]
									},
									"documentation": {
										"id": 298,
										"nodeType": "StructuredDocumentation",
										"src": "1135:65:1",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1219:2:1"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "1251:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 300,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1251:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:9:1"
									},
									"scope": 378,
									"src": "1205:85:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 319,
										"nodeType": "Block",
										"src": "1408:85:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 315,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 311,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "1426:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 312,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1426:7:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 313,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 769,
																	"src": "1437:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 314,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1437:12:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1426:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 316,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1451:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 310,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1418:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1418:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 318,
												"nodeType": "ExpressionStatement",
												"src": "1418:68:1"
											}
										]
									},
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "1296:62:1",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 320,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1383:2:1"
									},
									"returnParameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1408:0:1"
									},
									"scope": 378,
									"src": "1363:130:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "1882:47:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 329,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1919:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 328,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1911:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 327,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1911:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1911:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 326,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 377,
														"src": "1892:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1892:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 332,
												"nodeType": "ExpressionStatement",
												"src": "1892:30:1"
											}
										]
									},
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "1499:324:1",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 324,
											"modifierName": {
												"id": 323,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 297,
												"src": "1872:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1872:9:1"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1854:2:1"
									},
									"returnParameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1882:0:1"
									},
									"scope": 378,
									"src": "1828:101:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 356,
										"nodeType": "Block",
										"src": "2148:128:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 348,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 343,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 337,
																"src": "2166:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2186:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 345,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2178:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 344,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2178:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 347,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2178:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2166:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2190:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 342,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2158:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2158:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 351,
												"nodeType": "ExpressionStatement",
												"src": "2158:73:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 353,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "2260:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 352,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 377,
														"src": "2241:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2241:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 355,
												"nodeType": "ExpressionStatement",
												"src": "2241:28:1"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "1935:138:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 357,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 340,
											"modifierName": {
												"id": 339,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 297,
												"src": "2138:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2138:9:1"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "2105:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2105:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2104:18:1"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2148:0:1"
									},
									"scope": 378,
									"src": "2078:198:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 376,
										"nodeType": "Block",
										"src": "2493:124:1",
										"statements": [
											{
												"assignments": [
													364
												],
												"declarations": [
													{
														"constant": false,
														"id": 364,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 376,
														"src": "2503:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 363,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2503:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 366,
												"initialValue": {
													"id": 365,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 273,
													"src": "2522:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2503:25:1"
											},
											{
												"expression": {
													"id": 369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 367,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 273,
														"src": "2538:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 368,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "2547:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2538:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 370,
												"nodeType": "ExpressionStatement",
												"src": "2538:17:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 372,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "2591:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 373,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 360,
															"src": "2601:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 371,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 279,
														"src": "2570:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2570:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 375,
												"nodeType": "EmitStatement",
												"src": "2565:45:1"
											}
										]
									},
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "2282:143:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "2458:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2457:18:1"
									},
									"returnParameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2493:0:1"
									},
									"scope": 378,
									"src": "2430:187:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 379,
							"src": "658:1961:1"
						}
					],
					"src": "102:2517:1"
				},
				"id": 1
			},
			"contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							462
						]
					},
					"id": 463,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 380,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 462,
							"linearizedBaseContracts": [
								462
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"id": 388,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "64:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "64:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 384,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "87:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "87:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "112:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 385,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "112:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63:60:2"
									},
									"src": "49:75:2"
								},
								{
									"anonymous": false,
									"id": 396,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 396,
												"src": "144:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "144:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 396,
												"src": "166:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 391,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "166:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 396,
												"src": "186:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "186:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "143:54:2"
									},
									"src": "129:69:2"
								},
								{
									"functionSelector": "06fdde03",
									"id": 401,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "217:2:2"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "243:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 398,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "243:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "242:15:2"
									},
									"scope": 462,
									"src": "204:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "95d89b41",
									"id": 406,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "278:2:2"
									},
									"returnParameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "304:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 403,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "304:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "303:15:2"
									},
									"scope": 462,
									"src": "263:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "313ce567",
									"id": 411,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "341:2:2"
									},
									"returnParameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 411,
												"src": "367:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 408,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "367:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "366:7:2"
									},
									"scope": 462,
									"src": "324:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "18160ddd",
									"id": 416,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "399:2:2"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "425:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 413,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "425:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "424:6:2"
									},
									"scope": 462,
									"src": "379:52:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "70a08231",
									"id": 423,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "455:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 417,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "454:15:2"
									},
									"returnParameters": {
										"id": 422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "493:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "493:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:6:2"
									},
									"scope": 462,
									"src": "436:63:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "dd62ed3e",
									"id": 432,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "523:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 424,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "523:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "538:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "538:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "522:32:2"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "578:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "578:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "577:6:2"
									},
									"scope": 462,
									"src": "504:80:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "095ea7b3",
									"id": 441,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "607:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "607:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "624:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 435,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "624:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "606:29:2"
									},
									"returnParameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "654:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 438,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "654:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:6:2"
									},
									"scope": 462,
									"src": "590:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a9059cbb",
									"id": 450,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "683:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 442,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "695:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "695:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "682:24:2"
									},
									"returnParameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "725:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 447,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "725:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "724:6:2"
									},
									"scope": 462,
									"src": "665:66:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "23b872dd",
									"id": 461,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "758:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "758:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "772:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "772:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "784:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 455,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "784:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "757:38:2"
									},
									"returnParameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "814:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 458,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "814:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "813:6:2"
									},
									"scope": 462,
									"src": "736:84:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 463,
							"src": "26:796:2"
						}
					],
					"src": "0:823:2"
				},
				"id": 2
			},
			"contracts/libraries/Address.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/Address.sol",
					"exportedSymbols": {
						"Address": [
							758
						]
					},
					"id": 759,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 464,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 465,
								"nodeType": "StructuredDocumentation",
								"src": "58:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 758,
							"linearizedBaseContracts": [
								758
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 481,
										"nodeType": "Block",
										"src": "784:347:3",
										"statements": [
											{
												"assignments": [
													474
												],
												"declarations": [
													{
														"constant": false,
														"id": 474,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 481,
														"src": "981:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 473,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "981:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 475,
												"nodeType": "VariableDeclarationStatement",
												"src": "981:12:3"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1068:32:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1070:28:3",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1090:7:3"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1078:11:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1078:20:3"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1070:4:3"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 468,
														"isOffset": false,
														"isSlot": false,
														"src": "1090:7:3",
														"valueSize": 1
													},
													{
														"declaration": 474,
														"isOffset": false,
														"isSlot": false,
														"src": "1070:4:3",
														"valueSize": 1
													}
												],
												"id": 476,
												"nodeType": "InlineAssembly",
												"src": "1059:41:3"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 477,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 474,
														"src": "1116:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 478,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1123:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1116:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 472,
												"id": 480,
												"nodeType": "Return",
												"src": "1109:15:3"
											}
										]
									},
									"documentation": {
										"id": 466,
										"nodeType": "StructuredDocumentation",
										"src": "148:565:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "738:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:17:3"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "778:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 470,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "778:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:6:3"
									},
									"scope": 758,
									"src": "718:413:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "2119:320:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 493,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2145:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$758",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$758",
																				"typeString": "library Address"
																			}
																		],
																		"id": 492,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2137:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 491,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2137:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2137:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2137:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 496,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 487,
																"src": "2162:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2137:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 498,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2170:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 490,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2129:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2129:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 500,
												"nodeType": "ExpressionStatement",
												"src": "2129:73:3"
											},
											{
												"assignments": [
													502,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 502,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 515,
														"src": "2291:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 501,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2291:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 509,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 507,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2341:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 503,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "2309:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2309:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 506,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 505,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 487,
																"src": "2332:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2309:31:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2309:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2290:54:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 511,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 502,
															"src": "2362:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2371:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 510,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2354:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2354:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 514,
												"nodeType": "ExpressionStatement",
												"src": "2354:78:3"
											}
										]
									},
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "1137:906:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "2067:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2067:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "2094:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 486,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2094:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2066:43:3"
									},
									"returnParameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2119:0:3"
									},
									"scope": 758,
									"src": "2048:391:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 532,
										"nodeType": "Block",
										"src": "3269:82:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 527,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "3297:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 528,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "3305:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 529,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3311:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 526,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															533,
															553
														],
														"referencedDeclaration": 553,
														"src": "3284:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3284:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 525,
												"id": 531,
												"nodeType": "Return",
												"src": "3277:67:3"
											}
										]
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "2445:730:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 533,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 533,
												"src": "3202:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 518,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3202:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 533,
												"src": "3218:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 520,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3218:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3201:35:3"
									},
									"returnParameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 533,
												"src": "3255:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 523,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3255:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3254:14:3"
									},
									"scope": 758,
									"src": "3180:171:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 552,
										"nodeType": "Block",
										"src": "3690:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 546,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "3729:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 547,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "3737:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 548,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3743:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 549,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "3746:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 545,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															573,
															623
														],
														"referencedDeclaration": 623,
														"src": "3707:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3707:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 544,
												"id": 551,
												"nodeType": "Return",
												"src": "3700:59:3"
											}
										]
									},
									"documentation": {
										"id": 534,
										"nodeType": "StructuredDocumentation",
										"src": "3357:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "3595:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3595:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "3611:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 537,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3611:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "3630:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 539,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3630:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3594:63:3"
									},
									"returnParameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "3676:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 542,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3676:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3675:14:3"
									},
									"scope": 758,
									"src": "3573:193:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "4241:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 566,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 556,
															"src": "4280:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 567,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "4288:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 568,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "4294:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 569,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4301:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 565,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															573,
															623
														],
														"referencedDeclaration": 623,
														"src": "4258:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4258:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 564,
												"id": 571,
												"nodeType": "Return",
												"src": "4251:94:3"
											}
										]
									},
									"documentation": {
										"id": 554,
										"nodeType": "StructuredDocumentation",
										"src": "3772:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "4159:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4159:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "4175:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 557,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4175:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "4194:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 559,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4194:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4158:50:3"
									},
									"returnParameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "4227:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 562,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4227:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4226:14:3"
									},
									"scope": 758,
									"src": "4128:224:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 622,
										"nodeType": "Block",
										"src": "4741:382:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 590,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4767:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$758",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$758",
																				"typeString": "library Address"
																			}
																		],
																		"id": 589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4759:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 588,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4759:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4759:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 592,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "4759:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 593,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 580,
																"src": "4784:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4759:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4791:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 587,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4751:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4751:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 597,
												"nodeType": "ExpressionStatement",
												"src": "4751:81:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 600,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 576,
																	"src": "4861:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 599,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 482,
																"src": "4850:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4850:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 602,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4870:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 598,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4842:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4842:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 604,
												"nodeType": "ExpressionStatement",
												"src": "4842:60:3"
											},
											{
												"assignments": [
													606,
													608
												],
												"declarations": [
													{
														"constant": false,
														"id": 606,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 622,
														"src": "4973:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 605,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4973:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 608,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 622,
														"src": "4987:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 607,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4987:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 615,
												"initialValue": {
													"arguments": [
														{
															"id": 613,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 578,
															"src": "5042:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 609,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 576,
																"src": "5014:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 610,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5014:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 612,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 611,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 580,
																"src": "5034:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5014:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5014:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4972:75:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 617,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 606,
															"src": "5082:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 618,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5091:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 619,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "5103:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 616,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 757,
														"src": "5064:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5064:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 586,
												"id": 621,
												"nodeType": "Return",
												"src": "5057:59:3"
											}
										]
									},
									"documentation": {
										"id": 574,
										"nodeType": "StructuredDocumentation",
										"src": "4358:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 623,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "4631:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4631:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "4647:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 577,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4647:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "4666:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4666:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "4681:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 581,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4681:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4630:78:3"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "4727:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 584,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4727:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4726:14:3"
									},
									"scope": 758,
									"src": "4600:523:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 639,
										"nodeType": "Block",
										"src": "5400:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 634,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 626,
															"src": "5436:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 635,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 628,
															"src": "5444:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 636,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5450:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 633,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															640,
															675
														],
														"referencedDeclaration": 675,
														"src": "5417:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5417:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 632,
												"id": 638,
												"nodeType": "Return",
												"src": "5410:80:3"
											}
										]
									},
									"documentation": {
										"id": 624,
										"nodeType": "StructuredDocumentation",
										"src": "5129:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 640,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "5328:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5328:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "5344:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 627,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5344:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5327:35:3"
									},
									"returnParameters": {
										"id": 632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "5386:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 630,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5386:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5385:14:3"
									},
									"scope": 758,
									"src": "5300:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 674,
										"nodeType": "Block",
										"src": "5809:288:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 654,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 643,
																	"src": "5838:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 653,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 482,
																"src": "5827:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 655,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5827:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5847:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 652,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5819:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5819:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 658,
												"nodeType": "ExpressionStatement",
												"src": "5819:67:3"
											},
											{
												"assignments": [
													660,
													662
												],
												"declarations": [
													{
														"constant": false,
														"id": 660,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 674,
														"src": "5957:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 659,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5957:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 662,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 674,
														"src": "5971:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 661,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5971:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 667,
												"initialValue": {
													"arguments": [
														{
															"id": 665,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "6016:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 663,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 643,
															"src": "5998:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 664,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "5998:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5998:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5956:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 669,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "6056:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 670,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "6065:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 671,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 647,
															"src": "6077:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 668,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 757,
														"src": "6038:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6038:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 651,
												"id": 673,
												"nodeType": "Return",
												"src": "6031:59:3"
											}
										]
									},
									"documentation": {
										"id": 641,
										"nodeType": "StructuredDocumentation",
										"src": "5503:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 675,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "5709:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5709:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "5725:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 644,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5725:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "5744:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 646,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5744:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5708:63:3"
									},
									"returnParameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "5795:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 649,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5795:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5794:14:3"
									},
									"scope": 758,
									"src": "5681:416:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 691,
										"nodeType": "Block",
										"src": "6373:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 686,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "6411:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 687,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "6419:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6425:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 685,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															692,
															727
														],
														"referencedDeclaration": 727,
														"src": "6390:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:77:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 684,
												"id": 690,
												"nodeType": "Return",
												"src": "6383:84:3"
											}
										]
									},
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "6103:168:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 692,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "6306:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6306:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "6322:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 679,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6322:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6305:35:3"
									},
									"returnParameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "6359:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 682,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6359:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6358:14:3"
									},
									"scope": 758,
									"src": "6276:198:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 726,
										"nodeType": "Block",
										"src": "6785:292:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 706,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 695,
																	"src": "6814:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 705,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 482,
																"src": "6803:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 707,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6803:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 708,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6823:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 704,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6795:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6795:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 710,
												"nodeType": "ExpressionStatement",
												"src": "6795:69:3"
											},
											{
												"assignments": [
													712,
													714
												],
												"declarations": [
													{
														"constant": false,
														"id": 712,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 726,
														"src": "6935:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 711,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6935:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 714,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 726,
														"src": "6949:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 713,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6949:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 719,
												"initialValue": {
													"arguments": [
														{
															"id": 717,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 697,
															"src": "6996:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 715,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "6976:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 716,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "6976:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6976:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6934:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 721,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 712,
															"src": "7036:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 722,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 714,
															"src": "7045:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 723,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 699,
															"src": "7057:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 720,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 757,
														"src": "7018:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7018:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 703,
												"id": 725,
												"nodeType": "Return",
												"src": "7011:59:3"
											}
										]
									},
									"documentation": {
										"id": 693,
										"nodeType": "StructuredDocumentation",
										"src": "6480:175:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 727,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "6690:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 694,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6690:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "6706:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 696,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6706:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "6725:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 698,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6725:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6689:63:3"
									},
									"returnParameters": {
										"id": 703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "6771:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 701,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6771:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6770:14:3"
									},
									"scope": 758,
									"src": "6660:417:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 756,
										"nodeType": "Block",
										"src": "7212:596:3",
										"statements": [
											{
												"condition": {
													"id": 738,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 729,
													"src": "7226:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 754,
													"nodeType": "Block",
													"src": "7283:519:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 742,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 731,
																		"src": "7367:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 743,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7367:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 744,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7387:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7367:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 752,
																"nodeType": "Block",
																"src": "7739:53:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 749,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 733,
																					"src": "7764:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 748,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "7757:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 750,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7757:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 751,
																		"nodeType": "ExpressionStatement",
																		"src": "7757:20:3"
																	}
																]
															},
															"id": 753,
															"nodeType": "IfStatement",
															"src": "7363:429:3",
															"trueBody": {
																"id": 747,
																"nodeType": "Block",
																"src": "7390:343:3",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7574:145:3",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7596:40:3",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7625:10:3"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7619:5:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7619:17:3"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7600:15:3",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7668:2:3",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7672:10:3"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7664:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7664:19:3"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7685:15:3"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7657:6:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7657:44:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7657:44:3"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 731,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7625:10:3",
																				"valueSize": 1
																			},
																			{
																				"declaration": 731,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7672:10:3",
																				"valueSize": 1
																			}
																		],
																		"id": 746,
																		"nodeType": "InlineAssembly",
																		"src": "7565:154:3"
																	}
																]
															}
														}
													]
												},
												"id": 755,
												"nodeType": "IfStatement",
												"src": "7222:580:3",
												"trueBody": {
													"id": 741,
													"nodeType": "Block",
													"src": "7235:42:3",
													"statements": [
														{
															"expression": {
																"id": 739,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 731,
																"src": "7256:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 737,
															"id": 740,
															"nodeType": "Return",
															"src": "7249:17:3"
														}
													]
												}
											}
										]
									},
									"id": 757,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "7110:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 728,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7110:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "7124:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 730,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7124:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "7149:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 732,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7149:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7109:67:3"
									},
									"returnParameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "7198:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 735,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7198:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7197:14:3"
									},
									"scope": 758,
									"src": "7083:725:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 759,
							"src": "126:7684:3"
						}
					],
					"src": "33:7778:3"
				},
				"id": 3
			},
			"contracts/libraries/Context.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/Context.sol",
					"exportedSymbols": {
						"Context": [
							781
						]
					},
					"id": 782,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 760,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 781,
							"linearizedBaseContracts": [
								781
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 768,
										"nodeType": "Block",
										"src": "668:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 765,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "685:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "685:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 764,
												"id": 767,
												"nodeType": "Return",
												"src": "678:17:4"
											}
										]
									},
									"id": 769,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "617:2:4"
									},
									"returnParameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "651:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 762,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "651:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "650:17:4"
									},
									"scope": 781,
									"src": "598:104:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 779,
										"nodeType": "Block",
										"src": "773:165:4",
										"statements": [
											{
												"expression": {
													"id": 774,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4294967268,
													"src": "783:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$781",
														"typeString": "contract Context"
													}
												},
												"id": 775,
												"nodeType": "ExpressionStatement",
												"src": "783:4:4"
											},
											{
												"expression": {
													"expression": {
														"id": 776,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "923:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "923:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 773,
												"id": 778,
												"nodeType": "Return",
												"src": "916:15:4"
											}
										]
									},
									"id": 780,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "725:2:4"
									},
									"returnParameters": {
										"id": 773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "759:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 771,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "759:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "758:14:4"
									},
									"scope": 781,
									"src": "708:230:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 782,
							"src": "566:374:4"
						}
					],
					"src": "33:908:4"
				},
				"id": 4
			},
			"contracts/libraries/SafeERC20.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							758
						],
						"IERC20": [
							462
						],
						"SafeERC20": [
							994
						],
						"SafeMath": [
							1349
						]
					},
					"id": 995,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 783,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:5"
						},
						{
							"absolutePath": "contracts/interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 784,
							"nodeType": "ImportDirective",
							"scope": 995,
							"sourceUnit": 463,
							"src": "58:34:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/math/SafeMath.sol",
							"file": "../math/SafeMath.sol",
							"id": 785,
							"nodeType": "ImportDirective",
							"scope": 995,
							"sourceUnit": 1350,
							"src": "93:30:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/Address.sol",
							"file": "./Address.sol",
							"id": 786,
							"nodeType": "ImportDirective",
							"scope": 995,
							"sourceUnit": 759,
							"src": "124:23:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 787,
								"nodeType": "StructuredDocumentation",
								"src": "149:457:5",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 994,
							"linearizedBaseContracts": [
								994
							],
							"name": "SafeERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 790,
									"libraryName": {
										"id": 788,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1349,
										"src": "637:8:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$1349",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "631:27:5",
									"typeName": {
										"id": 789,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "650:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 793,
									"libraryName": {
										"id": 791,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 758,
										"src": "669:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$758",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "663:26:5",
									"typeName": {
										"id": 792,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "681:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 814,
										"nodeType": "Block",
										"src": "767:103:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 803,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "797:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 806,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 795,
																			"src": "827:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$462",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 807,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 450,
																		"src": "827:14:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 808,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "827:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 809,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 797,
																	"src": "852:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 810,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 799,
																	"src": "856:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 804,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "804:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 805,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "804:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 811,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "804:58:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 802,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "777:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 812,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "777:86:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 813,
												"nodeType": "ExpressionStatement",
												"src": "777:86:5"
											}
										]
									},
									"id": 815,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "717:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 794,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "717:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "731:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 796,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "731:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "743:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "743:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "716:41:5"
									},
									"returnParameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "767:0:5"
									},
									"scope": 994,
									"src": "695:175:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 839,
										"nodeType": "Block",
										"src": "966:113:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 827,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 817,
															"src": "996:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 830,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 817,
																			"src": "1026:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$462",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 831,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 461,
																		"src": "1026:18:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 832,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1026:27:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 833,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 819,
																	"src": "1055:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 834,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 821,
																	"src": "1061:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 835,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 823,
																	"src": "1065:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 828,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1003:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 829,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1003:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 836,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1003:68:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 826,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "976:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "976:96:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 838,
												"nodeType": "ExpressionStatement",
												"src": "976:96:5"
											}
										]
									},
									"id": 840,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "902:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 816,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "902:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "916:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 818,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "916:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 821,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "930:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 820,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "942:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 822,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "901:55:5"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "966:0:5"
									},
									"scope": 994,
									"src": "876:203:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 882,
										"nodeType": "Block",
										"src": "1415:537:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 853,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 851,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 847,
																			"src": "1704:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 852,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1713:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1704:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 854,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1703:12:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 864,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 859,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1744:4:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$994",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$994",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 858,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1736:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 857,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1736:7:5",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 860,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1736:13:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 861,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 845,
																					"src": "1751:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 855,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 843,
																					"src": "1720:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$462",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 856,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 432,
																				"src": "1720:15:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 862,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1720:39:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 863,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1763:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1720:44:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 865,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1719:46:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1703:62:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1779:56:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 850,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1695:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1695:150:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 869,
												"nodeType": "ExpressionStatement",
												"src": "1695:150:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 871,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "1875:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 874,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 843,
																			"src": "1905:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$462",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 875,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 441,
																		"src": "1905:13:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 876,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1905:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 877,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "1929:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 878,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 847,
																	"src": "1938:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 872,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1882:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 873,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1882:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 879,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1882:62:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 870,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "1855:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1855:90:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 881,
												"nodeType": "ExpressionStatement",
												"src": "1855:90:5"
											}
										]
									},
									"documentation": {
										"id": 841,
										"nodeType": "StructuredDocumentation",
										"src": "1085:249:5",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 883,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "1360:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 842,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "1360:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "1374:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1374:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "1391:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 846,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1391:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1359:46:5"
									},
									"returnParameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1415:0:5"
									},
									"scope": 994,
									"src": "1339:613:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 918,
										"nodeType": "Block",
										"src": "2044:197:5",
										"statements": [
											{
												"assignments": [
													893
												],
												"declarations": [
													{
														"constant": false,
														"id": 893,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 918,
														"src": "2054:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 892,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2054:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 905,
												"initialValue": {
													"arguments": [
														{
															"id": 903,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 889,
															"src": "2121:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 898,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2101:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$994",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$994",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2093:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 896,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2093:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 899,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2093:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 900,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 887,
																	"src": "2108:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 894,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 885,
																	"src": "2077:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$462",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 432,
																"src": "2077:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 901,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2077:39:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 902,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1176,
														"src": "2077:43:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2077:50:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2054:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 907,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 885,
															"src": "2157:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 910,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 885,
																			"src": "2187:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$462",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 911,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 441,
																		"src": "2187:13:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 912,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2187:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 913,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 887,
																	"src": "2211:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 914,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 893,
																	"src": "2220:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 908,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2164:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 909,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2164:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 915,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2164:69:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 906,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "2137:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 916,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2137:97:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 917,
												"nodeType": "ExpressionStatement",
												"src": "2137:97:5"
											}
										]
									},
									"id": 919,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "1989:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 884,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "1989:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "2003:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 886,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2003:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "2020:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 888,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2020:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1988:46:5"
									},
									"returnParameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2044:0:5"
									},
									"scope": 994,
									"src": "1958:283:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "2333:242:5",
										"statements": [
											{
												"assignments": [
													929
												],
												"declarations": [
													{
														"constant": false,
														"id": 929,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 955,
														"src": "2343:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 928,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 942,
												"initialValue": {
													"arguments": [
														{
															"id": 939,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 925,
															"src": "2410:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 940,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2417:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															},
															"value": "SafeERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 934,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2390:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$994",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$994",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 933,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2382:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 932,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2382:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2382:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 936,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 923,
																	"src": "2397:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 930,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 921,
																	"src": "2366:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$462",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 931,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 432,
																"src": "2366:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 937,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2366:39:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 938,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1300,
														"src": "2366:43:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2366:95:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:118:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 944,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 921,
															"src": "2491:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 947,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 921,
																			"src": "2521:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$462",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 948,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 441,
																		"src": "2521:13:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 949,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2521:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 950,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 923,
																	"src": "2545:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 951,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 929,
																	"src": "2554:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 945,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2498:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 946,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2498:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 952,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2498:69:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$462",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 943,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "2471:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$462_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2471:97:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 954,
												"nodeType": "ExpressionStatement",
												"src": "2471:97:5"
											}
										]
									},
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "2278:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 920,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "2278:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "2292:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2292:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "2309:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2309:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2277:46:5"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:5"
									},
									"scope": 994,
									"src": "2247:328:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 992,
										"nodeType": "Block",
										"src": "3028:681:5",
										"statements": [
											{
												"assignments": [
													965
												],
												"declarations": [
													{
														"constant": false,
														"id": 965,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 992,
														"src": "3377:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 964,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3377:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 974,
												"initialValue": {
													"arguments": [
														{
															"id": 971,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 961,
															"src": "3431:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 972,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3437:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 968,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 959,
																	"src": "3411:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$462",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$462",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 967,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3403:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 966,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3403:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 969,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3403:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 970,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 553,
														"src": "3403:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3403:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3377:95:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 975,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 965,
															"src": "3486:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 976,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3486:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 977,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3506:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3486:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 991,
												"nodeType": "IfStatement",
												"src": "3482:221:5",
												"trueBody": {
													"id": 990,
													"nodeType": "Block",
													"src": "3509:194:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 982,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 965,
																				"src": "3626:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 984,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3639:4:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 983,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3639:4:5",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 985,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3638:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 980,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3615:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 981,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3615:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 986,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3615:30:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 987,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3647:44:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 979,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3607:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 988,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3607:85:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 989,
															"nodeType": "ExpressionStatement",
															"src": "3607:85:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 957,
										"nodeType": "StructuredDocumentation",
										"src": "2581:372:5",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "2987:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$462",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 958,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 462,
													"src": "2987:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$462",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "3001:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 960,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3001:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2986:33:5"
									},
									"returnParameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3028:0:5"
									},
									"scope": 994,
									"src": "2958:751:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 995,
							"src": "607:3104:5"
						}
					],
					"src": "33:3679:5"
				},
				"id": 5
			},
			"contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							1349
						]
					},
					"id": 1350,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 996,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 997,
								"nodeType": "StructuredDocumentation",
								"src": "58:563:6",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 1349,
							"linearizedBaseContracts": [
								1349
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1027,
										"nodeType": "Block",
										"src": "857:98:6",
										"statements": [
											{
												"assignments": [
													1010
												],
												"declarations": [
													{
														"constant": false,
														"id": 1010,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 1027,
														"src": "867:9:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1009,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "867:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1014,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1011,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1000,
														"src": "879:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1012,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "883:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "879:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "867:17:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1017,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1015,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1010,
														"src": "898:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1016,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1000,
														"src": "902:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "898:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1022,
												"nodeType": "IfStatement",
												"src": "894:28:6",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1018,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "913:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1019,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "920:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1020,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "912:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1008,
													"id": 1021,
													"nodeType": "Return",
													"src": "905:17:6"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1023,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "940:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 1024,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1010,
															"src": "946:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1025,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "939:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1008,
												"id": 1026,
												"nodeType": "Return",
												"src": "932:16:6"
											}
										]
									},
									"documentation": {
										"id": 998,
										"nodeType": "StructuredDocumentation",
										"src": "645:131:6",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1028,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "797:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 999,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "797:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "808:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1001,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "808:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "796:22:6"
									},
									"returnParameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "842:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1004,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "842:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "848:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "848:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "841:15:6"
									},
									"scope": 1349,
									"src": "781:174:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1054,
										"nodeType": "Block",
										"src": "1177:75:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1040,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1033,
														"src": "1191:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1041,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1031,
														"src": "1195:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1191:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1047,
												"nodeType": "IfStatement",
												"src": "1187:28:6",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1043,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1206:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1044,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1213:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1045,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1205:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1039,
													"id": 1046,
													"nodeType": "Return",
													"src": "1198:17:6"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1048,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1233:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1051,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1049,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1031,
																"src": "1239:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1050,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1033,
																"src": "1243:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1239:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1052,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1232:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1039,
												"id": 1053,
												"nodeType": "Return",
												"src": "1225:20:6"
											}
										]
									},
									"documentation": {
										"id": 1029,
										"nodeType": "StructuredDocumentation",
										"src": "961:135:6",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1055,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "1117:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1030,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1117:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "1128:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1128:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1116:22:6"
									},
									"returnParameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "1162:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1035,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1162:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "1168:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1037,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:15:6"
									},
									"scope": 1349,
									"src": "1101:151:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1095,
										"nodeType": "Block",
										"src": "1476:359:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1069,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1067,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "1708:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1068,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1713:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1708:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1074,
												"nodeType": "IfStatement",
												"src": "1704:28:6",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "74727565",
																"id": 1070,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1724:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"hexValue": "30",
																"id": 1071,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1730:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1072,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1723:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1066,
													"id": 1073,
													"nodeType": "Return",
													"src": "1716:16:6"
												}
											},
											{
												"assignments": [
													1076
												],
												"declarations": [
													{
														"constant": false,
														"id": 1076,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 1095,
														"src": "1742:9:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1075,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1742:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1080,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1079,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1077,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "1754:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1078,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "1758:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1754:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1742:17:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1083,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1081,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1076,
															"src": "1773:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 1082,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1058,
															"src": "1777:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1773:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1084,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "1782:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1773:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1090,
												"nodeType": "IfStatement",
												"src": "1769:33:6",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1086,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1793:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1800:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1088,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1792:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1066,
													"id": 1089,
													"nodeType": "Return",
													"src": "1785:17:6"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1091,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1820:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 1092,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1076,
															"src": "1826:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1093,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1819:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1066,
												"id": 1094,
												"nodeType": "Return",
												"src": "1812:16:6"
											}
										]
									},
									"documentation": {
										"id": 1056,
										"nodeType": "StructuredDocumentation",
										"src": "1258:137:6",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1096,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1058,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "1416:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1057,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1416:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1060,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "1427:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1059,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1427:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1415:22:6"
									},
									"returnParameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "1461:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1062,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1461:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "1467:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1467:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1460:15:6"
									},
									"scope": 1349,
									"src": "1400:435:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1122,
										"nodeType": "Block",
										"src": "2060:76:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1108,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1101,
														"src": "2074:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1109,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2079:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2074:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1115,
												"nodeType": "IfStatement",
												"src": "2070:29:6",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2090:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1112,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2097:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1113,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2089:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1107,
													"id": 1114,
													"nodeType": "Return",
													"src": "2082:17:6"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1116,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2117:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1117,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1099,
																"src": "2123:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1118,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1101,
																"src": "2127:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2123:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1120,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2116:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1107,
												"id": 1121,
												"nodeType": "Return",
												"src": "2109:20:6"
											}
										]
									},
									"documentation": {
										"id": 1097,
										"nodeType": "StructuredDocumentation",
										"src": "1841:138:6",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2000:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2000:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2011:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2011:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1999:22:6"
									},
									"returnParameters": {
										"id": 1107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2045:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1103,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2045:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2051:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2051:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2044:15:6"
									},
									"scope": 1349,
									"src": "1984:152:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1149,
										"nodeType": "Block",
										"src": "2371:76:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1135,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1128,
														"src": "2385:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1136,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2390:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2385:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1142,
												"nodeType": "IfStatement",
												"src": "2381:29:6",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1138,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2401:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1139,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2408:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1140,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2400:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1134,
													"id": 1141,
													"nodeType": "Return",
													"src": "2393:17:6"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1143,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2428:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1144,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1126,
																"src": "2434:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1145,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1128,
																"src": "2438:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2434:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1147,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2427:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1134,
												"id": 1148,
												"nodeType": "Return",
												"src": "2420:20:6"
											}
										]
									},
									"documentation": {
										"id": 1124,
										"nodeType": "StructuredDocumentation",
										"src": "2142:148:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1150,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1150,
												"src": "2311:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2311:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1150,
												"src": "2322:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2322:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2310:22:6"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1150,
												"src": "2356:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1130,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2356:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1150,
												"src": "2362:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2362:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:15:6"
									},
									"scope": 1349,
									"src": "2295:152:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "2749:108:6",
										"statements": [
											{
												"assignments": [
													1161
												],
												"declarations": [
													{
														"constant": false,
														"id": 1161,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 1175,
														"src": "2759:9:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1160,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2759:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1165,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1162,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1153,
														"src": "2771:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1163,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1155,
														"src": "2775:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2771:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2759:17:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1167,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1161,
																"src": "2794:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1168,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1153,
																"src": "2799:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2794:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 1170,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2802:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 1166,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2786:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2786:46:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1172,
												"nodeType": "ExpressionStatement",
												"src": "2786:46:6"
											},
											{
												"expression": {
													"id": 1173,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1161,
													"src": "2849:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1159,
												"id": 1174,
												"nodeType": "Return",
												"src": "2842:8:6"
											}
										]
									},
									"documentation": {
										"id": 1151,
										"nodeType": "StructuredDocumentation",
										"src": "2453:224:6",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2695:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2695:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2706:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2706:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2694:22:6"
									},
									"returnParameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2740:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2740:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2739:9:6"
									},
									"scope": 1349,
									"src": "2682:175:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1197,
										"nodeType": "Block",
										"src": "3195:88:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1187,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1181,
																"src": "3213:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1188,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1179,
																"src": "3218:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3213:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 1190,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3221:32:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 1186,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3205:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3205:49:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1192,
												"nodeType": "ExpressionStatement",
												"src": "3205:49:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1193,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1179,
														"src": "3271:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1194,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1181,
														"src": "3275:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3271:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1185,
												"id": 1196,
												"nodeType": "Return",
												"src": "3264:12:6"
											}
										]
									},
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "2863:260:6",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1198,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "3141:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3141:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "3152:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3152:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3140:22:6"
									},
									"returnParameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1184,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "3186:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3186:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3185:9:6"
									},
									"scope": 1349,
									"src": "3128:155:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1231,
										"nodeType": "Block",
										"src": "3597:148:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1208,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1201,
														"src": "3611:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1209,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3616:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3611:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1213,
												"nodeType": "IfStatement",
												"src": "3607:20:6",
												"trueBody": {
													"expression": {
														"hexValue": "30",
														"id": 1211,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3626:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 1207,
													"id": 1212,
													"nodeType": "Return",
													"src": "3619:8:6"
												}
											},
											{
												"assignments": [
													1215
												],
												"declarations": [
													{
														"constant": false,
														"id": 1215,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 1231,
														"src": "3637:9:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1214,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3637:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1219,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1216,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1201,
														"src": "3649:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1217,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1203,
														"src": "3653:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3649:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3637:17:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1223,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1221,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1215,
																	"src": "3672:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1222,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1201,
																	"src": "3676:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3672:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1224,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "3681:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3672:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3684:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 1220,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3664:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3664:56:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1228,
												"nodeType": "ExpressionStatement",
												"src": "3664:56:6"
											},
											{
												"expression": {
													"id": 1229,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1215,
													"src": "3737:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1207,
												"id": 1230,
												"nodeType": "Return",
												"src": "3730:8:6"
											}
										]
									},
									"documentation": {
										"id": 1199,
										"nodeType": "StructuredDocumentation",
										"src": "3289:236:6",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 1232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "3543:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3543:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "3554:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3554:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3542:22:6"
									},
									"returnParameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "3588:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3588:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3587:9:6"
									},
									"scope": 1349,
									"src": "3530:215:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1253,
										"nodeType": "Block",
										"src": "4276:83:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1243,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1237,
																"src": "4294:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1244,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4298:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4294:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 1246,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4301:28:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 1242,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4286:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4286:44:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1248,
												"nodeType": "ExpressionStatement",
												"src": "4286:44:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1249,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1235,
														"src": "4347:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1250,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1237,
														"src": "4351:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4347:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1241,
												"id": 1252,
												"nodeType": "Return",
												"src": "4340:12:6"
											}
										]
									},
									"documentation": {
										"id": 1233,
										"nodeType": "StructuredDocumentation",
										"src": "3751:453:6",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "4222:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4222:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "4233:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4233:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4221:22:6"
									},
									"returnParameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "4267:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4267:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4266:9:6"
									},
									"scope": 1349,
									"src": "4209:150:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1275,
										"nodeType": "Block",
										"src": "4879:81:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1265,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1259,
																"src": "4897:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1266,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4901:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4897:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 1268,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4904:26:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 1264,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4889:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4889:42:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1270,
												"nodeType": "ExpressionStatement",
												"src": "4889:42:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1271,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1257,
														"src": "4948:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1272,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1259,
														"src": "4952:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4948:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1263,
												"id": 1274,
												"nodeType": "Return",
												"src": "4941:12:6"
											}
										]
									},
									"documentation": {
										"id": 1255,
										"nodeType": "StructuredDocumentation",
										"src": "4365:442:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1276,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "4825:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4825:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "4836:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4824:22:6"
									},
									"returnParameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "4870:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4869:9:6"
									},
									"scope": 1349,
									"src": "4812:148:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1299,
										"nodeType": "Block",
										"src": "5519:68:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1291,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1289,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1281,
																"src": "5537:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1290,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1279,
																"src": "5542:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5537:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1292,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1283,
															"src": "5545:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1288,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5529:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5529:29:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1294,
												"nodeType": "ExpressionStatement",
												"src": "5529:29:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1295,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1279,
														"src": "5575:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1296,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1281,
														"src": "5579:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5575:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1287,
												"id": 1298,
												"nodeType": "Return",
												"src": "5568:12:6"
											}
										]
									},
									"documentation": {
										"id": 1277,
										"nodeType": "StructuredDocumentation",
										"src": "4966:453:6",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "5437:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5437:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "5448:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5448:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1283,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "5459:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1282,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5459:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5436:50:6"
									},
									"returnParameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "5510:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5510:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5509:9:6"
									},
									"scope": 1349,
									"src": "5424:163:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1323,
										"nodeType": "Block",
										"src": "6339:67:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1315,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1313,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1305,
																"src": "6357:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1314,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6361:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6357:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1316,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1307,
															"src": "6364:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1312,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6349:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6349:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1318,
												"nodeType": "ExpressionStatement",
												"src": "6349:28:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1319,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1303,
														"src": "6394:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1320,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1305,
														"src": "6398:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6394:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1311,
												"id": 1322,
												"nodeType": "Return",
												"src": "6387:12:6"
											}
										]
									},
									"documentation": {
										"id": 1301,
										"nodeType": "StructuredDocumentation",
										"src": "5593:646:6",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1324,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "6257:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6257:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "6268:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6268:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1307,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "6279:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1306,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6279:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:50:6"
									},
									"returnParameters": {
										"id": 1311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "6330:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6330:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6329:9:6"
									},
									"scope": 1349,
									"src": "6244:162:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1347,
										"nodeType": "Block",
										"src": "7147:67:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1339,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1337,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1329,
																"src": "7165:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1338,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7169:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7165:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1340,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1331,
															"src": "7172:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1336,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7157:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7157:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1342,
												"nodeType": "ExpressionStatement",
												"src": "7157:28:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1343,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1327,
														"src": "7202:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1344,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1329,
														"src": "7206:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7202:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1335,
												"id": 1346,
												"nodeType": "Return",
												"src": "7195:12:6"
											}
										]
									},
									"documentation": {
										"id": 1325,
										"nodeType": "StructuredDocumentation",
										"src": "6412:635:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "7065:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7065:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "7076:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1328,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7076:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "7087:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1330,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7087:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7064:50:6"
									},
									"returnParameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "7138:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7138:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7137:9:6"
									},
									"scope": 1349,
									"src": "7052:162:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1350,
							"src": "622:6594:6"
						}
					],
					"src": "33:7183:6"
				},
				"id": 6
			}
		}
	}
}